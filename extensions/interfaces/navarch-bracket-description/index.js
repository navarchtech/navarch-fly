import{defineInterface as e}from"@directus/extensions-sdk";import{defineComponent as t,inject as a,ref as n,watch as u,resolveComponent as i,openBlock as l,createBlock as r}from"vue";var o=(e=>(e.ASSAY="assay",e.CHARGE="charge",e.PENALTY="penalty",e))(o||{}),s=(e=>(e.ABOVE="above the lower threshold, plus",e.BELOW="below the upper threshold, minus",e))(s||{}),c=(e=>(e.BRACKET="Bracket",e.MAX_CAP="Maximum Cap",e.MIN_DEDUCTION="Minimum Deduction",e))(c||{}),m=(e=>(e.PERCENTAGE="Percentage",e.FRACTIONAL="Fractional",e))(m||{}),f=t({props:{value:{type:String,default:null},formType:{type:String,default:null}},emits:["input"],setup(e,{emit:t}){const i=a("values",n({}));e.formType;const l="lower_threshold",r="lower_threshold_inclusive",f="upper_threshold",y="upper_threshold_inclusive",v="bracket_type",h="rate",$="rate_type",p="initial_adjustment",d="initial_adjustment_uom",A="minimum_deduction",E="minimum_deduction_uom",_="maximum_cap",w="maximum_cap_uom",g="base_treatment_charge",C="use_btc",N="escalator_reference",P="for_every_unit",T="rate",b="no_penalty",D="escalator_reference",S="rate",R=[l,r,f,y];let U=[];switch(e.formType){case"assay":U=R.concat([v,h,$,p,d,A,E,_,w]);break;case"charge":U=R.concat([g,C,N,P,T]);break;case"penalty":U=R.concat([b,D,"for_every_unit",S])}U.forEach((e=>{u((()=>i.value[e]),B)}));const k=n(""),x=n("");function B(){switch(e.formType){case o.ASSAY:k.value=G(i.value[l],!!i.value[r],i.value[f],!!i.value[y],"Commodity Analytical Assay"),x.value=function(e,t,a,n,u,i,l,r,o){switch(e){case c.BRACKET:if(M(t)&&O(n))return`Pay ${t}${a===m.PERCENTAGE?"%":""} of the amount`;if(M(n,t))return`Deduct ${n}${null!=u?u:" assay unit(s)"} from the Commodity Analytical Assay, then pay ${t}${a===m.PERCENTAGE?"%":""} of the amount`;case c.MAX_CAP:if(M(t,r)&&O(n))return`Pay ${t}${a===m.PERCENTAGE?"%":""} of the amount with a maximum cap of ${r}${null!=o?o:" assay unit(s)"}`;if(M(t,r,n))return`Deduct ${n}${null!=u?u:" assay unit(s)"} from the Commodity Analytical Assay, then pay ${t}${a===m.PERCENTAGE?"%":""} of the amount with a maximum cap of ${r}${null!=o?o:" assay unit(s)"}`;case c.MIN_DEDUCTION:if(M(t,i)&&O(n))return`Pay ${t}${a===m.PERCENTAGE?"%":""} of the amount with a minimum deduction of ${i}${null!=l?l:" assay unit(s)"}`;if(M(t,i,n))return`Deduct ${n}${null!=u?u:" assay unit(s)"} from the Commodity Analytical Assay, then pay ${t}${a===m.PERCENTAGE?"%":""} of the amount with a minimum deduction of ${i}${null!=l?l:" assay unit(s)"}`}return null}(i.value[v],i.value[h],i.value[$],i.value[p],i.value[d],i.value[A],i.value[E],i.value[_],i.value[w]),null!==k.value&&null!==x.value&&t("input",`${x.value}${k.value}`);break;case o.CHARGE:x.value=function(e,t,a,n,u,i,l,r,o){if(i){if(M(u))return`${I(u)} USD/(weight unit)${G(e,t,a,n,"Commodity Price Rate")}`}else if(r===s.ABOVE){if(M(e,o,l))return`Plus ${I(o)} USD/(weight unit) from ${I(u)} USD/(weight unit) for every ${I(l)}USD/(weight unit) above ${e} USD/(weight unit)`}else if(r===s.BELOW&&M(a,o,l))return`Deduct ${I(o)} USD/(weight unit) from ${I(u)} USD/(weight unit) for every ${I(l)}USD/(weight unit) below ${a} USD/(weight unit)`;return null}(i.value[l],!!i.value[r],i.value[f],!!i.value[y],i.value[g],i.value[C],i.value[N],i.value[P],i.value[T]),null!==x.value&&t("input",`${x.value}`);break;case o.PENALTY:console.log(`Penalty form inputs=${JSON.stringify(i.value)}`),x.value=function(e,t,a,n,u,i,l){if(u)return`No penalty applied${G(e,t,a,n,"Commodity Analaytical Assay")}`;if(M(e,l,i)&&O(a))return`Penalty of ${I(l)} USD/(weight unit) for every ${I(i)} assay unit above ${e} assay unit(s)`;if(M(e,a,l,i))return`Penalty of ${I(l)} USD/(weight unit) for every ${I(i)} assay unit between ${e} assay unit(s)${t?" (incl.)":""} and ${a} assay unit(s)${n?" (incl.)":""}`;return null}(i.value[l],!!i.value[r],i.value[f],!!i.value[y],i.value[b],i.value[D],i.value[S]),null!==x.value&&t("input",`${x.value}`)}}return{handleChange:function(e){t("input",e)}};function G(e,t,a,n,u){let i=null;return 0===e&&O(a)?i="":0===e&&M(a)?i=` when the ${u} is less than ${a} assay unit(s)${n?" (incl.)":""}`:M(e,a)?i=` when the ${u} is between ${e} assay unit(s)${t?" (incl.)":""} and ${a}${n?" (incl.)":""}`:M(e)&&O(a)&&(i=` when the ${u} is greater than ${e} assay unit(s)${t?" (incl.)":""}`),i}function M(...e){return e.every((e=>null!=e&&!isNaN(e)))}function O(e){return null==e||isNaN(e)}function I(e,t=2,a=!0){if(console.log(`[formatNumber] with number value=${e}`),isNaN(e)||null===e)return"-";const n=Math.round(e*Math.pow(10,t))/Math.pow(10,t),[u,i]=n.toString().split(".");if(!u)return"";const l=u.replace(/\B(?=(\d{3})+(?!\d))/g,",");if(!i&&!a)return l;return`${l}.${(null!=i?i:"").padEnd(t,"0")}`}}});f.render=function(e,t,a,n,u,o){const s=i("v-input");return l(),r(s,{modelValue:e.value,"onUpdate:modelValue":t[0]||(t[0]=t=>e.value=t),disabled:!0},null,8,["modelValue"])},f.__file="src/interface.vue";var y=e({id:"navarch-bracket-description",name:"Navarch Bracket Description",icon:"data_info_alert",description:"To describe bracket for Penalty, Refining Charge, Treatment Charge, & Payable Rates",component:f,options:()=>[{field:"formType",name:"Form Type",type:"string",meta:{interface:"select-dropdown",options:{allowNone:!1,choices:[{text:"Payable Assay Rate",value:"assay"},{text:"Treatment/Refining Charge",value:"charge"},{text:"Penalty Rate",value:"penalty"}]}}}],types:["string"]});export{y as default};
