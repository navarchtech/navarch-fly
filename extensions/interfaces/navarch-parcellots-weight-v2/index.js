import{useApi as e,defineInterface as t}from"@directus/extensions-sdk";import{ref as o,defineComponent as a,inject as n,watch as r,resolveComponent as i,openBlock as l,createElementBlock as d,Fragment as c,createCommentVNode as s,createVNode as u,withCtx as h,createElementVNode as g,toDisplayString as v,createTextVNode as p}from"vue";const w=[];for(let e=0;e<256;++e)w.push((e+256).toString(16).slice(1));let m;const f=new Uint8Array(16);function y(){if(!m){if("undefined"==typeof crypto||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");m=crypto.getRandomValues.bind(crypto)}return m(f)}var b={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};function _(e,t,o){if(b.randomUUID&&!t&&!e)return b.randomUUID();const a=(e=e||{}).random||(e.rng||y)();if(a[6]=15&a[6]|64,a[8]=63&a[8]|128,t){o=o||0;for(let e=0;e<16;++e)t[o+e]=a[e];return t}return function(e,t=0){return(w[e[t+0]]+w[e[t+1]]+w[e[t+2]]+w[e[t+3]]+"-"+w[e[t+4]]+w[e[t+5]]+"-"+w[e[t+6]]+w[e[t+7]]+"-"+w[e[t+8]]+w[e[t+9]]+"-"+w[e[t+10]]+w[e[t+11]]+w[e[t+12]]+w[e[t+13]]+w[e[t+14]]+w[e[t+15]]).toLowerCase()}(a)}const D="foreign_key",W="lot_number",x="navarch_contract",$="weight_uom",S="moisture_uom",U="methods",I="navarch_unit",M="wet_symbol",C="dry_symbol";var E=(e=>(e[e.Estimated=0]="Estimated",e[e.Planned=10]="Planned",e[e.Inturn=20]="Inturn",e[e.InturnFinal=30]="InturnFinal",e[e.Outturn=40]="Outturn",e))(E||{});function O(e){if(console.log("[evaluateWeightData]"),0===e.length)return null;const t=L(e,"dry_weight"),o=L(e,"wet_weight");return{method:k(e,"method"),lots:e,dryWeightUom:k(e,"dry_weight_uom"),wetWeightUom:k(e,"wet_weight_uom"),dryWeight:t,wetWeight:o,moisture:(o-t)/o*100}}function L(e,t){return e.reduce(((e,o)=>{var a,n;return e+(null!=(n=parseFloat(null!=(a=o[t])?a:"0"))?n:0)}),0)}function k(e,t){var o;return 0!==e.length&&e[0]&&null!=(o=e[0][t])?o:null}function N(e,t=2,o=!0){if(isNaN(e)||null==e)return"-";const a=Math.round(e*Math.pow(10,t))/Math.pow(10,t),[n,r]=a.toString().split("."),i=n?n.replace(/\B(?=(\d{3})+(?!\d))/g,","):0;if(!r&&!o)return i;return`${i}.${(null!=r?r:"").padEnd(t,"0")}`}const A=o([{text:"Method",value:"method",sortable:!1,width:150,align:"left"},{text:"Wet Weight",value:"wet_weight",sortable:!1,width:150,align:"left"},{text:"Moisture (%)",value:"moisture",sortable:!1,width:150,align:"left"},{text:"Dry Weight",value:"dry_weight",sortable:!1,width:150,align:"left"}]),T=o([{text:"To Delete",value:"delete",sortable:!1,width:60,align:"left"},{text:"Lot",value:"lot_number",sortable:!1,width:60,align:"left"},{text:"Wet Weight",value:"wet_weight",sortable:!1,width:150,align:"left"},{text:"Moisture (%)",value:"moisture",sortable:!1,width:150,align:"left"},{text:"Dry Weight",value:"dry_weight",sortable:!1,width:150,align:"left"}]);var j=a({props:{value:{type:String,default:null}},emits:["input"],setup(t,{emit:a}){const i=e(),l=n("values",o({}));let d=l.value.weight_results_v2||l.value.weight_result||null;r((()=>l.value.weight_result),(e=>d=e));const c=o({create:[],update:[],delete:[]});r(c,(e=>{console.log(`[navarch-parcellots-weight-v2:watch:editedWeightLotIds] parcel id=${l.value.id}; new edited ids=\n${JSON.stringify(e)}`)}),{deep:!0});const s=o({[E.Estimated]:null,[E.Planned]:null,[E.Inturn]:null,[E.InturnFinal]:null,[E.Outturn]:null});r(s,(e=>{console.log(`[navarch-parcellots-weight-v2:watch:weightLotsByMethod] parcel id=${l.value.id}; new weight lots=\n${JSON.stringify(e)}`)}),{deep:!0});const u=o([]);r(u,(e=>{console.log(`[navarch-parcellots-weight-v2:watch:methodSelection] parcel id=${l.value.id}; new method selection=\n${JSON.stringify(e)}`)}),{deep:!0});const h=o({isConfirmSavePopupOpen:!1,isConfirmDeletePopupOpen:!1,isConfirmClosePopupOpen:!1,isLoadingWhileAddingNewWeightByMethod:!1,isLoadingWhileEditingLotsViaApi:!1,contractData:null,editingDisabledReason:null,weightLotsForDrawerDisplay:null});return r(h,(e=>{console.log(`[navarch-parcellots-weight-v2:watch:interfaceState] parcel id=${l.value.id}; new state=\n${JSON.stringify(e)}`)}),{deep:!0}),null===d?d=_():i.get("/items/navarch_weight_lot",{params:{filter:{[D]:{_eq:d}},sort:[W],fields:[W,"method","wet_weight","wet_weight_uom","moisture","dry_weight","dry_weight_uom"]}}).then((e=>{const t=function(e){const t={};for(const o of e)t[o.method]||(console.log(`adding method ${o.method} to weightData object`),t[o.method]=[]),t[o.method].push(o);const o=[];for(const e of Object.keys(t)){if(!t[e]){console.log(`method=${e} does not exist in weightData object`);continue}console.log(`adding lots and other values to weights for method=${e}`);const a=O(t[e]);a&&o.push(a)}return o}(e.data.data);s.value=t.reduce(((e,t)=>(e[function(e){switch(e){case"Inturn":return E.Inturn;case"Outturn":return E.Outturn;case"Inturn Final":return E.InturnFinal;case"Planned":return E.Planned;case"Estimated":return E.Estimated;default:throw new Error(`Invalid method type ${e}, please contact Navarch for support`)}}(t.method)]=t,e)),{})})).catch((e=>{})),r((()=>l.value.contract),(async e=>{if(console.log(`[navarch-parcellots-weight-v2:watch:contract field] new contract id=${e} for parcel id=${l.value.id}`),null===e)return h.value.contractData=null,void(h.value.editingDisabledReason="Selecting a contract for this parcel is required to create/edit weight lots");await async function(e){console.log(`[navarch-parcellots-weight-v2:getContractData] start with param contractId=${e} for parcel id=${l.value.id}`);try{const t=(await i.get(`/items/${x}/${e}`,{params:{fields:[$,S,U]}})).data.data;!function(e){if(console.log("[validateContractData]"),!e)throw new Error("Contract data response is empty, please ensure the selected contract for this parcel still exists");if(!e[$])throw new Error("Contract field 'Weight UOM' is empty");if(!e[S])throw new Error("Contract field 'Moisture UOM' is empty");if(!e[S]||!Array.isArray(e[U]))throw new Error("Contract field 'Methods' is empty or not a list");console.log("[validateContractData] contract data validated")}(t);const o=await i.get(`/items/${I}/${t.weight_uom}`,{params:{fields:[M,C]}});!function(e){if(console.log("[validateDryWetWeightUom]"),!e)throw new Error("Weight uom response is empty, please ensure a valid weight UOM has been selected in the contract");if(!e[M])throw new Error(`Contract field 'Weight UOM' may have an invalid 'Wet Symbol' field value of ${e.wet_symbol}, please ensure a valid UOM with a proper Wet Symbol is selected`);if(!e[C])throw new Error(`Contract field 'Weight UOM' may have an invalid 'Dry Symbol' field value of ${e.dry_symbol}, please ensure a valid UOM with a proper Dry Symbol is selected`);console.log("[validateDryWetWeightUom] fetched uom for dry/wet weights are valid")}(o.data.data),h.value.contractData={wetWeightUom:o.data.data[M],dryWeightUom:o.data.data[C],moistureUom:t[S],methods:t[U]},console.log(`[navarch-parcellots-weight-v2:getContractData] completed for parcel id=${l.value.id}`)}catch(e){h.value.editingDisabledReason=`Contract data could not be fetched due to: ${e.message}`,console.error(`[navarch-parcellots-weight-v2:getContractData] failed for parcel id=${l.value.id} with reason: ${e}`)}}(e),function(){if(console.log(`[navarch-parcellots-weight-v2:setSelectableMethodSelection] start for parcel id=${l.value.id}`),!h.value.contractData)return u.value=[],void console.log(`[navarch-parcellots-weight-v2:setSelectableMethodSelection] completed for parcel id=${l.value.id}`);u.value=h.value.contractData.methods.map((e=>({value:e,text:e}))),Object.keys(E).forEach((e=>{if(null!==s.value[E[e]]){const t=u.value.findIndex((t=>t.value===e.replace(/_/g,"-").replace(/\b\w/g,(e=>e.toUpperCase())).split(/(?=[A-Z])/).join(" ")));u.value.splice(t,1)}})),console.log(`[navarch-parcellots-weight-v2:setSelectableMethodSelection] completed for parcel id=${l.value.id}`)}(),h.value.editingDisabledReason=h.value.contractData?null:h.value.editingDisabledReason}),{immediate:!0}),{weightLotsByMethod:s,interfaceState:h,onKeyDown:function(e,t,o){if(console.log("[navarch-parcellots-weight-v2:onKeyDown] started"),"Enter"===o.code||"NumpadEnter"===o.code)return void console.log("[navarch-parcellots-weight-v2:onKeyDown] completed, focusing on the next field");e.wet_weight&&e.moisture&&e.dry_weight||e.wet_weight&&e.moisture&&!e.dry_weight||e.wet_weight&&!e.moisture&&e.dry_weight||!e.wet_weight&&e.moisture&&e.dry_weight;console.log("[navarch-parcellots-weight-v2:onKeyDown] completed, auto evaluation performed")},onMainWeightLotTableRowClick:function(e){},WeightTableHeaders:A,WeightLotTableHeaders:T,formatNumber:N}}});var F=[],R=[];!function(e,t){if(e&&"undefined"!=typeof document){var o,a=!0===t.prepend?"prepend":"append",n=!0===t.singleTag,r="string"==typeof t.container?document.querySelector(t.container):document.getElementsByTagName("head")[0];if(n){var i=F.indexOf(r);-1===i&&(i=F.push(r)-1,R[i]={}),o=R[i]&&R[i][a]?R[i][a]:R[i][a]=l()}else o=l();65279===e.charCodeAt(0)&&(e=e.substring(1)),o.styleSheet?o.styleSheet.cssText+=e:o.appendChild(document.createTextNode(e))}function l(){var e=document.createElement("style");if(e.setAttribute("type","text/css"),t.attributes)for(var o=Object.keys(t.attributes),n=0;n<o.length;n++)e.setAttribute(o[n],t.attributes[o[n]]);var i="prepend"===a?"afterbegin":"beforeend";return r.insertAdjacentElement(i,e),e}}('.weight-table .table-row[data-v-64969d30] {\n  height: 30px;\n}\n.weight-table .weight_cell[data-v-64969d30] {\n  width: 100%;\n}\n.weight-table .header_cell_with_input[data-v-64969d30] {\n  height: 60px;\n}\n.margin-top-16px[data-v-64969d30] {\n  margin-top: 16px;\n}\n.v-icon-white[data-v-64969d30] {\n  --v-icon-color: #ffffff;\n}\n.v-icon-purple[data-v-64969d30] {\n  --v-icon-color: #8866FF;\n}\n.v-icon-delete-button-small-foreground-subdued[data-v-64969d30] {\n  --v-icon-size: 18px;\n  --v-icon-color: var(--foreground-subdued);\n}\n.v-icon-delete-button-small-red[data-v-64969d30] {\n  --v-icon-size: 18px;\n  --v-icon-color: var(--red);\n}\n.v-button-red-on-hover[data-v-64969d30] {\n  --v-button-color: var(--white);\n  --v-button-background-color: var(--background-normal);\n  --v-button-color-hover: var(--white);\n  --v-button-background-color-hover: var(--red);\n}\n.v-button-red[data-v-64969d30] {\n  --v-button-color: var(--white);\n  --v-button-background-color: var(--danger);\n  --v-button-color-hover: var(--white);\n  --v-button-background-color-hover: var(--danger-125);\n}\n.drawer-content[data-v-64969d30] {\n  padding: 0 32px 40px;\n}\n.weight-drawer[data-v-64969d30] {\n  max-width: 1500px !important;\n}\n.input-label[data-v-64969d30] {\n  color: #f0f6fc;\n  font-weight: 600;\n  font-size: 16px;\n  font-family: "Inter", -apple-system, "BlinkMacSystemFont", "Segoe UI", "Roboto", "Helvetica", "Arial", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n  font-style: normal;\n  line-height: 19px;\n  margin-bottom: 8px;\n  padding-top: 20px;\n}',{}),j.render=function(e,t,o,a,n,r){const w=i("v-overlay"),m=i("v-table"),f=i("v-button"),y=i("v-drawer"),b=i("v-dialog");return l(),d(c,null,[s(" Darkened area over the UI when loading "),u(w,{active:e.interfaceState.isLoadingWhileEditingLotsViaApi,clickable:!1},null,8,["active"]),s(" Displayed in the Parcel form "),u(m,{class:"weight-table",headers:e.WeightTableHeaders,items:()=>Object.values(e.weightLotsByMethod).filter((e=>null!==e)),rowHeight:30,"onClick:row":e.onMainWeightLotTableRowClick,fixedHeader:"",inline:""},{"item.wet_weight":h((({item:t})=>[g("div",null,v(`${e.formatNumber(t.wet_weight)}${t.wet_weight?t.wet_weight_uom:""}`),1)])),"item.moisture":h((({item:t})=>[g("div",null,v(e.formatNumber(t.moisture)),1)])),"item.dry_weight":h((({item:t})=>[g("div",null,v(`${e.formatNumber(t.dry_weight)}${t.dry_weight?t.dry_weight_uom:""}`),1)])),_:2},1032,["headers","items","onClick:row"]),u(f,null,{default:h((()=>[p("Add Weight")])),_:1}),s(" Displayed when the Drawer is open to show Weight Lots by Method "),u(y),u(b),u(b),u(b)],64)},j.__scopeId="data-v-64969d30",j.__file="src/interface.vue";var P=t({id:"navarch-parcellots-weight-v2",name:"Navarch Weight Lots Table v2",icon:"arrow_right_alt",description:"Navarch Weight Lots Table Interface for Parcel Form",component:j,options:null,types:["uuid","string","text","integer","bigInteger","alias"],group:"relational",localTypes:["o2m"],relational:!0});export{P as default};
