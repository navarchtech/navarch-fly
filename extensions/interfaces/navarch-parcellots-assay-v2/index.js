import{useApi as e,defineInterface as a}from"@directus/extensions-sdk";import{ref as t,defineComponent as s,inject as o,watch as l,resolveComponent as i,resolveDirective as n,openBlock as r,createElementBlock as d,Fragment as c,createCommentVNode as u,createVNode as m,withCtx as y,createElementVNode as p,toDisplayString as v,withDirectives as h,createBlock as f,createTextVNode as g,normalizeClass as b,pushScopeId as w,popScopeId as A}from"vue";const D=[];for(let e=0;e<256;++e)D.push((e+256).toString(16).slice(1));let I;const _=new Uint8Array(16);var S={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};function C(e,a,t){if(S.randomUUID&&!a&&!e)return S.randomUUID();const s=(e=e||{}).random??e.rng?.()??function(){if(!I){if("undefined"==typeof crypto||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");I=crypto.getRandomValues.bind(crypto)}return I(_)}();if(s.length<16)throw new Error("Random bytes length must be >= 16");if(s[6]=15&s[6]|64,s[8]=63&s[8]|128,a){if((t=t||0)<0||t+16>a.length)throw new RangeError(`UUID byte range ${t}:${t+15} is out of buffer bounds`);for(let e=0;e<16;++e)a[t+e]=s[e];return a}return function(e,a=0){return(D[e[a+0]]+D[e[a+1]]+D[e[a+2]]+D[e[a+3]]+"-"+D[e[a+4]]+D[e[a+5]]+"-"+D[e[a+6]]+D[e[a+7]]+"-"+D[e[a+8]]+D[e[a+9]]+"-"+D[e[a+10]]+D[e[a+11]]+D[e[a+12]]+D[e[a+13]]+D[e[a+14]]+D[e[a+15]]).toLowerCase()}(s)}const $="id",L="related_parcel",E="lot_number",U="contract",N="navarch_assay_lot",R="commodity",M="difference",O="splitting_limit",x="seller_assay",T="buyer_assay",P="to_umpire",W="umpire_assay",F="umpire_name",k="losing_party",V="assay_uom",B="final_assay",j="dry_weight",q="dry_weight_uom",H="name",K="code",G="primary_commodity",J="contract",z="splitting_limit",Y="splitting_limit_unit",Q="weight_uom",X="methods",Z="umpire_when_equal",ee="final_assay_equation",ae="dry_symbol";var te=(e=>(e.AVG_WITH_MIDDLE_ASSAY_AS_FINAL_FOR_ARBITRATION="AVG_WITH_MIDDLE_ASSAY_AS_FINAL_FOR_ARBITRATION",e.AVG_WITH_AVG_OF_UMPIRE_AND_CLOSEST_AS_FINAL_FOR_ARBITRATION="AVG_WITH_AVG_OF_UMPIRE_AND_CLOSEST_AS_FINAL_FOR_ARBITRATION",e.AVG_OF_UMPIRE_AND_CLOSEST_IF_UMPIRE_IN_BETWEEN_OR_MIDDLE_AS_FINAL_IF_UMPIRE_OUTSIDE="AVG_OF_UMPIRE_AND_CLOSEST_IF_UMPIRE_IN_BETWEEN_OR_MIDDLE_AS_FINAL_IF_UMPIRE_OUTSIDE",e))(te||{}),se=(e=>(e.Seller="Seller",e.Buyer="Buyer",e.Split="Split",e))(se||{}),oe=(e=>(e[e.Estimated=0]="Estimated",e[e.Planned=10]="Planned",e[e.Inturn=20]="Inturn",e[e["Inturn Final"]=30]="Inturn Final",e[e.Outturn=40]="Outturn",e))(oe||{}),le=Object.defineProperty,ie=Object.getOwnPropertySymbols,ne=Object.prototype.hasOwnProperty,re=Object.prototype.propertyIsEnumerable,de=(e,a,t)=>a in e?le(e,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[a]=t;function ce(e,a){if(null==e)return"-";const t=be(e,4,!0);return null==a?`${t}`:`${t}${a}`}function ue(e,a){var t;return 0!==e.length&&e[0]&&null!=(t=e[0][a])?t:null}function me(e,a){const t=e.indexOf(a);t>-1&&e.splice(t,1)}function ye(e,a){e.includes(a)||e.push(a)}function pe(e,a=0){return null==e||isNaN(e)?a:Number(e)}function ve(e){return null==e}function he(e){return!ve(e)&&("number"==typeof e?!isNaN(e):!isNaN(Number(e)))}function fe(e){const a=oe[e];if(!a&&isNaN(a))throw new Error(`Invalid method type ${e}, please contact Navarch for support`);return a}function ge(e,a=2,t=!1){if(null==e||isNaN(e))return null;const s=t&&e<0;return s&&(e*=-1),Math.round(e*Math.pow(10,a))/Math.pow(10,a)*(s?-1:1)}function be(e,a=2,t=!0){if(isNaN(e)||null==e)return"-";const s=Math.round(e*Math.pow(10,a))/Math.pow(10,a),[o,l]=s.toString().split("."),i=o?o.replace(/\B(?=(\d{3})+(?!\d))/g,","):0;if(!l&&!t)return i;return`${i}.${(null!=l?l:"").padEnd(a,"0")}`}function we(e){return e.map((e=>((e,a)=>{for(var t in a||(a={}))ne.call(a,t)&&de(e,t,a[t]);if(ie)for(var t of ie(a))re.call(a,t)&&de(e,t,a[t]);return e})({},e)))}const Ae=t([{text:"Method",value:"method",sortable:!1,width:120,align:"left"},{text:"Commodity",value:"commodityName",sortable:!1,width:150,align:"left"},{text:"Seller Assay",value:"sellerAssay",sortable:!1,width:150,align:"left"},{text:"Buyer Assay",value:"buyerAssay",sortable:!1,width:150,align:"left"},{text:"Difference",value:"difference",sortable:!1,width:150,align:"left"},{text:"Splitting Limit",value:"splittingLimit",sortable:!1,width:150,align:"left"},{text:"To Umpire",value:"toUmpire",sortable:!1,width:60,align:"left"},{text:"Umpire Name",value:"umpireName",sortable:!1,width:150,align:"left"},{text:"Umpire Assay",value:"umpireAssay",sortable:!1,width:150,align:"left"},{text:"Losing Party",value:"losingParty",sortable:!1,width:150,align:"left"},{text:"Final Assay",value:"finalAssay",sortable:!1,width:150,align:"left"}]),De=t([{text:"Dry Weight",value:"compositeDryWeight",sortable:!1,width:170,align:"left"},{text:"Seller Assay",value:"compositeSellerAssay",sortable:!1,width:170,align:"left"},{text:"Buyer Assay",value:"compositeBuyerAssay",sortable:!1,width:170,align:"left"},{text:"Difference",value:"compositeDifference",sortable:!1,width:170,align:"left"},{text:"To Umpire",value:"compositeToUmpire",sortable:!1,width:40,align:"left"},{text:"Umpire Assay",value:"compositeUmpireAssay",sortable:!1,width:170,align:"left"},{text:"Losing Party",value:"compositeLosingParty",sortable:!1,width:120,align:"left"},{text:"Final Assay",value:"compositeFinalAssay",sortable:!1,width:170,align:"left"}]),Ie=t([{text:"",value:"status",sortable:!1,width:40,align:"left"},{text:"Lot",value:"lot_number",sortable:!1,width:40,align:"center"},{text:"Dry Weight",value:"dry_weight",sortable:!1,width:170,align:"left"},{text:"Seller Assay",value:"seller_assay",sortable:!1,width:170,align:"left"},{text:"Buyer Assay",value:"buyer_assay",sortable:!1,width:170,align:"left"},{text:"Difference",value:"difference",sortable:!1,width:170,align:"left"},{text:"To Umpire",value:"to_umpire",sortable:!1,width:40,align:"center"},{text:"Umpire Name",value:"umpire_name",sortable:!1,width:120,align:"left"},{text:"Umpire Assay",value:"umpire_assay",sortable:!1,width:170,align:"left"},{text:"Losing Party",value:"losing_party",sortable:!1,width:120,align:"left"},{text:"Final Assay",value:"final_assay",sortable:!1,width:170,align:"left"}]),_e="Selecting a contract for this parcel is required to create/edit assay lots",Se="Cannot edit assay lot data to a finalised parcel",Ce="Contract data could not be fetched",$e="The selected method has no weight lots associated with it, please provide weight lots for this method",Le="The dry weight value for the selected method is invalid",Ee="No methods available for the associated contract, please ensure there are methods selected in the contract",Ue="No commodities available for the associated contract, please ensure there are commodities selected in the contract",Ne="The selected commodity has missing data in the contract, please ensure splitting limit and the analytical assay UOM are set for the selected commodity in the contract",Re="Please select a method first before adding a new assay lot",Me="Please save the parcel before inputting assay lot data";function Oe(e){if(!e)throw new Error("Commodity in contract is empty");if(!e[z])throw new Error("Commodity in contract field 'Commodity' is empty for one of the commodities, please ensure all commodities data in the contract is set");if(!e[z]||!he(e[z]))throw new Error("Commodity in contract field 'Splitting Limit' is empty or has an invalid value, please ensure all commodities data in the contract is set");if(!e[Y])throw new Error("Commodity in contract field 'Assay UOM' is empty, please ensure all commodities data in the contract is set")}function xe(e,a){if(!e)throw new Error(`Commodity data is empty for commodity ${a}, please contact Navarch for assistance`);if(!e[H])throw new Error(`Commodity field 'Name'is empty for commodity ${a}, please contact Navarch for assistance`);if(!e[K])throw new Error(`Commodity field 'Code' is empty for commodity ${a}, please contact Navarch for assistance`)}function Te(e,a,t){if(ve(t)||isNaN(t)||ve(e)||isNaN(e)||ve(a)||isNaN(a))return null;const s=Math.abs(e-t),o=Math.abs(a-t);return s>o?se.Seller:o>s?se.Buyer:se.Split}function Pe(e,a,t,s,o,l){if(he(e)&&!he(a))return e;if(!he(e)&&he(a))return a;if(!he(e)&&!he(a))return null;if(he(e)&&he(a)){if(!s||!he(t))return console.debug("[evaluateFinalAssay] umpire arbitration is not required, final assay is the average of seller and buyer assays"),ge((e+a)/2,4);if(l===te.AVG_WITH_MIDDLE_ASSAY_AS_FINAL_FOR_ARBITRATION)return console.debug("[evaluateFinalAssay] umpire arbitration is required, final assay is the middle value of the three assays"),ge([t,e,a].sort(((e,a)=>e-a))[1],4);if(l===te.AVG_WITH_AVG_OF_UMPIRE_AND_CLOSEST_AS_FINAL_FOR_ARBITRATION||l===te.AVG_OF_UMPIRE_AND_CLOSEST_IF_UMPIRE_IN_BETWEEN_OR_MIDDLE_AS_FINAL_IF_UMPIRE_OUTSIDE){if(l===te.AVG_OF_UMPIRE_AND_CLOSEST_IF_UMPIRE_IN_BETWEEN_OR_MIDDLE_AS_FINAL_IF_UMPIRE_OUTSIDE&&(t<e&&t<a||t>e&&t>a))return console.debug("[evaluateFinalAssay] umpire arbitration is required, final assay is the middle value of the three assays"),ge([t,e,a].sort(((e,a)=>e-a))[1],4);if(ve(o)&&(o=Te(e,a,t)),o===se.Split)return console.debug("[evaluateFinalAssay] umpire arbitration is required, final assay is the middle value of the three assays"),ge([t,e,a].sort(((e,a)=>e-a))[1],4);if(o===se.Seller)return console.debug("[evaluateFinalAssay] umpire arbitration is required, final assay is the average of the umpire and buyer assays"),ge((t+a)/2,4);if(o===se.Buyer)return console.debug("[evaluateFinalAssay] umpire arbitration is required, final assay is the average of the umpire and seller assays"),ge((t+e)/2,4)}}return console.warn("[evaluateFinalAssay] final assay could not be evaluated, returning null"),null}function We(e){if(!e)throw new Error("No assay lot(s) provided when checking if it is composite");return 1===e.length&&!!e[0]&&null===e[0].lot_number}var Fe=s({props:{value:{type:String,default:null}},emits:["input"],setup(a,{emit:s}){const i=e(),n=o("values",t({}));let r=null;const d=t({create:[],update:[],delete:[]});l(d,(e=>{console.log(`[navarch-parcellots-assay-v2:watch:editedAssayLotIds] parcel id=${n.value.id}; new edited ids=\n${JSON.stringify(e)}`),null!==m.value.saveFunctionDisabledReason&&(d.value.create.length>0||d.value.update.length>0||d.value.delete.length>0)&&(console.log("[navarch-parcellots-assay-v2:watch:editedAssayLotIds] changes detected, enabling save functionality"),m.value.saveFunctionDisabledReason=null),null===m.value.saveFunctionDisabledReason&&0===d.value.create.length&&0===d.value.update.length&&0===d.value.delete.length&&(console.log("[navarch-parcellots-assay-v2:watch:editedAssayLotIds] all changes reverted, disabling save functionality if previously enabled"),m.value.saveFunctionDisabledReason="Make changes to the assay lots to enable saving")}),{deep:!0});const c=t([]);l(c,(e=>{console.log(`[navarch-parcellots-assay-v2:watch:methodSelection] parcel id=${n.value.id}; new method selection=\n${JSON.stringify(e)}`)}),{deep:!0});const u=t([]);l(u,(e=>{console.log(`[navarch-parcellots-assay-v2:watch:commoditySelection] parcel id=${n.value.id}; new method selection=\n${JSON.stringify(e)}`)}),{deep:!0});const m=t({isFatalErrorPopupOpen:!1,fatalErrorMessage:null,isConfirmSavePopupOpen:!1,isConfirmDeletePopupOpen:!1,isConfirmClosePopupOpen:!1,isAddingNewAssay:!1,isSyncingWithWeightLotDataByMethod:!1,isLoadingWhilePatching:!1,isCompositeAssayRecalculatedWithEditedLots:!0,contractData:null,editingDisabledReason:n.value.id?[]:[Me],saveFunctionDisabledReason:null,filtersAvailable:{methods:[],commodities:[]},filtersSelected:{methods:[],commodities:[]},isDrawerOpen:!1,editableAssayInDrawer:null});l(m,(e=>{console.log(`[navarch-parcellots-assay-v2:watch:interfaceState] parcel id=${n.value.id}; new state=\n${JSON.stringify(e)}`)}),{deep:!0,immediate:!0}),l((()=>{var e;return null==(e=m.value.contractData)?void 0:e.commodityCodeToNameMap}),(e=>{if(console.log(`[navarch-parcellots-assay-v2:watch:commodityCodeToNameMap] parcel id=${n.value.id}; new commodity code to name map=\n${JSON.stringify(e)}`),e&&Object.keys(y.value).length>0)for(const a of Object.values(y.value))a&&a.commodity&&e[a.commodity]?a.commodityName=e[a.commodity]:console.warn(`[navarch-parcellots-assay-v2:watch:commodityCodeToNameMap] parcel id=${n.value.id}; assay composite is null=${!a}; or has an invalid commodity code=${null==a?void 0:a.commodity}; or the commodity code to name map is undefined=${!!a&&!e[null==a?void 0:a.commodity]}`)}),{deep:!0}),l((()=>{var e;return null==(e=m.value.editableAssayInDrawer)?void 0:e.commonMethodDisplay}),(function(){var e,a;if(console.log(`[navarch-parcellots-assay-v2:onMethodSelected:parcelId=${n.value.id}] start`),!m.value.isAddingNewAssay)return;if(!(null==(e=m.value.editableAssayInDrawer)?void 0:e.commonMethodDisplay))return;if(!m.value.contractData)return void ye(m.value.editingDisabledReason,Ce);if(!m.value.contractData.commodities)return void ye(m.value.editingDisabledReason,Ue);if(!m.value.contractData.methods)return void ye(m.value.editingDisabledReason,Ee);if(!m.value.editableAssayInDrawer)return void console.error(`[navarch-parcellots-assay-v2:onMethodSelected:parcelId=${n.value.id}] editableAssayInDrawer is not set, this log must never see the light of day! If you're reading this, something is horribly wrong!`);me(m.value.editingDisabledReason,Ue),me(m.value.editingDisabledReason,Ee),me(m.value.editingDisabledReason,$e),me(m.value.editingDisabledReason,Le);const t=Object.values(y.value).filter((e=>!!e&&e.method===m.value.editableAssayInDrawer.commonMethodDisplay)).map((e=>null==e?void 0:e.commodity));u.value=m.value.contractData.commodities.filter((e=>!t.includes(e.code))).map((e=>({value:e.code,text:`${e.name} (${e.code})`}))),0===u.value.length&&(u.value=[{text:"-- All possible commodities have assay(s) for this method, select another method --",value:void 0}]);const s=v.value.filter((e=>!e.lot_number)).find((e=>e.method===m.value.editableAssayInDrawer.commonMethodDisplay));if(!s)return void ye(m.value.editingDisabledReason,$e);(ve(s.dry_weight)||isNaN(Number(s.dry_weight)))&&ye(m.value.editingDisabledReason,Le);if(m.value.editableAssayInDrawer.compositeWeightId=s.id,0===m.value.editableAssayInDrawer.editableLots.length){const e=C();m.value.editableAssayInDrawer.compositeAssayId=e,m.value.editableAssayInDrawer.editableLots=[{id:e,method:null,lot_number:null,weight_lot_id:null,dry_weight:null,dry_weight_uom:m.value.contractData.dryWeightUom,assay_uom:m.value.editableAssayInDrawer.commonAssayUom,buyer_assay:null,seller_assay:null,umpire_assay:null,final_assay:null,difference:null,to_umpire:!1,umpire_name:null,losing_party:null,splitting_limit:(null!=(a=m.value.editableAssayInDrawer.commonSplittingLimit)?a:0).toString(),commodity:m.value.editableAssayInDrawer.commonCommodity}],d.value.create.push(e),m.value.isCompositeAssayRecalculatedWithEditedLots=!1}if(1!==m.value.editableAssayInDrawer.editableLots.length)throw console.error(`[navarch-parcellots-assay-v2:onMethodSelected:parcelId=${n.value.id}] there should only be one editable assay lot when adding a new assay, but there are ${m.value.editableAssayInDrawer.editableLots.length} found. If you're seeing this, something is wrong!`),new Error(`There should only be one editable assay lot when adding a new assay, but there are ${m.value.editableAssayInDrawer.editableLots.length} found`);m.value.editableAssayInDrawer.editableLots[0].method=s.method;const o=Number(s.dry_weight);m.value.editableAssayInDrawer.compositeDryWeight=o,m.value.editableAssayInDrawer.editableLots[0].dry_weight=s.dry_weight,m.value.editableAssayInDrawer.editableLots[0].weight_lot_id=s.id,!m.value.editableAssayInDrawer.commonMethodDisplay||!m.value.editableAssayInDrawer.commonCommodity||(m.value.saveFunctionDisabledReason=null);console.log(`[navarch-parcellots-assay-v2:onMethodSelected:parcelId=${n.value.id}] completed for parcel id=${n.value.id}`)})),l((()=>{var e;return null==(e=m.value.editableAssayInDrawer)?void 0:e.commonCommodity}),(function(){var e,a;if(console.log(`[navarch-parcellots-assay-v2:onCommoditySelected:parcelId=${n.value.id}] start`),!m.value.isAddingNewAssay)return;if(!(null==(e=m.value.editableAssayInDrawer)?void 0:e.commonCommodity))return;if(!m.value.contractData)return void ye(m.value.editingDisabledReason,Ce);if(!m.value.contractData.commodities)return void ye(m.value.editingDisabledReason,Ue);if(!m.value.contractData.methods)return void ye(m.value.editingDisabledReason,Ee);if(!m.value.editableAssayInDrawer)return void console.error(`[navarch-parcellots-assay-v2:onCommoditySelected:parcelId=${n.value.id}] editableAssayInDrawer is not set, this log must never see the light of day! If you're reading this, something is horribly wrong!`);me(m.value.editingDisabledReason,Ue),me(m.value.editingDisabledReason,Ee),me(m.value.editingDisabledReason,Ne);const t=Object.values(y.value).filter((e=>!!e&&e.commodity===m.value.editableAssayInDrawer.commonCommodity)).map((e=>null==e?void 0:e.method));c.value=m.value.contractData.methods.filter((e=>!t.includes(e))).map((e=>({value:e,text:e}))),0===c.value.length&&(c.value=[{text:"-- All possible methods have assay(s) for this commodity, select another commodity --",value:void 0}]);const s=m.value.contractData.commodities.find((e=>e.code===m.value.editableAssayInDrawer.commonCommodity));if(!s||!s.splittingLimit||!s.splittingLimitUOM)return void ye(m.value.editingDisabledReason,Ne);1===m.value.editableAssayInDrawer.editableLots.length&&(console.log(`[navarch-parcellots-assay-v2:onCommoditySelected:parcelId=${n.value.id}] assay lot is present, updating the splitting limit and assay UOM with the data from the selected commodity`),m.value.editableAssayInDrawer.editableLots[0].splitting_limit=(null!=(a=s.splittingLimit)?a:0).toString(),m.value.editableAssayInDrawer.editableLots[0].assay_uom=s.splittingLimitUOM,m.value.editableAssayInDrawer.editableLots[0].commodity=m.value.editableAssayInDrawer.commonCommodity);m.value.editableAssayInDrawer.commonSplittingLimit=s.splittingLimit,m.value.editableAssayInDrawer.commonAssayUom=s.splittingLimitUOM,!m.value.editableAssayInDrawer.commonMethodDisplay||!m.value.editableAssayInDrawer.commonCommodity||(m.value.saveFunctionDisabledReason=null);console.log(`[navarch-parcellots-assay-v2:onCommoditySelected:parcelId=${n.value.id}] completed for parcel id=${n.value.id}`)}));const y=t({}),p=t([]),v=t([]);return t({}),l(y,(e=>{console.log(`[navarch-parcellots-assay-v2:watch:assayCompositesById] parcel id=${n.value.id}; new assay lots=\n${JSON.stringify(e)}`),p.value=Object.values(e).filter((e=>!!e)).sort(((e,a)=>{if(e.method&&a.method){const t=fe(e.method)-fe(a.method);if(0!==t)return t;if(e.commodityName&&a.commodityName)return e.commodityName.localeCompare(a.commodityName)}return 0})),console.debug(`[navarch-parcellots-assay-v2:watch:assayCompositesById] filtered assay lots to display=\n${JSON.stringify(p.value)}`)}),{deep:!0,immediate:!0}),l((()=>n.value[U]),(async e=>{if(console.log(`[navarch-parcellots-assay-v2:watch:contract field:parcelId=${n.value.id}] new contract id=${e}`),!e)return m.value.contractData=null,void ye(m.value.editingDisabledReason,_e);w()}),{immediate:!0}),l((()=>n.value[$]),(e=>{console.log(`[navarch-parcellots-assay-v2:watch:id field:parcelId=${e}] new parcel id=${e}`),function(e){if(console.log(`[navarch-parcellots-assay-v2:fetchAndProcessAssayLotsIfExistsForThisParcel:parcelId=${n.value.id}] start with param parcelID=${e}`),!e)return ye(m.value.editingDisabledReason,Me),void console.log(`[navarch-parcellots-assay-v2:fetchAndProcessAssayLotsIfExistsForThisParcel:parcelId=${n.value.id}] parcelID is not defined, stopping fetch`);me(m.value.editingDisabledReason,Me),i.get(`/items/${N}`,{params:{filter:{[L]:{_eq:e}},sort:[E]}}).then((e=>{var a,t,s,o,l,i,r,d,c,u,p,v,h,f,g,b;const w=e.data.data,A=w.filter((e=>null===e[E]));console.debug(`[navarch-parcellots-assay-v2:fetchAndProcessAssayLotsIfExistsForThisParcel:parcelId=${n.value.id}] fetched assay lots=\n${JSON.stringify(A)}`);const D={};for(const e of A){let y=w.filter((a=>a.method===e.method));if(y.length>1)y=y.filter((e=>null!==e[E]));else{if(1===y.length&&!ve(y[0][E]))throw console.error(`[navarch-parcellots-assay-v2:fetchAndProcessAssayLotsIfExistsForThisParcel:parcelId=${n.value.id}] the only assay lot for method ${e.method} in this parcel has no proper composite assay`),new Error(`The only assay lot for method ${e.method} in this parcel has no proper composite assay`);if(0===y.length)throw console.log(`[navarch-parcellots-assay-v2:fetchAndProcessAssayLotsIfExistsForThisParcel:parcelId=${n.value.id}] no assay lots found for method ${e.method} for this parcel`),new Error(`No assay lots found for method ${e.method} for this parcel`)}D[e.id]={id:e.id,weightLotId:e.weight_lot_id,method:e.method,commodity:e[R],commodityName:(null==(a=m.value.contractData)?void 0:a.commodityCodeToNameMap)?null==(t=m.value.contractData)?void 0:t.commodityCodeToNameMap[e[R]]:e[R],dryWeight:Number(null!=(s=e[j])?s:"0"),dryWeightUom:e[q],assayUom:e[V],sellerAssay:null!=(l=Number(null!=(o=e[x])?o:"0"))?l:null,buyerAssay:null!=(r=Number(null!=(i=e[T])?i:"0"))?r:null,difference:null!=(c=Number(null!=(d=e[M])?d:"0"))?c:null,splittingLimit:Number(null!=(u=e[O])?u:"0"),toUmpire:e[P],umpireName:null!=(p=e[F])?p:null,umpireAssay:null!=(h=Number(null!=(v=e[W])?v:"0"))?h:null,losingParty:null!=(f=e[k])?f:null,finalAssay:null!=(b=Number(null!=(g=e[B])?g:"0"))?b:null,lots:y}}y.value=D,console.log(`[navarch-parcellots-assay-v2:fetchAndProcessAssayLotsIfExistsForThisParcel:parcelId=${n.value.id}] assay lots successfully fetched and processed`)})).catch((e=>{console.error(`[navarch-parcellots-assay-v2:fetchAndProcessAssayLotsIfExistsForThisParcel:parcelId=${n.value.id}] fetch assay lots API call failed with reason: ${e}`)}))}(e),e&&me(m.value.editingDisabledReason,Me)}),{immediate:!0}),l((()=>n.value.parcel_finalised),(async e=>{n.value[$]&&(console.log(`[navarch-parcellots-assay-v2:watch:parcel finalised field:parcelId=${n.value.id}] change in parcel finalised field in the parcel form detected with a new value=${e}`),e?ye(m.value.editingDisabledReason,Se):me(m.value.editingDisabledReason,Se))}),{immediate:!0}),{assayCompositesById:y,assayCompositeListToDisplay:p,interfaceState:m,methodSelection:c,commoditySelection:u,AssayTableHeaders:Ae,AssayCompositeTableInDrawerHeaders:De,AssayLotTableHeaders:Ie,onMainPageClickAddAssay:async function(){if(console.log(`[navarch-parcellots-assay-v2:onMainPageClickAddAssay:parcelId=${n.value.id}] started`),await h(n.value.id),await w(),!m.value.contractData)return void console.warn(`[navarch-parcellots-assay-v2:onMainPageClickAddAssay:parcelId=${n.value.id}] contract data is not defined, cannot add new assay`);(function(){if(console.log(`[navarch-parcellots-assay-v2:setInitialMethodSelection:parcelId=${n.value.id}] start`),!m.value.contractData)return c.value=[],void console.log(`[navarch-parcellots-assay-v2:setInitialMethodSelection:parcelId=${n.value.id}] completed with no contract data found`);c.value=m.value.contractData.methods.map((e=>({value:e,text:e}))).filter((e=>!!e)),console.log(`[navarch-parcellots-assay-v2:setInitialMethodSelection:parcelId=${n.value.id}] completed for parcel id=${n.value.id}`)})(),g(),m.value.isDrawerOpen=!0,m.value.isAddingNewAssay=!0,m.value.saveFunctionDisabledReason="Please select a method and commodity first",m.value.editableAssayInDrawer={isCompositeAssay:!0,compositeAssayId:void 0,compositeWeightId:void 0,commonMethodDisplay:null,commonCommodity:null,commonDryWeightUom:m.value.contractData.dryWeightUom,commonAssayUom:null,commonSplittingLimit:null,compositeBuyerAssay:null,compositeSellerAssay:null,compositeUmpireAssay:null,compositeFinalAssay:null,compositeDifference:null,compositeToUmpire:!1,compositeUmpireName:null,compositeLosingParty:null,compositeDryWeight:null,editableLots:[]},console.log(`[navarch-parcellots-assay-v2:onMainPageClickAddAssay:parcelId=${n.value.id}] completed`)},onMainAssayLotTableRowClick:function(e){var a,t,s,o,l,i,r,d,c,u,y,p;console.log(`[navarch-parcellots-assay-v2:onMainAssayLotTableRowClick:parcelId=${n.value.id}] started with item=${JSON.stringify(e.item)}`);const v=e.item;g(),m.value.isDrawerOpen=!0,m.value.saveFunctionDisabledReason="Make changes to the assay lots first before saving",m.value.editableAssayInDrawer={isCompositeAssay:We(v.lots),compositeAssayId:v.id,compositeWeightId:v.weightLotId,commonMethodDisplay:v.method,compositeDryWeight:null!=(a=v.dryWeight)?a:null,commonDryWeightUom:null!=(t=v.dryWeightUom)?t:"-",commonAssayUom:null!=(s=v.assayUom)?s:"-",compositeBuyerAssay:null!=(o=v.buyerAssay)?o:null,compositeSellerAssay:null!=(l=v.sellerAssay)?l:null,compositeFinalAssay:null!=(i=v.finalAssay)?i:null,compositeDifference:null!=(r=v.difference)?r:null,commonSplittingLimit:null!=(d=v.splittingLimit)?d:null,compositeToUmpire:!!v.toUmpire,compositeUmpireName:null!=(c=v.umpireName)?c:"-",compositeUmpireAssay:null!=(u=v.umpireAssay)?u:null,compositeLosingParty:null!=(y=v.losingParty)?y:null,commonCommodity:null!=(p=v.commodity)?p:"-",editableLots:we(v.lots)}},onConfirmDrawerSave:async function(){console.log(`[navarch-parcellots-assay-v2:onConfirmDrawerSave:parcelId=${n.value.id}] started`),m.value.isConfirmSavePopupOpen=!1,m.value.isLoadingWhilePatching=!0,await async function(){var e,a,t,s,o,l,r,c,u,p,v;console.log(`[navarch-parcellots-assay-v2:saveAssayLotChanges:parcelId=${n.value.id}] started`),console.log(`[navarch-parcellots-assay-v2:stageAllChanges:parcelId=${n.value.id}] started`),d.value.create=d.value.create.filter((e=>!d.value.delete.includes(e))),d.value.create=[...new Set(d.value.create)],d.value.update=d.value.update.filter((e=>!d.value.delete.includes(e))),d.value.update=d.value.update.filter((e=>!d.value.create.includes(e))),d.value.update=[...new Set(d.value.update)],console.log(`[navarch-parcellots-assay-v2:stageAllChanges:parcelId=${n.value.id}] completed`);if(!(d.value.create.length>0||d.value.update.length>0||d.value.delete.length>0))return void console.log(`[navarch-parcellots-assay-v2:saveAssayLotChanges:parcelId=${n.value.id}] completed, no changes to save`);try{if(await async function(){if(console.log(`[navarch-parcellots-assay-v2:updateExistingAssayLots:parcelId=${n.value.id}] start`),d.value.update.length<=0)return void console.log(`[navarch-parcellots-assay-v2:updateExistingAssayLots:parcelId=${n.value.id}] completed, no assay lots to update`);const e=d.value.update.map((e=>null===m.value.editableAssayInDrawer?(console.warn(`[navarch-parcellots-assay-v2:updateExistingAssayLots:parcelId=${n.value.id}] editableAssayInDrawer is not set, this log must never see the light of day! If you're reading this, something is horribly wrong!`),null):m.value.editableAssayInDrawer.editableLots.find((a=>a.id===e&&null!==a.lot_number)))).filter((e=>!!e));if(e.length<=0)return void console.log(`[navarch-parcellots-assay-v2:updateExistingAssayLots:parcelId=${n.value.id}] completed, no assay lots to update after filtering out composite assays`);const a=await i.patch(`/items/${N}`,e);if(200!==a.status)throw new Error(`Failed to update assay lots: ${a.statusText}`);console.log(`[navarch-parcellots-assay-v2:updateExistingAssayLots:parcelId=${n.value.id}] completed`)}(),await async function(){if(console.log(`[navarch-parcellots-assay-v2:createNewAssayLots:parcelId=${n.value.id}] start`),d.value.create.length<=0)return void console.log(`[navarch-parcellots-assay-v2:createNewAssayLots:parcelId=${n.value.id}] completed, no assay lots to create`);const e=d.value.create.map((e=>{if(null===m.value.editableAssayInDrawer)return console.warn(`[navarch-parcellots-assay-v2:createNewAssayLots:parcelId=${n.value.id}] editableAssayInDrawer is not set, this log must never see the light of day! If you're reading this, something is horribly wrong!`),null;const a=m.value.editableAssayInDrawer.editableLots.find((a=>a.id===e&&null!==a.lot_number));return a&&(a.related_parcel=n.value.id),a})).filter((e=>!!e));if(e.length<=0)return void console.log(`[navarch-parcellots-assay-v2:createNewAssayLots:parcelId=${n.value.id}] completed, no assay lots to create after filtering out composite assays`);const a=await i.post(`/items/${N}`,e);if(200!==a.status)throw new Error(`Failed to create assay lots: ${a.statusText}`);console.log(`[navarch-parcellots-assay-v2:createNewAssayLots:parcelId=${n.value.id}] completed`)}(),await async function(){var e;if(console.log(`[navarch-parcellots-assay-v2:deleteExistingAssayLots:parcelId=${n.value.id}] start`),d.value.delete.length<=0)return void console.log(`[navarch-parcellots-assay-v2:deleteExistingAssayLots:parcelId=${n.value.id}] completed, no assay lots to delete`);const a=await i.delete(`/items/${N}`,{data:d.value.delete});if(204!==a.status)throw new Error(`Failed to delete assay lots: ${a.statusText}`);(null==(e=m.value.editableAssayInDrawer)?void 0:e.editableLots)&&(m.value.editableAssayInDrawer.editableLots=m.value.editableAssayInDrawer.editableLots.filter((e=>!d.value.delete.includes(e.id))));console.log(`[navarch-parcellots-assay-v2:deleteExistingAssayLots:parcelId=${n.value.id}] completed`)}(),m.value.isCompositeAssayRecalculatedWithEditedLots||A(),await async function(){var e;if(console.log(`[navarch-parcellots-assay-v2:saveCompositeAssay:parcelId=${n.value.id}] start`),!m.value.editableAssayInDrawer)throw console.error(`[navarch-parcellots-assay-v2:saveCompositeAssay:parcelId=${n.value.id}] editableAssayInDrawer is not set, this log must never see the light of day! If you're reading this, something is horribly wrong!`),new Error("Editable assay in drawer is not set, cannot save composite assay");if(!m.value.editableAssayInDrawer.commonCommodity)throw console.error(`[navarch-parcellots-assay-v2:saveCompositeAssay:parcelId=${n.value.id}] commonCommodity is not set, the Save button should have been disabled through the 'saveFunctionDisabledReason' property in interfaceState until this is set, but if you're seeing this, something is wrong!`),new Error("Common commodity is not set, cannot save composite assay");if(!m.value.editableAssayInDrawer.commonMethodDisplay)throw console.error(`[navarch-parcellots-assay-v2:saveCompositeAssay:parcelId=${n.value.id}] commonMethodDisplay is not set, the Save button should have been disabled through the 'saveFunctionDisabledReason' property in interfaceState until this is set, but if you're seeing this, something is wrong!`),new Error("Common method display is not set, cannot save composite assay");if(!m.value.editableAssayInDrawer.compositeAssayId)throw console.error(`[navarch-parcellots-assay-v2:saveCompositeAssay:parcelId=${n.value.id}] compositeAssayId is not set, this should have been created if the user is adding a new assay, or provided if user is updating an existing assay`),new Error("Composite assay id is not set, cannot save composite assay");const a=m.value.editableAssayInDrawer.editableLots.map((e=>e.umpire_name)).filter((e=>!!e)).reduce(((e,a)=>(e.includes(a)||e.push(a),e)),[]).join(","),t={id:m.value.editableAssayInDrawer.compositeAssayId,lot_number:null,weight_lot_id:m.value.editableAssayInDrawer.compositeWeightId,commodity:m.value.editableAssayInDrawer.commonCommodity,method:m.value.editableAssayInDrawer.commonMethodDisplay,splitting_limit:m.value.editableAssayInDrawer.commonSplittingLimit,assay_uom:m.value.editableAssayInDrawer.commonAssayUom,dry_weight_uom:null==(e=m.value.contractData)?void 0:e.dryWeightUom,dry_weight:m.value.editableAssayInDrawer.compositeDryWeight,to_umpire:m.value.editableAssayInDrawer.compositeToUmpire,umpire_name:a,umpire_assay:m.value.editableAssayInDrawer.compositeUmpireAssay,difference:m.value.editableAssayInDrawer.compositeDifference,seller_assay:m.value.editableAssayInDrawer.compositeSellerAssay,buyer_assay:m.value.editableAssayInDrawer.compositeBuyerAssay,losing_party:m.value.editableAssayInDrawer.compositeLosingParty,final_assay:m.value.editableAssayInDrawer.compositeFinalAssay,related_parcel:n.value.id};let s;s=m.value.isAddingNewAssay?await i.post(`/items/${N}`,t):await i.patch(`/items/${N}/${t.id}`,t);if(200!==s.status)throw console.error(`[navarch-parcellots-assay-v2:saveCompositeAssay:parcelId=${n.value.id}] failed with status: ${s.status}, response: ${s.data}`),new Error(`Failed to save composite assay: ${s.statusText}`);m.value.editableAssayInDrawer.compositeUmpireName!==a&&(m.value.editableAssayInDrawer.compositeUmpireName=a);console.log(`[navarch-parcellots-assay-v2:saveCompositeAssay:parcelId=${n.value.id}] completed`)}(),!(null==(e=m.value.editableAssayInDrawer)?void 0:e.compositeAssayId))throw new Error("Composite assay id is not set, composite assay cannot be updated in the Parcel form page");const h=null!=(a=m.value.editableAssayInDrawer.commonCommodity)?a:"-";y.value[m.value.editableAssayInDrawer.compositeAssayId]={id:m.value.editableAssayInDrawer.compositeAssayId,weightLotId:m.value.editableAssayInDrawer.compositeWeightId,commodity:h,commodityName:null!=(s=null==(t=m.value.contractData)?void 0:t.commodityCodeToNameMap[h])?s:h,method:m.value.editableAssayInDrawer.commonMethodDisplay,splittingLimit:null!=(o=m.value.editableAssayInDrawer.commonSplittingLimit)?o:0,assayUom:null!=(l=m.value.editableAssayInDrawer.commonAssayUom)?l:"-",dryWeightUom:null!=(c=null==(r=m.value.contractData)?void 0:r.dryWeightUom)?c:"-",dryWeight:null!=(u=m.value.editableAssayInDrawer.compositeDryWeight)?u:0,toUmpire:null!=(p=m.value.editableAssayInDrawer.compositeToUmpire)&&p,umpireName:m.value.editableAssayInDrawer.compositeUmpireName,umpireAssay:m.value.editableAssayInDrawer.compositeUmpireAssay,difference:m.value.editableAssayInDrawer.compositeDifference,sellerAssay:m.value.editableAssayInDrawer.compositeSellerAssay,buyerAssay:m.value.editableAssayInDrawer.compositeBuyerAssay,losingParty:m.value.editableAssayInDrawer.compositeLosingParty,finalAssay:null!=(v=m.value.editableAssayInDrawer.compositeFinalAssay)?v:0,lots:m.value.editableAssayInDrawer.editableLots}}catch(e){console.error(`[navarch-parcellots-assay-v2:saveAssayLotChanges:parcelId=${n.value.id}] failed with reason: ${e}`)}console.log(`[navarch-parcellots-assay-v2:saveAssayLotChanges:parcelId=${n.value.id}] completed`)}(),m.value.isLoadingWhilePatching=!1,b(),console.log(`[navarch-parcellots-assay-v2:onConfirmDrawerSave:parcelId=${n.value.id}] completed`)},onConfirmDrawerDeleteAssay:async function(){console.log(`[navarch-parcellots-assay-v2:onConfirmDrawerDeleteAssay:parcelId=${n.value.id}] started`),m.value.isConfirmDeletePopupOpen=!1,m.value.isLoadingWhilePatching=!0,await async function(){if(!m.value.editableAssayInDrawer)return void console.warn(`[navarch-parcellots-assay-v2:deleteAllAssaysByCommonMethodAndCommodity:parcelId=${n.value.id}] editableAssayInDrawer is not set, this log must never see the light of day! If you're reading this, something is horribly wrong!`);if(ve(m.value.editableAssayInDrawer.commonMethodDisplay))return void console.warn(`[navarch-parcellots-assay-v2:deleteAllAssaysByCommonMethodAndCommodity:parcelId=${n.value.id}] completed`);if(ve(m.value.editableAssayInDrawer.commonCommodity))return void console.warn(`[navarch-parcellots-assay-v2:deleteAllAssaysByCommonMethodAndCommodity:parcelId=${n.value.id}] completed`);const e=m.value.editableAssayInDrawer.editableLots.map((e=>e.id));e.push(m.value.editableAssayInDrawer.compositeAssayId);const a=await i.delete(`/items/${N}`,{data:e});if(204!==a.status)throw new Error(`Failed to delete assay lots: ${a.statusText}`);y.value[m.value.editableAssayInDrawer.compositeAssayId]=null,console.log(`[navarch-parcellots-assay-v2:deleteAllAssaysByCommonMethodAndCommodity:parcelId=${n.value.id}] completed`)}(),m.value.isLoadingWhilePatching=!1,b(),console.log(`[navarch-parcellots-assay-v2:onConfirmDrawerDeleteAssay:parcelId=${n.value.id}] completed`)},onConfirmDrawerClose:function(){console.log(`[navarch-parcellots-assay-v2:onConfirmDrawerClose:parcelId=${n.value.id}] started`),m.value.isConfirmClosePopupOpen=!1,b(),console.log(`[navarch-parcellots-assay-v2:onConfirmDrawerClose:parcelId=${n.value.id}] completed`)},onDrawerClose:function(){console.log(`[navarch-parcellots-assay-v2:onDrawerClose:parcelId=${n.value.id}] started`);d.value.create.length>0||d.value.update.length>0||d.value.delete.length>0?m.value.isConfirmClosePopupOpen=!0:b();console.log(`[navarch-parcellots-assay-v2:onDrawerClose:parcelId=${n.value.id}] completed`)},onDrawerSave:function(){console.log(`[navarch-parcellots-assay-v2:onDrawerSave:parcelId=${n.value.id}] started`),m.value.isConfirmSavePopupOpen=!0,console.log(`[navarch-parcellots-assay-v2:onDrawerSave:parcelId=${n.value.id}] completed`)},onDrawerDeleteAssay:function(){console.log(`[navarch-parcellots-assay-v2:onDrawerDeleteAssay:parcelId=${n.value.id}] started`),m.value.isConfirmDeletePopupOpen=!0,console.log(`[navarch-parcellots-assay-v2:onDrawerDeleteAssay:parcelId=${n.value.id}] completed`)},stageBatchUpdateForSplittingLimit:function(){},onRecalculateCompositeAssay:A,onDrawerClickSyncWithWeightLots:async function(){var e,a,t;if(console.log(`[navarch-parcellots-assay-v2:onDrawerClickSyncWithWeightLots:parcelId=${n.value.id}] started`),!m.value.editableAssayInDrawer)throw console.error(`[navarch-parcellots-assay-v2:onDrawerClickSyncWithWeightLots:parcelId=${n.value.id}] editableAssayInDrawer is not set, this log must never see the light of day! If you're reading this, something is horribly wrong!`),new Error("Editable assay in drawer is not set while drawer is open");if(!m.value.editableAssayInDrawer.commonMethodDisplay)return ye(m.value.editingDisabledReason,Re),void console.log(`[navarch-parcellots-assay-v2:onDrawerClickSyncWithWeightLots:parcelId=${n.value.id}] completed; commonMethodDisplay is null, cannot add new assay lot`);if(me(m.value.editingDisabledReason,Re),m.value.isSyncingWithWeightLotDataByMethod=!0,await h(n.value.id),1===m.value.editableAssayInDrawer.editableLots.length&&ve(null==(e=m.value.editableAssayInDrawer.editableLots[0])?void 0:e.lot_number)){const e=v.value.find((e=>e.method===m.value.editableAssayInDrawer.commonMethodDisplay&&!e.lot_number));m.value.editableAssayInDrawer.editableLots[0].dry_weight=e.dry_weight,m.value.editableAssayInDrawer.editableLots[0].dry_weight_uom=null!=(a=e.dry_weight_uom)?a:"",d.value.update.push(m.value.editableAssayInDrawer.editableLots[0].id)}else{const e=v.value.filter((e=>e.method===m.value.editableAssayInDrawer.commonMethodDisplay&&!!e.lot_number)),a=[];for(const s of e){const e=m.value.editableAssayInDrawer.editableLots.find((e=>e.weight_lot_id===s.id));if(e){e.dry_weight=s.dry_weight,e.dry_weight_uom=null!=(t=s.dry_weight_uom)?t:"",e.lot_number=s.lot_number,d.value.update.push(e.id),a.push(e);continue}const o=C(),l={id:o,method:m.value.editableAssayInDrawer.commonMethodDisplay,lot_number:s.lot_number,weight_lot_id:s.id,dry_weight:s.dry_weight,dry_weight_uom:m.value.editableAssayInDrawer.commonDryWeightUom,assay_uom:m.value.editableAssayInDrawer.commonAssayUom,buyer_assay:null,seller_assay:null,umpire_assay:null,final_assay:null,difference:null,to_umpire:!1,umpire_name:null,losing_party:null,splitting_limit:m.value.editableAssayInDrawer.commonSplittingLimit,commodity:m.value.editableAssayInDrawer.commonCommodity};a.push(l),d.value.create.push(o)}for(const e of m.value.editableAssayInDrawer.editableLots)a.find((a=>a.id===e.id))||(e.lot_number=null,a.push(e),d.value.delete.push(e.id));m.value.editableAssayInDrawer.editableLots=a}m.value.isSyncingWithWeightLotDataByMethod=!1,m.value.isCompositeAssayRecalculatedWithEditedLots=!1,console.log(`[navarch-parcellots-assay-v2:onDrawerClickSyncWithWeightLots:parcelId=${n.value.id}] completed`)},onConvertCompositeAssayToAssayLots:async function(){var e;if(console.log(`[navarch-parcellots-assay-v2:onConvertCompositeAssayToAssayLots:parcelId=${n.value.id}] started`),!m.value.editableAssayInDrawer)throw console.error(`[navarch-parcellots-assay-v2:onConvertCompositeAssayToAssayLots:parcelId=${n.value.id}] editableAssayInDrawer is not set, this log must never see the light of day! If you're reading this, something is horribly wrong!`),new Error("Editable assay in drawer is not set, cannot convert composite assay to assay lots");if(ve(null==(e=m.value.editableAssayInDrawer)?void 0:e.commonMethodDisplay))throw console.error(`[navarch-parcellots-assay-v2:onConvertCompositeAssayToAssayLots:parcelId=${n.value.id}] common method display is not set, the Convert to Assay Lots button should have been disabled, fix required`),new Error("Common method display is not set, cannot convert composite assay to assay lots");await h(n.value.id);const a=v.value.filter((e=>e.method===m.value.editableAssayInDrawer.commonMethodDisplay&&!!e.lot_number)),t=a.map((()=>C())),s=a.map(((e,a)=>{var s,o,l,i;return{id:t[a],lot_number:e.lot_number,weight_lot_id:e.id,dry_weight:e.dry_weight,dry_weight_uom:e.dry_weight_uom,assay_uom:null==(s=m.value.editableAssayInDrawer)?void 0:s.commonAssayUom,splitting_limit:null==(o=m.value.editableAssayInDrawer)?void 0:o.commonSplittingLimit,commodity:null==(l=m.value.editableAssayInDrawer)?void 0:l.commonCommodity,method:null==(i=m.value.editableAssayInDrawer)?void 0:i.commonMethodDisplay,to_umpire:!1,umpire_name:null,umpire_assay:null,buyer_assay:null,seller_assay:null,final_assay:null,difference:null,losing_party:null}}));d.value.create.push(...t),m.value.isCompositeAssayRecalculatedWithEditedLots=!1,m.value.editableAssayInDrawer.editableLots=s,m.value.editableAssayInDrawer.isCompositeAssay=!1,console.log(`[navarch-parcellots-assay-v2:onConvertCompositeAssayToAssayLots:parcelId=${n.value.id}] completed`)},onKeyDownInAssayLotEditorCell:function(e,a,t){if("Enter"===t.code||"NumpadEnter"===t.code)return function(e){var a,t,s,o,l;const i=null==(a=e.target||e.srcElement)?void 0:a.id;if(!i)return void console.error("currentElementId is not defined");if(!/assaylots-(\d)+-(\d)+/.test(i))return void console.error(`current element id=${i} is not in the correct format`);const[n,r,d]=i.split("-");let c=parseInt(d),u=parseInt(r),y="";do{if(Array.isArray(null==(t=m.value.editableAssayInDrawer)?void 0:t.editableLots)&&c<(null==(s=m.value.editableAssayInDrawer)?void 0:s.editableLots.length))c++,y=`${n}-${u}-${c}`;else{if(7===u)return;u++,c=1,y=`${n}-${u}-${c}`}}while(document.getElementById(y)&&null!==(null==(o=document.getElementById(y))?void 0:o.getAttribute("disabled")));null==(l=document.getElementById(y))||l.focus()}(t),void console.log(`[navarch-parcellots-assay-v2:onKeyDownInAssayLotEditorCell:parcelId=${n.value.id}] focusing on the next field`);r&&clearTimeout(r);r=setTimeout((()=>{!function(e,a){var t;if(console.log(`[navarch-parcellots-assay-v2:onReevaluateAssayLotEditorCells:parcelId=${n.value.id}] started with edited field=${a}`),!m.value.contractData)return void console.error("[navarch-parcellots-assay-v2:onReevaluateAssayLotEditorCells:parcelId=${formValues.value.id}] contract data is not defined, ending function");if(!m.value.editableAssayInDrawer)throw console.error(`[navarch-parcellots-assay-v2:onReevaluateAssayLotEditorCells:parcelId=${n.value.id}] editableAssayInDrawer is not set, ending function`),new Error("Editable assay in drawer is not set, cannot recalculate composite assay");let s=-1;if(!e.id)return void console.error(`[navarch-parcellots-assay-v2:onReevaluateAssayLotEditorCells:parcelId=${n.value.id}] ending auto evaluate because no assay lot id found for item ${JSON.stringify(e)}`);s=null!=(t=m.value.editableAssayInDrawer.editableLots.findIndex((a=>a.id===e.id)))?t:-1;if(s<0)return void console.error(`[navarch-parcellots-assay-v2:onReevaluateAssayLotEditorCells:parcelId=${n.value.id}] no assay lot found with id=${e.id}, ending function`);const o=ve(e.seller_assay)?null:Number(e.seller_assay),l=ve(e.buyer_assay)?null:Number(e.buyer_assay),i=ve(e.umpire_assay)?null:Number(e.umpire_assay);switch(a){case"umpire_name":d.value.update.push(e.id);break;case"seller_assay":case"buyer_assay":e.difference=function(e,a){return!e||isNaN(e)||!a||isNaN(a)?null:ge(e-a,4)}(o,l),e.to_umpire=(r=Number(e.difference),c=m.value.editableAssayInDrawer.commonSplittingLimit,u=m.value.contractData.umpireArbitrationWhenSLEqualsDiff,!!r&&(!(!u||Math.abs(r)!==c)||Math.abs(r)>c)),e.to_umpire&&he(i)?e.losing_party=Te(o,l,i):e.to_umpire||(e.losing_party=null,e.umpire_assay=null,e.umpire_name=null),e.final_assay=Pe(o,l,i,e.to_umpire,e.losing_party,m.value.contractData.finalAssayEquation),d.value.update.push(e.id),m.value.isCompositeAssayRecalculatedWithEditedLots=!1;break;case"umpire_assay":e.losing_party=Te(o,l,i),e.to_umpire&&he(i)&&(e.losing_party=Te(o,l,i)),e.final_assay=Pe(o,l,i,e.to_umpire,e.losing_party,m.value.contractData.finalAssayEquation),d.value.update.push(e.id),m.value.isCompositeAssayRecalculatedWithEditedLots=!1;break;case"final_assay":d.value.update.push(e.id),m.value.isCompositeAssayRecalculatedWithEditedLots=!1}var r,c,u;console.log(`[navarch-parcellots-assay-v2:onReevaluateAssayLotEditorCells:parcelId=${n.value.id}] update recorded for item with id ${e.id}, completed`)}(e,a)}),500)},onHoverAssayLotStatusForTooltip:function(e){if(-1!==d.value.delete.findIndex((a=>a===e)))return"Assay lot marked for deletion. Edits made to this row will not be saved";if(-1!==d.value.create.findIndex((a=>a===e)))return"Newly created assay lot";if(-1!==d.value.update.findIndex((a=>a===e)))return"Assay lot contains changes";return"No changes for made for this assay lot"},setFatalErrorMessage:function(e){if(!e)return m.value.fatalErrorMessage=null,void(m.value.isFatalErrorPopupOpen=!1);console.error(`[navarch-parcellots-assay-v2:setFatalErrorMessage:parcelId=${n.value.id}] ${e}`),m.value.fatalErrorMessage=e,m.value.isFatalErrorPopupOpen=!0},formatNumber:be,displayValueAndUnit:ce,getStatusIconByLotId:function(e){if(-1!==d.value.delete.findIndex((a=>a===e)))return"delete";if(-1!==d.value.create.findIndex((a=>a===e)))return"add_circle";if(-1!==d.value.update.findIndex((a=>a===e)))return"edit";return"radio_button_checked"},getStatusColourByLotId:function(e){if(-1!==d.value.delete.findIndex((a=>a===e)))return"v-icon-status-small-red";if(-1!==d.value.create.findIndex((a=>a===e)))return"v-icon-status-small-green";if(-1!==d.value.update.findIndex((a=>a===e)))return"v-icon-status-small-yellow";return"v-icon-status-small-foreground-subdued"}};async function h(e){console.log(`[navarch-parcellots-assay-v2:fetchWeightLotDataForThisParcel:parcelId=${n.value.id}] start with param parcelID=${e}`);const a=await i.get("/items/navarch_weight_lot",{params:{filter:{[L]:{_eq:e}},sort:[E],fields:[$,E,j,q,"method"]}});v.value=a.data.data,console.debug(`[navarch-parcellots-assay-v2:fetchWeightLotDataForThisParcel:parcelId=${n.value.id}] fetched weight lots=\n${JSON.stringify(v.value)}`),console.log(`[navarch-parcellots-assay-v2:fetchWeightLotDataForThisParcel:parcelId=${n.value.id}] fetching weight lot data for parcelID=${e}`)}async function f(e){console.log(`[navarch-parcellots-assay-v2:getContractData:parcelId=${n.value.id}] start with param contractId=${e}`);try{me(m.value.editingDisabledReason,Ce),me(m.value.editingDisabledReason,_e);const a=(await i.get(`/items/navarch_contract/${e}`,{params:{fields:[Q,Z,ee,X]}})).data.data;!function(e){if(!e)throw new Error("Contract data response is empty, please ensure the selected contract for this parcel still exists");if(!e[Q])throw new Error("Contract field 'Weight UOM' is empty");if(!e[X])throw new Error("Contract field 'Methods' is empty");if(void 0===e[Z]||null===e[Z]||"boolean"!=typeof e[Z])throw new Error(`Contract field 'Allow Split Option' is empty or has an invalid value of ${e[Z]}`);if(!e[ee]||!Object.values(te).includes(e[ee]))throw new Error(`Contract field 'Final Assay Method' is empty or has an invalid value of ${e[ee]}`)}(a);const t=await i.get(`/items/navarch_unit/${a[Q]}`,{params:{fields:[ae]}});!function(e){if(!e)throw new Error("Weight uom response is empty, please ensure a valid weight UOM has been selected in the contract");if(!e[ae])throw new Error(`Contract field 'Weight UOM' may have an invalid 'Dry Symbol' field value of ${e[ae]}, please ensure a valid UOM with a proper Dry Symbol is selected`)}(t.data.data);const s=await i.get("/items/navarch_commodity_in_contract",{params:{filter:{[J]:{_eq:e}},fields:["commodity",G,z,Y]}});!function(e){if(!e||!Array.isArray(e))throw console.error(`Commodities in contract data response=${JSON.stringify(e)} is null or not of type array`),new Error("Commodities in contract is either empty or not a list");for(const a of e)Oe(a)}(s.data.data);const o=[],l={};for(const e of s.data.data){const a=await i.get(`/items/navarch_commodity/${e.commodity}`,{params:{fields:[H,K]}});xe(a.data.data,e.commodity);const t={name:a.data.data[H],code:a.data.data[K],isPrimaryCommodity:e[G],splittingLimit:e[z],splittingLimitUOM:e[Y]};o.push(t),l[a.data.data[K]]=a.data.data[H]}m.value.contractData={commodities:null!=o?o:[],commodityCodeToNameMap:l,dryWeightUom:t.data.data[ae],methods:a[X],umpires:[],umpireArbitrationWhenSLEqualsDiff:a[Z],finalAssayEquation:a[ee]},console.log(`[navarch-parcellots-assay-v2:getContractData:parcelId=${n.value.id}] completed`)}catch(e){ye(m.value.editingDisabledReason,Ce),console.error(`[navarch-parcellots-assay-v2:setInitialMethodSelection:parcelId=${n.value.id}] fetching the contract data went wrong due to: ${e}`)}}function g(){if(console.log(`[navarch-parcellots-assay-v2:setInitialCommoditySelection:parcelId=${n.value.id}] start`),!m.value.contractData||!m.value.contractData.commodities)return u.value=[],void console.log(`[navarch-parcellots-assay-v2:setInitialCommoditySelection:parcelId=${n.value.id}] completed with no contract data found`);u.value=m.value.contractData.commodities.map((e=>({value:e.code,text:`${e.name} (${e.code})`}))).filter((e=>!!e)),console.log(`[navarch-parcellots-assay-v2:setInitialCommoditySelection:parcelId=${n.value.id}] completed for parcel id=${n.value.id}`)}function b(){m.value.saveFunctionDisabledReason=null,m.value.isDrawerOpen=!1,m.value.isCompositeAssayRecalculatedWithEditedLots=!0,m.value.editableAssayInDrawer=null,m.value.isAddingNewAssay=!1,me(m.value.editingDisabledReason,Re),me(m.value.editingDisabledReason,"Please select a commodity first before adding a new assay lot"),me(m.value.editingDisabledReason,$e),me(m.value.editingDisabledReason,Le),me(m.value.editingDisabledReason,Ue),me(m.value.editingDisabledReason,Ee),me(m.value.editingDisabledReason,Ne),d.value={create:[],update:[],delete:[]}}async function w(){console.log(`[navarch-parcellots-assay-v2:onRefetchContractData:parcelId=${n.value.id}] started`),n.value[U]?(await f(n.value[U]),console.log(`[navarch-parcellots-assay-v2:onRefetchContractData:parcelId=${n.value.id}] completed`)):console.log(`[navarch-parcellots-assay-v2:onRefetchContractData:parcelId=${n.value.id}] contract field is not set, cannot refetch contract data`)}function A(){var e,a,t;if(console.log(`[navarch-parcellots-assay-v2:onRecalculateCompositeAssay:parcelId=${n.value.id}] started`),!(null==(e=m.value.editableAssayInDrawer)?void 0:e.editableLots))return void console.error(`[navarch-parcellots-assay-v2:onRecalculateCompositeAssay:parcelId=${n.value.id}] editable lots is not defined, cannot recalculate composite assay`);const s=function(e,a){var t,s,o,l;if(console.log(`[evaluateCompositeAssay] started with ${e.length} lot(s)`),!Array.isArray(e)||e.length<=0)throw console.error("[evaluateCompositeAssay] inputted lots is not an array or is empty, completing without evaluating"),new Error("Invalid list of assay lots found, please check the assay lots and try again");if(!a||0===Object.keys(a).length)throw console.error("[evaluateCompositeAssay] commodityCodeToName is null, undefined, or contains no records, please check the contract data and try again"),new Error("No commodities found in the selected contract, please check the contract data and try again");if(1===e.length&&!ve(e[0])&&!e[0].lot_number){const o=e[0];if(!o.commodity)throw console.error("[evaluateCompositeAssay] No commodity found from the composite assay, please check the assay lots and try again"),new Error("No commodity selected, please try again");if(!Object.keys(a).includes(o.commodity))throw console.error(`[evaluateCompositeAssay] Commodity ${o.commodity} not found in the contract data (contract commodities include ${JSON.stringify(Object.keys(a))}), please check the contract data and try again`),new Error(`Commodity ${o.commodity} not found in the contract data (contract commodities include ${JSON.stringify(Object.keys(a))}), please check the contract data and try again`);return console.log("[evaluateCompositeAssay] finishing with composite assay found"),{method:o.method,commodity:o.commodity,commodityName:a&&o.commodity?null!=(t=a[o.commodity])?t:o.commodity:null!=(s=o.commodity)?s:"-",dryWeightUom:o.dry_weight_uom,dryWeight:pe(o.dry_weight),assayUom:o.assay_uom,sellerAssay:pe(o.seller_assay),buyerAssay:pe(o.buyer_assay),difference:pe(o.difference),splittingLimit:pe(o.splitting_limit),toUmpire:o.to_umpire,umpireName:o.umpire_name,umpireAssay:o.umpire_assay?Number(o.umpire_assay):void 0,losingParty:o.losing_party,finalAssay:pe(o.final_assay),lots:e}}if(e.find((e=>!e.lot_number)))throw console.error("[evaluateCompositeAssay] Assay lots contain a mix of composite and assay lots, please check the assay lots and try again"),new Error("Assay lots contain a mix of composite and assay lots");const i=ue(e,"commodity");if(!i)throw console.error("[evaluateCompositeAssay] No commodity found from the first assay lot, please check the assay lots and try again"),new Error("No commodity found from the first assay lot, please check the assay lots and try again");if(Object.keys(a).includes(i)||console.error(`[evaluateCompositeAssay] Commodity ${i} not found in the contract data (contract commodities include ${JSON.stringify(Object.keys(a))}), please check the contract data and try again`),0===e.length)throw console.error("[evaluateCompositeAssay] No assay lots found, please check the assay lots and try again"),new Error("No valid assay lots found, please check the assay lots and try again");let n=0;const r=e.reduce(((e,a)=>{const t=pe(a.dry_weight);return e.dryWeight+=t,e.sellerAssay+=pe(a.seller_assay)*t,e.buyerAssay+=pe(a.buyer_assay)*t,e.difference+=pe(a.difference)*t,e.finalAssay+=pe(a.final_assay)*t,e.toUmpire=e.toUmpire||!!a.to_umpire,a.to_umpire&&(e.umpireName+=a.umpire_name?`,${a.umpire_name}`:"",ve(a.umpire_assay)||(e.umpireAssay+=Number(a.umpire_assay)*t,n+=t)),e}),{method:ue(e,"method"),commodity:ue(e,"commodity"),commodityName:a&&null!=(o=a[i])?o:i,dryWeightUom:ue(e,"dry_weight_uom"),dryWeight:0,assayUom:ue(e,"assay_uom"),sellerAssay:0,buyerAssay:0,difference:0,splittingLimit:ge(Number(null!=(l=ue(e,"splitting_limit"))?l:"0"),4),toUmpire:!1,umpireName:"",umpireAssay:0,losingParty:null,finalAssay:0,lots:e});if(0===r.dryWeight)throw console.error("[evaluateCompositeAssay] total dry weight of assay lots is 0, please check the assay lots and try again"),new Error("Total dry weight of assay lots is 0, please check the assay lots and try again");"number"==typeof r.sellerAssay&&(r.sellerAssay=ge(r.sellerAssay/r.dryWeight,4)),"number"==typeof r.buyerAssay&&(r.buyerAssay=ge(r.buyerAssay/r.dryWeight,4)),"number"==typeof r.difference&&(r.difference=ge(r.difference/r.dryWeight,4)),"number"==typeof r.finalAssay&&(r.finalAssay=ge(r.finalAssay/r.dryWeight,4)),n>0&&"number"==typeof r.umpireAssay&&(r.umpireAssay=ge(r.umpireAssay/n,4));const d=e.filter((e=>e.losing_party===se.Buyer)).length,c=e.filter((e=>e.losing_party===se.Seller)).length;return 0===c&&0===d||(r.losingParty=c>d?se.Seller:c<d?se.Buyer:se.Split),r}(null==(a=m.value.editableAssayInDrawer)?void 0:a.editableLots.filter((e=>!d.value.delete.includes(e.id))),null==(t=m.value.contractData)?void 0:t.commodityCodeToNameMap);m.value.editableAssayInDrawer={compositeAssayId:m.value.editableAssayInDrawer.compositeAssayId,compositeWeightId:m.value.editableAssayInDrawer.compositeWeightId,commonMethodDisplay:s.method,compositeDryWeight:s.dryWeight,commonDryWeightUom:s.dryWeightUom,commonAssayUom:s.assayUom,compositeBuyerAssay:s.buyerAssay,compositeSellerAssay:s.sellerAssay,compositeFinalAssay:s.finalAssay,compositeDifference:s.difference,commonSplittingLimit:s.splittingLimit,compositeToUmpire:s.toUmpire,compositeUmpireName:s.umpireName,compositeUmpireAssay:s.umpireAssay,compositeLosingParty:s.losingParty,commonCommodity:s.commodity,editableLots:m.value.editableAssayInDrawer.editableLots},m.value.isCompositeAssayRecalculatedWithEditedLots=!0,console.log(`[navarch-parcellots-assay-v2:onRecalculateCompositeAssay:parcelId=${n.value.id}] completed`)}}});const ke=e=>(w("data-v-64969d30"),e=e(),A(),e),Ve={key:0},Be={class:"margin-top-16px"},je={key:0,class:"drawer-content"},qe=["disabled"],He={class:"two-column-layout"},Ke=ke((()=>p("div",{class:"input-label"},"Method",-1))),Ge=ke((()=>p("div",{class:"input-label"},"Commodity",-1))),Je={class:"two-column-layout"},ze=ke((()=>p("div",{class:"input-label"},"Splitting Limit",-1))),Ye=ke((()=>p("div",{class:"input-label"},"Assay UOM",-1))),Qe=ke((()=>p("div",{class:"input-label"},"Composite Assay Results",-1))),Xe={key:0},Ze={class:"margin-top-16px"},ea=ke((()=>p("div",{class:"input-label"},"Assay Lots",-1))),aa=ke((()=>p("div",null,null,-1))),ta={key:0},sa={class:"margin-top-16px"};var oa=[],la=[];!function(e,a){if(e&&"undefined"!=typeof document){var t,s=!0===a.prepend?"prepend":"append",o=!0===a.singleTag,l="string"==typeof a.container?document.querySelector(a.container):document.getElementsByTagName("head")[0];if(o){var i=oa.indexOf(l);-1===i&&(i=oa.push(l)-1,la[i]={}),t=la[i]&&la[i][s]?la[i][s]:la[i][s]=n()}else t=n();65279===e.charCodeAt(0)&&(e=e.substring(1)),t.styleSheet?t.styleSheet.cssText+=e:t.appendChild(document.createTextNode(e))}function n(){var e=document.createElement("style");if(e.setAttribute("type","text/css"),a.attributes)for(var t=Object.keys(a.attributes),o=0;o<t.length;o++)e.setAttribute(t[o],a.attributes[t[o]]);var i="prepend"===s?"afterbegin":"beforeend";return l.insertAdjacentElement(i,e),e}}('.assay-table .table-row[data-v-64969d30] {\n  height: 30px;\n}\n.assay-table .assay_cell[data-v-64969d30] {\n  width: 100%;\n}\n.assay-table .assay_cell_highlighted[data-v-64969d30] {\n  background-color: lightsalmon !important;\n  width: 100%;\n}\n.assay-table .header_cell_with_input[data-v-64969d30] {\n  height: 60px;\n}\n.margin-top-16px[data-v-64969d30] {\n  margin-top: 16px;\n}\n.v-icon-white[data-v-64969d30] {\n  --v-icon-color: #ffffff;\n}\n.v-icon-purple[data-v-64969d30] {\n  --v-icon-color: #8866FF;\n}\n.v-icon-delete-button-small-foreground-subdued[data-v-64969d30] {\n  --v-icon-size: 18px;\n  --v-icon-color: var(--foreground-subdued);\n}\n.v-icon-delete-button-small-red[data-v-64969d30] {\n  --v-icon-size: 18px;\n  --v-icon-color: var(--red);\n}\n.v-icon-status-small-foreground-subdued[data-v-64969d30] {\n  --v-icon-size: 18px;\n  --v-icon-color: var(--foreground-subdued);\n}\n.v-icon-status-small-red[data-v-64969d30] {\n  --v-icon-size: 18px;\n  --v-icon-color: var(--red);\n}\n.v-icon-status-small-yellow[data-v-64969d30] {\n  --v-icon-size: 18px;\n  --v-icon-color: var(--yellow);\n}\n.v-icon-status-small-green[data-v-64969d30] {\n  --v-icon-size: 18px;\n  --v-icon-color: var(--green);\n}\n.v-button-red-on-hover[data-v-64969d30] {\n  --v-button-color: var(--white);\n  --v-button-background-color: var(--background-normal);\n  --v-button-color-hover: var(--white);\n  --v-button-background-color-hover: var(--red);\n}\n.v-button-red[data-v-64969d30] {\n  --v-button-color: var(--white);\n  --v-button-background-color: var(--danger);\n  --v-button-color-hover: var(--white);\n  --v-button-background-color-hover: var(--danger-125);\n}\n.drawer-content[data-v-64969d30] {\n  padding: 0 32px 40px;\n}\n.assay-drawer[data-v-64969d30] {\n  max-width: 1500px !important;\n}\n.v-sheet[data-v-64969d30] {\n  --v-sheet-color: var(-red-600);\n}\n.input-label[data-v-64969d30] {\n  color: #f0f6fc;\n  font-weight: 600;\n  font-size: 16px;\n  font-family: "Inter", -apple-system, "BlinkMacSystemFont", "Segoe UI", "Roboto", "Helvetica", "Arial", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n  font-style: normal;\n  line-height: 19px;\n  margin-bottom: 8px;\n  padding-top: 20px !important;\n}\n.same-line[data-v-64969d30] {\n  display: flex;\n  flex-direction: row;\n}\n.is-composite-checkbox-label[data-v-64969d30] {\n  color: #f0f6fc;\n  font-weight: 600;\n  font-size: 16px;\n  font-family: "Inter", -apple-system, "BlinkMacSystemFont", "Segoe UI", "Roboto", "Helvetica", "Arial", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n  font-style: normal;\n  line-height: 19px;\n  padding-left: 10px !important;\n  display: flex;\n  align-items: center;\n}\n.two-column-layout[data-v-64969d30] {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 40px;\n}',{}),Fe.render=function(e,a,t,s,o,l){const w=i("v-overlay"),A=i("v-icon"),D=i("v-table"),I=i("v-button"),_=i("v-select"),S=i("v-input"),C=i("v-drawer"),$=i("v-card-title"),L=i("v-card-subtitle"),E=i("v-card-text"),U=i("v-card-actions"),N=i("v-card"),R=i("v-dialog"),M=n("tooltip");return r(),d(c,null,[u(" Darkened area over the UI when loading "),m(w,{active:e.interfaceState.isLoadingWhilePatching,clickable:!1},null,8,["active"]),u(" Displayed in the Parcel form "),u(" v filter chips "),m(D,{class:"assay-table",headers:e.AssayTableHeaders,items:e.assayCompositeListToDisplay,rowHeight:30,"onClick:row":e.onMainAssayLotTableRowClick,fixedHeader:"",inline:""},{"item.sellerAssay":y((({item:a})=>[p("div",null,v(`${e.displayValueAndUnit(a.sellerAssay,a.assayUom)}`),1)])),"item.buyerAssay":y((({item:a})=>[p("div",null,v(`${e.displayValueAndUnit(a.buyerAssay,a.assayUom)}`),1)])),"item.difference":y((({item:a})=>[p("div",null,v(`${e.displayValueAndUnit(a.difference,a.assayUom)}`),1)])),"item.splittingLimit":y((({item:a})=>[p("div",null,v(`${e.displayValueAndUnit(a.splittingLimit,a.assayUom)}`),1)])),"item.toUmpire":y((({item:e})=>[e.toUmpire?(r(),d("div",Ve,[h(m(A,{class:"v-icon-purple",name:"gavel"},null,512),[[M,"Require umpire arbitration",void 0,{bottom:!0}]])])):u("v-if",!0)])),"item.umpireAssay":y((({item:a})=>[p("div",null,v(`${e.displayValueAndUnit(a.umpireAssay,a.assayUom)}`),1)])),"item.finalAssay":y((({item:a})=>[p("div",null,v(`${e.displayValueAndUnit(a.finalAssay,a.assayUom)}`),1)])),_:2},1032,["headers","items","onClick:row"]),u(" Needs to be disabled through the editing Disabled Reason in the interface state OR by the contract data being null "),p("div",Be,[h((r(),f(I,{onClick:e.onMainPageClickAddAssay,disabled:!!e.interfaceState.editingDisabledReason&&e.interfaceState.editingDisabledReason.length>0||!e.interfaceState.contractData},{default:y((()=>[g(" Add Assay ")])),_:1},8,["onClick","disabled"])),[[M,e.interfaceState.editingDisabledReason&&e.interfaceState.editingDisabledReason.length>0||!e.interfaceState.contractData?e.interfaceState.editingDisabledReason[0]??(e.interfaceState.contractData?"Editing is disabled":"Please select a contract first"):"Click to add a new assay lot by method"]])]),u(" Displayed when the Drawer is open to show Assay Lots by Method and Commodity "),m(C,{modelValue:e.interfaceState.isDrawerOpen,"onUpdate:modelValue":a[5]||(a[5]=a=>e.interfaceState.isDrawerOpen=a),onToggle:e.onDrawerClose,onCancel:e.onDrawerClose,icon:"gavel",title:""+(e.interfaceState.isAddingNewAssay?"Add New Assay":"Edit Assay"),subtitle:"Assay Lots"},{actions:y((()=>[h((r(),f(I,{rounded:"",onClick:e.onDrawerSave,disabled:!!e.interfaceState.editingDisabledReason&&e.interfaceState.editingDisabledReason.length>0||!e.interfaceState.contractData||!!e.interfaceState.saveFunctionDisabledReason,icon:""},{default:y((()=>[m(A,{name:"check"})])),_:1},8,["onClick","disabled"])),[[M,e.interfaceState.editingDisabledReason&&e.interfaceState.editingDisabledReason.length>0||!e.interfaceState.contractData||e.interfaceState.saveFunctionDisabledReason?e.interfaceState.editingDisabledReason[0]??e.interfaceState.saveFunctionDisabledReason??"Editing has been disabled":null,void 0,{bottom:!0}]]),h((r(),f(I,{class:"v-button-red-on-hover",rounded:"",onClick:e.onDrawerDeleteAssay,disabled:!!e.interfaceState.editingDisabledReason&&e.interfaceState.editingDisabledReason.length>0||!e.interfaceState.contractData,icon:""},{default:y((()=>[m(A,{name:"delete"})])),_:1},8,["onClick","disabled"])),[[M,e.interfaceState.editingDisabledReason&&e.interfaceState.editingDisabledReason.length>0||!e.interfaceState.contractData?e.interfaceState.editingDisabledReason[0]??"Editing has been disabled":null,void 0,{bottom:!0}]])])),default:y((()=>[e.interfaceState.editableAssayInDrawer?(r(),d("div",je,[p("fieldset",{disabled:!!e.interfaceState.editingDisabledReason&&e.interfaceState.editingDisabledReason.length>0||!e.interfaceState.contractData},[p("div",He,[p("div",null,[Ke,m(_,{modelValue:e.interfaceState.editableAssayInDrawer.commonMethodDisplay,"onUpdate:modelValue":a[0]||(a[0]=a=>e.interfaceState.editableAssayInDrawer.commonMethodDisplay=a),items:e.methodSelection,disabled:!e.interfaceState.isAddingNewAssay},null,8,["modelValue","items","disabled"])]),p("div",null,[Ge,m(_,{modelValue:e.interfaceState.editableAssayInDrawer.commonCommodity,"onUpdate:modelValue":a[1]||(a[1]=a=>e.interfaceState.editableAssayInDrawer.commonCommodity=a),items:e.commoditySelection,disabled:!e.interfaceState.isAddingNewAssay},null,8,["modelValue","items","disabled"])])]),p("div",Je,[p("div",null,[ze,u(" would want to show the commonSplittingLimit as a number with 4 decimal places but v-model requires a ref object, so can't use a function to add trailing zeroes to it "),m(S,{modelValue:e.interfaceState.editableAssayInDrawer.commonSplittingLimit,"onUpdate:modelValue":a[2]||(a[2]=a=>e.interfaceState.editableAssayInDrawer.commonSplittingLimit=a),type:"number",onInput:a[3]||(a[3]=()=>e.stageBatchUpdateForSplittingLimit()),disabled:!0},null,8,["modelValue"])]),p("div",null,[Ye,m(S,{modelValue:e.interfaceState.editableAssayInDrawer.commonAssayUom,"onUpdate:modelValue":a[4]||(a[4]=a=>e.interfaceState.editableAssayInDrawer.commonAssayUom=a),disabled:!0},null,8,["modelValue"])])]),Qe,u(" interfaceState.editableAssayInDrawer should not be null, but just in case, default to empty array "),m(D,{class:"assay-table",headers:e.AssayCompositeTableInDrawerHeaders,items:e.interfaceState.editableAssayInDrawer?[e.interfaceState.editableAssayInDrawer]:[],rowHeight:30,fixedHeader:"",inline:""},{"item.compositeDryWeight":y((({item:a})=>[p("div",null,v(`${e.displayValueAndUnit(a.compositeDryWeight,a.commonDryWeightUom)}`),1)])),"item.compositeSellerAssay":y((({item:a})=>[p("div",null,v(`${e.displayValueAndUnit(a.compositeSellerAssay,a.commonAssayUom)}`),1)])),"item.compositeBuyerAssay":y((({item:a})=>[p("div",null,v(`${e.displayValueAndUnit(a.compositeBuyerAssay,a.commonAssayUom)}`),1)])),"item.compositeDifference":y((({item:a})=>[p("div",null,v(`${e.displayValueAndUnit(a.compositeDifference,a.commonAssayUom)}`),1)])),"item.compositeToUmpire":y((({item:e})=>[e.compositeToUmpire?(r(),d("div",Xe,[h(m(A,{class:"v-icon-purple",name:"gavel"},null,512),[[M,"Require umpire arbitration",void 0,{bottom:!0}]])])):u("v-if",!0)])),"item.compositeUmpireAssay":y((({item:a})=>[p("div",null,v(`${e.displayValueAndUnit(a.compositeUmpireAssay,a.commonAssayUom)}`),1)])),"item.compositeFinalAssay":y((({item:a})=>[p("div",null,v(`${e.displayValueAndUnit(a.compositeFinalAssay,a.commonAssayUom)}`),1)])),_:2},1032,["headers","items"]),p("div",Ze,[h((r(),f(I,{disabled:!!e.interfaceState.editingDisabledReason&&e.interfaceState.editingDisabledReason.length>0||!e.interfaceState.contractData||!e.interfaceState.editableAssayInDrawer.commonMethodDisplay||!e.interfaceState.editableAssayInDrawer.commonCommodity,onClick:e.onRecalculateCompositeAssay},{default:y((()=>[g(" Evaluate Composite ")])),_:1},8,["disabled","onClick"])),[[M,e.interfaceState.editingDisabledReason&&e.interfaceState.editingDisabledReason.length>0||!e.interfaceState.contractData?e.interfaceState.editingDisabledReason[0]??"Editing has been disabled":e.interfaceState.editableAssayInDrawer.commonMethodDisplay&&e.interfaceState.editableAssayInDrawer.commonCommodity?"Recalculate the composite assay data based on the assay lots currently entered":"Cannot evaluate composite value without a method and commodity selected",void 0,{bottom:!0}]])]),ea,u(" interfaceState.editableAssayInDrawer should not be null, but just in case, default to empty array "),m(D,{class:"assay-table",headers:e.AssayLotTableHeaders,items:e.interfaceState.editableAssayInDrawer.editableLots??[],rowHeight:30,fixedHeader:"",inline:""},{"header.dry_weight":y((({header:a})=>[p("div",null,v(`${a.text} (${e.interfaceState.editableAssayInDrawer.commonDryWeightUom??"-"})`),1)])),"header.to_umpire":y((()=>[aa])),"item.status":y((({item:a})=>[h(m(A,{class:b(e.getStatusColourByLotId(a.id)),name:e.getStatusIconByLotId(a.id)},null,8,["class","name"]),[[M,e.onHoverAssayLotStatusForTooltip(a.id),void 0,{top:!0}]])])),"item.dry_weight":y((({item:e})=>[u(" the 'id' item.lot_number defaults to 1 because it will be 'null' for composite assays, and the \"press Enter to focus on next editable cell\" functionality only works when its a number and starts at one for each row "),m(S,{modelValue:e.dry_weight,"onUpdate:modelValue":a=>e.dry_weight=a,placeholder:0,type:"number",nullable:!0,disabled:!0,id:`assaylots-1-${e.lot_number??1}`},null,8,["modelValue","onUpdate:modelValue","id"])])),"item.seller_assay":y((({item:a})=>[m(S,{modelValue:a.seller_assay,"onUpdate:modelValue":e=>a.seller_assay=e,placeholder:0,type:"number",onKeydown:t=>e.onKeyDownInAssayLotEditorCell(a,"seller_assay",t),nullable:!0,id:`assaylots-2-${a.lot_number??1}`},null,8,["modelValue","onUpdate:modelValue","onKeydown","id"])])),"item.buyer_assay":y((({item:a})=>[m(S,{modelValue:a.buyer_assay,"onUpdate:modelValue":e=>a.buyer_assay=e,placeholder:0,type:"number",onKeydown:t=>e.onKeyDownInAssayLotEditorCell(a,"buyer_assay",t),nullable:!0,id:`assaylots-3-${a.lot_number??1}`},null,8,["modelValue","onUpdate:modelValue","onKeydown","id"])])),"item.difference":y((({item:e})=>[m(S,{modelValue:e.difference,"onUpdate:modelValue":a=>e.difference=a,placeholder:0,type:"number",nullable:!0,disabled:!0,id:`assaylots-4-${e.lot_number??1}`},null,8,["modelValue","onUpdate:modelValue","id"])])),"item.to_umpire":y((({item:e})=>[e.to_umpire?(r(),d("div",ta,[h(m(A,{class:"v-icon-purple",name:"gavel"},null,512),[[M,"Require umpire arbitration",void 0,{bottom:!0}]])])):u("v-if",!0)])),"item.umpire_name":y((({item:a})=>[m(S,{modelValue:a.umpire_name,"onUpdate:modelValue":e=>a.umpire_name=e,disabled:!a.to_umpire,placeholder:0,type:"string",onKeydown:t=>e.onKeyDownInAssayLotEditorCell(a,"umpire_name",t),nullable:!0,id:`assaylots-5-${a.lot_number??1}`},null,8,["modelValue","onUpdate:modelValue","disabled","onKeydown","id"])])),"item.umpire_assay":y((({item:a})=>[m(S,{modelValue:a.umpire_assay,"onUpdate:modelValue":e=>a.umpire_assay=e,disabled:!a.to_umpire,placeholder:0,type:"number",onKeydown:t=>e.onKeyDownInAssayLotEditorCell(a,"umpire_assay",t),nullable:!0,id:`assaylots-6-${a.lot_number??1}`},null,8,["modelValue","onUpdate:modelValue","disabled","onKeydown","id"])])),"item.losing_party":y((({item:e})=>[m(S,{modelValue:e.losing_party,"onUpdate:modelValue":a=>e.losing_party=a,placeholder:0,type:"string",nullable:!0,disabled:!0},null,8,["modelValue","onUpdate:modelValue"])])),"item.final_assay":y((({item:a})=>[m(S,{modelValue:a.final_assay,"onUpdate:modelValue":e=>a.final_assay=e,placeholder:0,type:"number",onKeydown:t=>e.onKeyDownInAssayLotEditorCell(a,"final_assay",t),nullable:!0,id:`assaylots-7-${a.lot_number??1}`},null,8,["modelValue","onUpdate:modelValue","onKeydown","id"])])),default:y((()=>[g(" > ")])),_:2},1032,["headers","items"]),p("div",sa,[h((r(),f(I,{onClick:e.onDrawerClickSyncWithWeightLots,loading:e.interfaceState.isSyncingWithWeightLotDataByMethod,disabled:e.interfaceState.isAddingNewAssay||!e.interfaceState.editableAssayInDrawer.commonMethodDisplay},{default:y((()=>[g(" Sync with Weight Lots ")])),_:1},8,["onClick","loading","disabled"])),[[M,e.interfaceState.isAddingNewAssay?"Disabled when creating a new assay":e.interfaceState.editableAssayInDrawer.commonMethodDisplay?`Sync assay lots with the weight lots for method ${e.interfaceState.editableAssayInDrawer.commonMethodDisplay}`:"Please select a method first",void 0,{bottom:!0}]]),u(" Only show this when the assay is composite, so it can be converted to assay lot, the reverse action is not permitted so it will not be shown "),e.interfaceState.editableAssayInDrawer.isCompositeAssay?h((r(),f(I,{key:0,class:"margin-left-16px secondary-button",disabled:!!e.interfaceState.editingDisabledReason&&e.interfaceState.editingDisabledReason.length>0||e.interfaceState.isAddingNewAssay||!e.interfaceState.contractData||!e.interfaceState.editableAssayInDrawer.commonMethodDisplay||!e.interfaceState.editableAssayInDrawer.commonCommodity,onClick:e.onConvertCompositeAssayToAssayLots},{default:y((()=>[g(" Convert to Assay Lots ")])),_:1},8,["disabled","onClick"])),[[M,e.interfaceState.editingDisabledReason&&e.interfaceState.editingDisabledReason.length>0||!e.interfaceState.contractData?e.interfaceState.editingDisabledReason[0]??(e.interfaceState.isAddingNewAssay?"Button disabled when adding new assay":"Editing has been disabled"):e.interfaceState.editableAssayInDrawer.commonMethodDisplay&&e.interfaceState.editableAssayInDrawer.commonCommodity?"Switch from a single composite lot to multiple assay lots based on weight lots of the same method type. Once clicked, this button will disappear.":"Cannot convert to assay lots without the method and commodity selected",void 0,{bottom:!0}]]):u("v-if",!0)])],8,qe)])):u("v-if",!0)])),_:1},8,["modelValue","onToggle","onCancel","title"]),u(" Popup of death when something bad happens, for user to screenshot and report to Navarch "),m(R,{modelValue:e.interfaceState.isFatalErrorPopupOpen,"onUpdate:modelValue":a[7]||(a[7]=a=>e.interfaceState.isFatalErrorPopupOpen=a)},{default:y((()=>[m(N,null,{default:y((()=>[m($,null,{default:y((()=>[g("Uh oh! Something went wrong")])),_:1}),m(L,null,{default:y((()=>[g("Screenshot this and reach out to Navarch for assistance")])),_:1}),m(E,null,{default:y((()=>[g("INPUT FATAL ERROR MESSAGE HERE")])),_:1}),m(U,null,{default:y((()=>[m(I,{secondary:"",onClick:a[6]||(a[6]=()=>e.setFatalErrorMessage(null))},{default:y((()=>[g("Got it")])),_:1})])),_:1})])),_:1})])),_:1},8,["modelValue"]),u(" Confirmation popups when exiting or performing a save or delete operation "),m(R,{modelValue:e.interfaceState.isConfirmSavePopupOpen,"onUpdate:modelValue":a[9]||(a[9]=a=>e.interfaceState.isConfirmSavePopupOpen=a)},{default:y((()=>[m(N,null,{default:y((()=>[m($,null,{default:y((()=>[g("New changes made")])),_:1}),m(E,null,{default:y((()=>[g("The changes will be saved even if other changes to the Parcel is not saved. Are you sure you want to save?")])),_:1}),m(U,null,{default:y((()=>[m(I,{secondary:"",onClick:a[8]||(a[8]=()=>e.interfaceState.isConfirmSavePopupOpen=!1)},{default:y((()=>[g("Keep Editing")])),_:1}),m(I,{loading:e.interfaceState.isLoadingWhilePatching,onClick:e.onConfirmDrawerSave},{default:y((()=>[g("Save Changes")])),_:1},8,["loading","onClick"])])),_:1})])),_:1})])),_:1},8,["modelValue"]),m(R,{modelValue:e.interfaceState.isConfirmDeletePopupOpen,"onUpdate:modelValue":a[11]||(a[11]=a=>e.interfaceState.isConfirmDeletePopupOpen=a)},{default:y((()=>[m(N,null,{default:y((()=>[m($,null,{default:y((()=>[g("Delete assay")])),_:1}),u(" This should never be shown, but just in case "),m(E,null,{default:y((()=>[g("This action is permanent and can not be undone. Are you sure you would like to proceed?")])),_:1}),m(U,null,{default:y((()=>[m(I,{secondary:"",onClick:a[10]||(a[10]=()=>e.interfaceState.isConfirmDeletePopupOpen=!1)},{default:y((()=>[g("Keep Editing")])),_:1}),m(I,{class:"v-button-red",loading:e.interfaceState.isLoadingWhilePatching,onClick:e.onConfirmDrawerDeleteAssay},{default:y((()=>[g("Delete")])),_:1},8,["loading","onClick"])])),_:1})])),_:1})])),_:1},8,["modelValue"]),m(R,{modelValue:e.interfaceState.isConfirmClosePopupOpen,"onUpdate:modelValue":a[13]||(a[13]=a=>e.interfaceState.isConfirmClosePopupOpen=a)},{default:y((()=>[m(N,null,{default:y((()=>[m($,null,{default:y((()=>[g("Unsaved changes")])),_:1}),m(E,null,{default:y((()=>[g("Are you sure you want to leave this page?")])),_:1}),m(U,null,{default:y((()=>[m(I,{secondary:"",onClick:e.onConfirmDrawerClose},{default:y((()=>[g("Discard Changes")])),_:1},8,["onClick"]),u(" closeConfirmCloseDrawerOverlay in assay lots v1 "),m(I,{onClick:a[12]||(a[12]=()=>e.interfaceState.isConfirmClosePopupOpen=!1)},{default:y((()=>[g("Keep Editing")])),_:1})])),_:1})])),_:1})])),_:1},8,["modelValue"])],64)},Fe.__scopeId="data-v-64969d30",Fe.__file="src/interface.vue";var ia=a({id:"navarch-parcellots-assay-v2",name:"Navarch Assay Lots Table v2",icon:"box",description:"Navarch Assay Lots Table Interface for Parcel Form",component:Fe,options:null,types:["uuid","string","text","integer","bigInteger","alias"],group:"relational",localTypes:["o2m"],relational:!0});export{ia as default};
