import{useApi as t,defineInterface as a}from"@directus/extensions-sdk";import{defineComponent as e,ref as n,inject as o,resolveComponent as r,openBlock as i,createElementBlock as s,Fragment as l,createCommentVNode as u,createVNode as d,withCtx as c,createTextVNode as m,createBlock as v,toDisplayString as f}from"vue";var g=e({props:{value:{type:Object,default:null}},emits:["input"],setup(a,{emit:e}){const r=n(""),i=n(!1),s=n(""),l=t(),u=o("values",n({})),d="id",c="name",m="code",v="contract",f="actual_shipment_date",g="vessel",h="destination",_="assay_results",p="name",y="port_name",w="commodity",$="dry_weight_uom",b="assay_uom",C="price_per_uom",D="navarch_assay_unit",U="unit",E="conversion_to_ppb",N="composition",A="navarch_unit",V="symbol",F="dry_symbol",M="unit",P="conversionToGram";return{isGeneraingDoc:i,failureReason:r,generatePdf:async function(){var t,a;r.value="",i.value=!0;try{i.value=!0;const n=u.value.metal,o=u.value.start_date,p=u.value.end_date;if(!n)return r.value="Metal not selected",void(i.value=!1);if(!o)return r.value="Start date not selected",void(i.value=!1);if(!p)return r.value="End date not selected",void(i.value=!1);const y=await l.get(`/items/navarch_commodity/${n}`,{params:{fields:[m,c]}}),w=await l.get(`/items/navarch_parcel?filter[_and][0][_and][0][${f}][_between][0]=${o}&filter[_and][0][_and][0][${f}][_between][1]=${p}`,{params:{fields:[d,"shipment_code",g,h,f,_,"weight_result",v]}});if(0===w.data.data.length)return r.value=`No parcels found for actual shipment date within the date range ${o} to ${p}`,void(i.value=!1);const $=w.data.data[0][v],b=await l.get(`/items/navarch_contract/${$}`,{params:{fields:["weight_uom"]}});console.log(`[generateLoadportDisportComparisonDoc] contract=${JSON.stringify(b.data.data)} for contract Id=${$} and parcel id=${w.data.data[0][d]}`);const D=await l.get(`/items/${A}/${b.data.data.weight_uom}`,{params:{fields:[F,M]}}),U=null!=(t=D.data.data[F])?t:"",E=(null==(a=D.data.data[M])?void 0:a.split(" ").map((t=>t[0].toUpperCase())).join(""))+"s",N=await l.get(`/items/navarch_commodity_in_contract?filter[contract]=${$}&filter[commodity]=${n}`,{params:{fields:[C]}});if(0===N.data.data.length||!N.data.data[0][C])return r.value=`Commodity ${n} not found in contract ${$} or does not have a Base Price Per UOM set`,void(i.value=!1);console.log(`[generateLoadportDisportComparisonDoc] commodity in contract response=${JSON.stringify(N.data.data)} for contract Id=${$} and parcel id=${w.data.data[0][d]}`);const P=(await l.get(`/items/${A}/${N.data.data[0][C]}`,{params:{fields:[V]}})).data.data[V],I=[];for(const t of w.data.data){const a=await L(t,y.data.data[m],P,U);I.push(a)}const J={start_date:j(new Date(o)),end_date:j(new Date(p)),metal:y.data.data[c],assay_uom:s.value,dry_weight_uom:U.toUpperCase(),dry_weight_uom_name:E,parcels:I},W=await l.post("/generate/loadport-disport-compare",J);if(200!==W.status)return console.log(`[generateLoadportDisportComparisonDoc] response status: ${W.status}`),r.value=W.data,void(i.value=!1);const k=W.data;e("input",{...J,doc_name:k}),i.value=!1,O(k)}catch(t){console.error("[generateProvWeightAndAssay] error=",t),r.value=t,i.value=!1}},viewPdf:O};function O(t){const e=null!=t?t:a.value.doc_name;console.log(`[viewPdf] doc name: ${e}`);const n=`/display-doc?filepath=${encodeURIComponent(`/data/uploads/${e}.pdf`)}`;window.open(n)}async function L(t,a,e,n){var o,r,i,u,d,c,m,v,f,C,M,P,O,L,W,G,j,T,q,z,B;const Y=t[_],H=await l.get(`/items/navarch_assay_lot?filter[${w}]=${a}&filter[foreign_key]=${Y}&filter[_and][0][_or][0][method][_eq]=Inturn&filter[_and][0][_or][1][_and][0][lot_number][_nnull]=true&filter[_and][0][_or][1][_and][1][method][_eq]=Outturn`,{params:{fields:[w,"method","final_assay","lot_number",b,"dry_weight",$]}});""===s.value&&(s.value=H.data.data[0][b]);const K=function(t){const a={outturn:null,inturn:null};if(!t)return a;const e=function(t){const a={Inturn:{},Outturn:{}};return t.forEach((t=>{var e;a[t.method]&&(a[t.method][t.commodity]?null==(e=a[t.method][t.commodity])||e.push(t):a[t.method][t.commodity]=[t])})),[...Object.values(a.Inturn),...Object.values(a.Outturn)]}(t);let n=null;for(const t of e)n=1!==t.length||S(t[0])?k(t):J(t[0]),null!=n&&("Inturn"===n.method?a.inturn=n:"Outturn"===n.method&&(a.outturn=n));return a}(H.data.data),Q=t[g];let X;Q&&(X=await l.get(`/items/navarch_vessel/${Q}`,{params:{fields:[p]}}));const Z=await l.get(`/items/navarch_world_port/${t[h]}`,{params:{fields:[y,"country"]}}),tt=I(null==(o=K.inturn)?void 0:o.total_dry_weight,null==(r=K.outturn)?void 0:r.total_dry_weight),at=I(null==(i=K.inturn)?void 0:i.final_assay,null==(u=K.outturn)?void 0:u.final_assay),et=I(null==(d=K.inturn)?void 0:d.total_metal,null==(c=K.outturn)?void 0:c.total_metal),nt=await R(H.data.data[0][$],n),ot=await async function(t,a){if(null==t||null==a)return 1;if(t===a)return 1;const e=await l.get(`/items/${D}?filter[${U}]=${t}`,{params:{fields:[E]}});if(0===e.data.data.length||void 0===e.data.data[0][E]||null===e.data.data[0][E])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for source weight unit ${t}. Ensure that the symbol is correct and is a weight unit symbol`);const n=await l.get(`/items/${D}?filter[${U}]=${a}`,{params:{fields:[E]}});if(0===n.data.data.length||void 0===n.data.data[0][E]||null===n.data.data[0][E])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for the target weight unit ${a}. Ensure that the symbol is correct and is a weight unit symbol`);const o=parseFloat(e.data.data[0][E]);if(isNaN(o))throw new Error(`[getAssayUnitConversionValue] source weight unit ${t} conversion value=${o} is not a number`);console.log(`[getAssayUnitConversionValue] source unit conversion value=${o}`);const r=parseFloat(n.data.data[0][E]);if(isNaN(r))throw new Error(`[getAssayUnitConversionValue] target weight unit ${t} conversion value=${r} is not a number`);return console.log(`[getAssayUnitConversionValue] target unit conversion value=${r}`),console.log("[getAssayUnitConversionValue] returning "+o/r),o/r}(H.data.data[0][b],s.value),rt=await async function(t,a,e){const n=await l.get(`/items/${A}?filter[${F}]=${a}`,{params:{fields:[V]}});if(!n.data.data||!n.data.data[0]||!n.data.data[0][V])throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] Dry weight uom not found for symbol ${a}`);const o=n.data.data[0][V];if("%"===e)return o===t?.01:await R(o,t);let r=e.split("/");if(1==r.length){const t=await async function(t){const a=await l.get(`/items/${D}`,{params:{fields:[U,N],filter:{[N]:{_nnull:!0},[U]:{_eq:t}}}});if(200!==a.status||!a.data||0===a.data.data.length)throw new Error("[getAssayUnitComposition] no assay units found with composition");return a.data.data[0][N]}(e);if(!t)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${e} does not have a composition`);r=t.split("/")}if(r.length>2||0===r.length)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${e} is not in the format of 'unit1/unit2'`);const i=r[0],s=r[1];let u=1;if(s!==o){const t=await R(o,s);if(isNaN(t)||0===t)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] conversion value=${t} for original weight unit ${o} and assay unit denominator ${s} is not a number or is zero`);u*=t}if(i!==t){const a=await R(i,t);if(isNaN(a)||0===a)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] conversion value=${a} for evaluated contained metal uom ${i} and target weight unit ${t} is not a number or is zero`);u*=a}return console.log(`[getConversionValuesAndUnitsForPayableMetalCalculation] returning conversion value=${u}`),u}(e,H.data.data[0][$],H.data.data[0][b]);return{id:t.id,name:t.shipment_code,vessel:`${null!=(v=null==(m=null==X?void 0:X.data)?void 0:m.data[p])?v:"No vessel name found"}`,port:`${null!=(f=Z.data.data[y])?f:"No port found"}`,shipment_date:x(new Date(t.actual_shipment_date)),dry_weight:{loadport:(null!=(M=null==(C=K.inturn)?void 0:C.total_dry_weight)?M:0)*nt,disport:(null!=(O=null==(P=K.outturn)?void 0:P.total_dry_weight)?O:0)*nt,variance:tt.variance,variance_percent:tt.variance_percent},grade:{loadport:(null!=(W=null==(L=K.inturn)?void 0:L.final_assay)?W:0)*ot,disport:(null!=(j=null==(G=K.outturn)?void 0:G.final_assay)?j:0)*ot,variance:at.variance,variance_percent:at.variance_percent},metal:{loadport:(null!=(q=null==(T=K.inturn)?void 0:T.total_metal)?q:0)*rt,disport:(null!=(B=null==(z=K.outturn)?void 0:z.total_metal)?B:0)*rt,variance:et.variance,variance_percent:et.variance_percent},metal_uom:e,gain_loss:et.variance_percent>0?"Gain":"Loss"}}function I(t,a){if(null==t)throw new Error("Loadport (Inturn) assays must be defined as composite assays");if(null==a)throw new Error("Disport (Outturn) assays must be defined as assay lots");const e=a-t;return{variance:e,variance_percent:e/t*100}}function J(t){if(!t)return null;return{method:t.method,commodity:t.commodity,assay_uom:t.assay_uom,total_metal:t.dry_weight*t.final_assay,final_assay:t.final_assay,total_dry_weight:t.dry_weight}}function W(t){return!!t}function k(t){if(!t)return null;const a=t.filter(S).filter(W);if(0===a.length)return null;const e=a[0];let n={method:e.method,commodity:e.commodity,assay_uom:e.assay_uom,final_assay:0,total_metal:0,total_dry_weight:0};return a.forEach((t=>{n.total_metal=G(n.total_metal)+G(t.final_assay)*G(t.dry_weight),n.total_dry_weight=G(n.total_dry_weight)+G(t.dry_weight)})),n.final_assay=G(n.total_metal)/n.total_dry_weight,n}function G(t,a){return!t||Number.isNaN(t)?null!=a?a:0:t}function S(t){return!!t&&!(!("lot_number"in t)||!t.lot_number)}function j(t){const a=t.getDay(),e=t.getDate(),n=t.getMonth(),o=t.getFullYear();return`${["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"][a]}, ${["January","February","March","April","May","June","July","August","September","October","November","December"][n]} ${e}, ${o}`}function x(t){const a=t.getDate(),e=t.getMonth(),n=t.getFullYear();return`${a} ${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][e]} ${n}`}async function R(t,a){if(t===a)return 1;const e=await l.get(`/items/${A}?filter[${V}]=${t}`,{params:{fields:[P]}});if(0===e.data.data.length||null===e.data.data[0][P]||void 0===e.data.data[0][P])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for source weight unit ${t}. Ensure that the symbol is correct and is a weight unit symbol`);const n=await l.get(`/items/${A}?filter[${V}]=${a}`,{params:{fields:[P]}});if(0===n.data.data.length||null===n.data.data[0][P]||void 0===n.data.data[0][P])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for the target weight unit ${a}. Ensure that the symbol is correct and is a weight unit symbol`);const o=parseFloat(e.data.data[0][P]);if(isNaN(o))throw new Error(`[getWeightUnitConversionValue] source weight unit ${t} conversion value=${o} is not a number`);const r=parseFloat(n.data.data[0][P]);if(isNaN(r))throw new Error(`[getWeightUnitConversionValue] target weight unit ${a} conversion value=${r} is not a number`);return console.log(`[getWeightUnitConversionValue] source weight unit=${t}, target weight unit=${a}, source weight unit conversion=${o}, target weight unit conversion=${r}`),console.log("[getWeightUnitConversionValue] conversion factor="+o/r),o/r}}});const h={key:0},_={key:1};g.render=function(t,a,e,n,o,g){const p=r("v-button"),y=r("v-notice");return i(),s(l,null,[u(' <input :value="value" @input="handleChange($event.target.value)" /> '),u(" create a button only interface for Directus"),t.value?(i(),s("div",_,[d(p,{class:"margin-top-16px",onClick:a[1]||(a[1]=()=>t.viewPdf())},{default:c((()=>[m("View Loadport-Disport Doc ")])),_:1})])):(i(),s("div",h,[d(p,{class:"margin-top-16px",onClick:a[0]||(a[0]=()=>t.generatePdf()),loading:t.isGeneraingDoc},{default:c((()=>[m("Generate Loadport-Disport Doc")])),_:1},8,["loading"]),t.failureReason?(i(),v(y,{key:0},{default:c((()=>[m(f(t.failureReason),1)])),_:1})):u("v-if",!0)]))],2112)},g.__file="src/interface.vue";var p=a({id:"navarch-loadport-disport-generator",name:"Loadport-Disport Comparison Doc Generator",icon:"receipt_long",description:"This is a custom interface for Navarch's Loadport-Disport Comparison Document Generator Button.",component:g,options:null,types:["json"],group:"standard"});export{p as default};
