import{useApi as t,defineInterface as a}from"@directus/extensions-sdk";import{defineComponent as e,ref as n,inject as o,resolveComponent as r,openBlock as i,createElementBlock as s,Fragment as l,createCommentVNode as u,createVNode as d,withCtx as c,createTextVNode as m,createBlock as f,toDisplayString as g}from"vue";var v=e({props:{value:{type:String,default:null}},emits:["input"],setup(a,{emit:e}){const r=n(""),i=n(""),s=t(),l=o("values",n({})),u="id",d="name",c="code",m="contract",f="actual_shipment_date",g="vessel",v="destination",h="assay_results",_="name",p="port_name",y="commodity",w="dry_weight_uom",$="assay_uom",b="price_per_uom",C="navarch_assay_unit",D="unit",N="conversion_to_ppb",U="composition",E="navarch_unit",A="symbol",V="dry_symbol",F="unit",M="conversionToGram";return{failureReason:r,generatePdf:async function(){var t,a;try{const n=l.value.metal,o=l.value.start_date,_=l.value.end_date;if(!n)return void(r.value="Metal not selected");if(!o)return void(r.value="Start date not selected");if(!_)return void(r.value="End date not selected");const p=await s.get(`/items/navarch_commodity/${n}`,{params:{fields:[c,d]}}),y=await s.get(`/items/navarch_parcel?filter[_and][0][_and][0][${f}][_between][0]=${o}&filter[_and][0][_and][0][${f}][_between][1]=${_}`,{params:{fields:[u,"shipment_code",g,v,f,h,"weight_result",m]}});if(0===y.data.data.length)return void(r.value=`No parcels found for actual shipment date within the date range ${o} to ${_}`);const w=y.data.data[0][m],$=await s.get(`/items/navarch_contract/${w}`,{params:{fields:["weight_uom"]}});console.log(`[generateLoadportDisportComparisonDoc] contract=${JSON.stringify($.data.data)} for contract Id=${w} and parcel id=${y.data.data[0][u]}`);const C=await s.get(`/items/${E}/${$.data.data.weight_uom}`,{params:{fields:[V,F]}}),D=null!=(t=C.data.data[V])?t:"",N=(null==(a=C.data.data[F])?void 0:a.split(" ").map((t=>t[0].toUpperCase())).join(""))+"s",U=await s.get(`/items/navarch_commodity_in_contract?filter[contract]=${w}&filter[commodity]=${n}`,{params:{fields:[b]}});if(0===U.data.data.length||!U.data.data[0][b])return void(r.value=`Commodity ${n} not found in contract ${w} or does not have a Base Price Per UOM set`);console.log(`[generateLoadportDisportComparisonDoc] commodity in contract response=${JSON.stringify(U.data.data)} for contract Id=${w} and parcel id=${y.data.data[0][u]}`);const M=(await s.get(`/items/${E}/${U.data.data[0][b]}`,{params:{fields:[A]}})).data.data[A],O=[];for(const t of y.data.data){const a=await P(t,p.data.data[c],M,D);O.push(a)}const J={start_date:k(new Date(o)),end_date:k(new Date(_)),metal:p.data.data[d],assay_uom:i.value,dry_weight_uom:D.toUpperCase(),dry_weight_uom_name:N,parcels:O},L=await s.post("/generate/loadport-disport-compare",J);if(200!==L.status)return console.log(`[generateLoadportDisportComparisonDoc] response status: ${L.status}`),void(r.value=L.data);const S=L.data;e("input",{...J,doc_name:S})}catch(t){console.error("[generateProvWeightAndAssay] error=",t),r.value=t}},viewPdf:function(){const t=JSON.parse(a.value).doc_name;console.log(`[viewPdf] doc name: ${t}`);const e=`/display-doc?filepath=${encodeURIComponent(`/data/uploads/${t}.pdf`)}`;window.open(e)}};async function P(t,a,e,n){var o,r,l,u,d,c,m,f,b,F,M,P,L,I,k,x,R,T,q,z;const B=t[h],Y=await s.get(`/items/navarch_assay_lot?filter[${y}]=${a}&filter[foreign_key]=${B}&filter[_and][0][_or][0][method][_eq]=Inturn&filter[_and][0][_or][1][_and][0][lot_number][_nnull]=true&filter[_and][0][_or][1][_and][1][method][_eq]=Outturn`,{params:{fields:[y,"method","final_assay","lot_number",$,"dry_weight",w]}});""===i.value&&(i.value=Y.data.data[0][$]);const H=function(t){const a={outturn:null,inturn:null};if(!t)return a;const e=function(t){const a={Inturn:{},Outturn:{}};return t.forEach((t=>{var e;a[t.method]&&(a[t.method][t.commodity]?null==(e=a[t.method][t.commodity])||e.push(t):a[t.method][t.commodity]=[t])})),[...Object.values(a.Inturn),...Object.values(a.Outturn)]}(t);let n=null;for(const t of e)n=1!==t.length||W(t[0])?S(t):J(t[0]),null!=n&&("Inturn"===n.method?a.inturn=n:"Outturn"===n.method&&(a.outturn=n));return a}(Y.data.data),K=t[g],Q=await s.get(`/items/navarch_vessel/${K}`,{params:{fields:[_]}}),X=await s.get(`/items/navarch_world_port/${t[v]}`,{params:{fields:[p,"country"]}}),Z=O(null==(o=H.inturn)?void 0:o.total_dry_weight,null==(r=H.outturn)?void 0:r.total_dry_weight),tt=O(null==(l=H.inturn)?void 0:l.final_assay,null==(u=H.outturn)?void 0:u.final_assay),at=O(null==(d=H.inturn)?void 0:d.total_metal,null==(c=H.outturn)?void 0:c.total_metal),et=await j(Y.data.data[0][w],n),nt=await async function(t,a){if(null==t||null==a)return 1;if(t===a)return 1;const e=await s.get(`/items/${C}?filter[${D}]=${t}`,{params:{fields:[N]}});if(0===e.data.data.length||void 0===e.data.data[0][N]||null===e.data.data[0][N])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for source weight unit ${t}. Ensure that the symbol is correct and is a weight unit symbol`);const n=await s.get(`/items/${C}?filter[${D}]=${a}`,{params:{fields:[N]}});if(0===n.data.data.length||void 0===n.data.data[0][N]||null===n.data.data[0][N])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for the target weight unit ${a}. Ensure that the symbol is correct and is a weight unit symbol`);const o=parseFloat(e.data.data[0][N]);if(isNaN(o))throw new Error(`[getAssayUnitConversionValue] source weight unit ${t} conversion value=${o} is not a number`);console.log(`[getAssayUnitConversionValue] source unit conversion value=${o}`);const r=parseFloat(n.data.data[0][N]);if(isNaN(r))throw new Error(`[getAssayUnitConversionValue] target weight unit ${t} conversion value=${r} is not a number`);return console.log(`[getAssayUnitConversionValue] target unit conversion value=${r}`),console.log("[getAssayUnitConversionValue] returning "+o/r),o/r}(Y.data.data[0][$],i.value),ot=await async function(t,a,e){const n=await s.get(`/items/${E}?filter[${V}]=${a}`,{params:{fields:[A]}});if(!n.data.data||!n.data.data[0]||!n.data.data[0][A])throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] Dry weight uom not found for symbol ${a}`);const o=n.data.data[0][A];if("%"===e)return o===t?.01:await j(o,t);let r=e.split("/");if(1==r.length){const t=await async function(t){const a=await s.get(`/items/${C}`,{params:{fields:[D,U],filter:{[U]:{_nnull:!0},[D]:{_eq:t}}}});if(200!==a.status||!a.data||0===a.data.data.length)throw new Error("[getAssayUnitComposition] no assay units found with composition");return a.data.data[0][U]}(e);if(!t)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${e} does not have a composition`);r=t.split("/")}if(r.length>2||0===r.length)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${e} is not in the format of 'unit1/unit2'`);const i=r[0],l=r[1];let u=1;if(l!==o){const t=await j(o,l);if(isNaN(t)||0===t)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] conversion value=${t} for original weight unit ${o} and assay unit denominator ${l} is not a number or is zero`);u*=t}if(i!==t){const a=await j(i,t);if(isNaN(a)||0===a)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] conversion value=${a} for evaluated contained metal uom ${i} and target weight unit ${t} is not a number or is zero`);u*=a}return console.log(`[getConversionValuesAndUnitsForPayableMetalCalculation] returning conversion value=${u}`),u}(e,Y.data.data[0][w],Y.data.data[0][$]);return{id:t.id,name:t.shipment_code,vessel:`${null!=(m=Q.data.data[_])?m:"No vessel name found"}`,port:`${null!=(f=X.data.data[p])?f:"No port found"}`,shipment_date:G(new Date(t.actual_shipment_date)),dry_weight:{loadport:(null!=(F=null==(b=H.inturn)?void 0:b.total_dry_weight)?F:0)*et,disport:(null!=(P=null==(M=H.outturn)?void 0:M.total_dry_weight)?P:0)*et,variance:Z.variance,variance_percent:Z.variance_percent},grade:{loadport:(null!=(I=null==(L=H.inturn)?void 0:L.final_assay)?I:0)*nt,disport:(null!=(x=null==(k=H.outturn)?void 0:k.final_assay)?x:0)*nt,variance:tt.variance,variance_percent:tt.variance_percent},metal:{loadport:(null!=(T=null==(R=H.inturn)?void 0:R.total_metal)?T:0)*ot,disport:(null!=(z=null==(q=H.outturn)?void 0:q.total_metal)?z:0)*ot,variance:at.variance,variance_percent:at.variance_percent},metal_uom:e,gain_loss:at.variance_percent>0?"Gain":"Loss"}}function O(t,a){if(null==t)throw new Error("Loadport (Inturn) assays must be defined as composite assays");if(null==a)throw new Error("Disport (Outturn) assays must be defined as assay lots");const e=a-t;return{variance:e,variance_percent:e/t*100}}function J(t){if(!t)return null;return{method:t.method,commodity:t.commodity,assay_uom:t.assay_uom,total_metal:t.dry_weight*t.final_assay,final_assay:t.final_assay,total_dry_weight:t.dry_weight}}function L(t){return!!t}function S(t){if(!t)return null;const a=t.filter(W).filter(L);if(0===a.length)return null;const e=a[0];let n={method:e.method,commodity:e.commodity,assay_uom:e.assay_uom,final_assay:0,total_metal:0,total_dry_weight:0};return a.forEach((t=>{n.total_metal=I(n.total_metal)+I(t.final_assay)*I(t.dry_weight),n.total_dry_weight=I(n.total_dry_weight)+I(t.dry_weight)})),n.final_assay=I(n.total_metal)/n.total_dry_weight,n}function I(t,a){return!t||Number.isNaN(t)?null!=a?a:0:t}function W(t){return!!t&&!(!("lot_number"in t)||!t.lot_number)}function k(t){const a=t.getDay(),e=t.getDate(),n=t.getMonth(),o=t.getFullYear();return`${["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"][a]}, ${["January","February","March","April","May","June","July","August","September","October","November","December"][n]} ${e}, ${o}`}function G(t){const a=t.getDate(),e=t.getMonth(),n=t.getFullYear();return`${a} ${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][e]} ${n}`}async function j(t,a){if(t===a)return 1;const e=await s.get(`/items/${E}?filter[${A}]=${t}`,{params:{fields:[M]}});if(0===e.data.data.length||null===e.data.data[0][M]||void 0===e.data.data[0][M])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for source weight unit ${t}. Ensure that the symbol is correct and is a weight unit symbol`);const n=await s.get(`/items/${E}?filter[${A}]=${a}`,{params:{fields:[M]}});if(0===n.data.data.length||null===n.data.data[0][M]||void 0===n.data.data[0][M])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for the target weight unit ${a}. Ensure that the symbol is correct and is a weight unit symbol`);const o=parseFloat(e.data.data[0][M]);if(isNaN(o))throw new Error(`[getWeightUnitConversionValue] source weight unit ${t} conversion value=${o} is not a number`);const r=parseFloat(n.data.data[0][M]);if(isNaN(r))throw new Error(`[getWeightUnitConversionValue] target weight unit ${a} conversion value=${r} is not a number`);return console.log(`[getWeightUnitConversionValue] source weight unit=${t}, target weight unit=${a}, source weight unit conversion=${o}, target weight unit conversion=${r}`),console.log("[getWeightUnitConversionValue] conversion factor="+o/r),o/r}}});const h={key:0},_={key:1};v.render=function(t,a,e,n,o,v){const p=r("v-button"),y=r("v-notice");return i(),s(l,null,[u(' <input :value="value" @input="handleChange($event.target.value)" /> '),u(" create a button only interface for Directus"),t.value?(i(),s("div",_,[d(p,{class:"margin-top-16px",onClick:a[1]||(a[1]=()=>t.viewPdf())},{default:c((()=>[m("View Loadport-Disport Doc ")])),_:1})])):(i(),s("div",h,[d(p,{class:"margin-top-16px",onClick:a[0]||(a[0]=()=>t.generatePdf())},{default:c((()=>[m("Generate Loadport-Disport Doc")])),_:1}),t.failureReason?(i(),f(y,{key:0},{default:c((()=>[m(g(t.failureReason),1)])),_:1})):u("v-if",!0)]))],2112)},v.__file="src/interface.vue";var p=a({id:"navarch-loadport-disport-generator",name:"Loadport-Disport Comparison Doc Generator",icon:"receipt_long",description:"This is a custom interface for Navarch's Loadport-Disport Comparison Document Generator Button.",component:v,options:null,types:["json"],group:"standard"});export{p as default};
