import{useApi as t,defineInterface as a}from"@directus/extensions-sdk";import{defineComponent as e,ref as n,inject as o,resolveComponent as r,openBlock as i,createElementBlock as s,Fragment as l,createCommentVNode as u,createVNode as d,withCtx as c,createTextVNode as m,createBlock as f,toDisplayString as p}from"vue";var v=e({props:{value:{type:Object,default:null}},emits:["input"],setup(a,{emit:e}){const r=n(""),i=n(!1),s=n(!1),l=n(""),u=t(),d=o("values",n({})),c="logo",m="id",f="name",p="code",v="contract",g="bl_date",y="vessel",_="destination",h="assay_results",w="name",$="port_name",b="commodity",C="dry_weight_uom",D="assay_uom",A="price_per_uom",N="navarch_assay_unit",E="unit",U="conversion_to_ppb",V="composition",F="navarch_unit",O="symbol",P="dry_symbol",M="unit",S="conversionToGram";return{isGeneraingDoc:i,failureReason:r,generatePdf:async function(){var t,a,n;r.value="",i.value=!0;try{i.value=!0;const o=d.value.metal,s=d.value.start_date,w=d.value.end_date;if(!o)return r.value="Metal not selected",void(i.value=!1);if(!s)return r.value="Start date not selected",void(i.value=!1);if(!w)return r.value="End date not selected",void(i.value=!1);const $=await u.get(`/items/navarch_commodity/${o}`,{params:{fields:[p,f]}}),b=await u.get(`/items/navarch_parcel?filter[_and][0][_and][0][${g}][_between][0]=${s}&filter[_and][0][_and][0][${g}][_between][1]=${w}`,{params:{fields:[m,"shipment_code",y,_,g,h,"weight_result",v]}});if(0===b.data.data.length)return r.value=`No parcels found for actual shipment date within the date range ${s} to ${w}`,void(i.value=!1);const C=b.data.data[0][v],D=await u.get(`/items/navarch_contract/${C}`,{params:{fields:["weight_uom"]}});console.log(`[generateLoadportDisportComparisonDoc] contract=${JSON.stringify(D.data.data)} for contract Id=${C} and parcel id=${b.data.data[0][m]}`);const N=await u.get(`/items/${F}/${D.data.data.weight_uom}`,{params:{fields:[P,M]}}),E=null!=(t=N.data.data[P])?t:"",U=(null==(a=N.data.data[M])?void 0:a.split(" ").map((t=>t[0].toUpperCase())).join(""))+"s",V=await u.get(`/items/navarch_commodity_in_contract?filter[contract]=${C}&filter[commodity]=${o}`,{params:{fields:[A]}});if(0===V.data.data.length||!V.data.data[0][A])return r.value=`Commodity ${o} not found in contract ${C} or does not have a Base Price Per UOM set`,void(i.value=!1);console.log(`[generateLoadportDisportComparisonDoc] commodity in contract response=${JSON.stringify(V.data.data)} for contract Id=${C} and parcel id=${b.data.data[0][m]}`);const S=(await u.get(`/items/${F}/${V.data.data[0][A]}`,{params:{fields:[O]}})).data.data[O],k=[];for(const t of b.data.data){const a=await T(t,$.data.data[p],S,E);k.push(a)}const x={company_logo:null!=(n=(await u.get("/items/navarch_company",{params:{fields:[c]}})).data.data[c])?n:void 0,start_date:W(new Date(s)),end_date:W(new Date(w)),metal:$.data.data[f],assay_uom:l.value,dry_weight_uom:E.toUpperCase(),dry_weight_uom_name:U,parcels:k},j=await u.post("/generate/loadport-disport-compare",x);if(200!==j.status)return console.log(`[generateLoadportDisportComparisonDoc] response status: ${j.status}`),r.value=j.data,void(i.value=!1);const I=await async function(t){const a=function(t){console.log("[convertJsonToFormData] json=",JSON.stringify(t));const a=new FormData;for(let e in t)"file"!==e&&a.append(e,t[e]);const e=t.file,n=function(t,a){const e=atob(t),n=new ArrayBuffer(e.length),o=new Uint8Array(n);for(let t=0;t<e.length;t++)o[t]=e.charCodeAt(t);const r=new Blob([o],{type:a});return r}(e,"application/pdf");return a.append("file",n,`${t.filename_download}.pdf`),a}(t),e=await u.post("/files",a,{headers:{"Content-Type":"multipart/form-data"}});if(200!==e.status)throw console.error(`[uploadGeneratedDoc] uploadedFileData status: ${e.status}`),new Error("A failure occured while trying to upload the generated document. Please try again.");return e.data.data.id}(j.data);e("input",{...x,doc_name:I}),i.value=!1,J(I)}catch(t){console.error("[generateProvWeightAndAssay] error=",t),r.value=t,i.value=!1}},isCopying:s,copy:async function(){s.value=!0;const{id:t,user_created:a,date_created:e,user_updated:n,date_updated:o,loadport_disport_doc:i,...l}=d.value;console.log(`[loadport disport::copy] requestBody=${JSON.stringify(l)}`);const c=await u.post("/items/navarch_loadport_disport",l);if(200!==c.status)return console.log(`[loadport disport::copy] copy response status: ${c.status}`),void(r.value=`Failed to duplicate loadport disport with status ${c.status}`);s.value=!1,window.open(`/admin/content/navarch_loadport_disport/${c.data.data.id}`)},viewPdf:J};function J(t){const e=null!=t?t:a.value.doc_name;console.log(`[viewPdf] doc ID: ${e}`),window.open(`/assets/${e}?access_token=9TKZlOUjs29Svyop45nyyyN02lYPlX_x`)}async function T(t,a,e,n){var o,r,i,s,d,c,m,f,p,v,g,A,M,S,J,T,j,L,W,R,Y;const z=t[h],K=await u.get(`/items/navarch_assay_lot?filter[${b}]=${a}&filter[foreign_key]=${z}&filter[_and][0][_or][0][method][_eq]=Inturn&filter[_and][0][_or][1][_and][0][lot_number][_nnull]=true&filter[_and][0][_or][1][_and][1][method][_eq]=Outturn`,{params:{fields:[b,"method","final_assay","lot_number",D,"dry_weight",C]}});""===l.value&&(l.value=K.data.data[0][D]);const X=function(t){const a={outturn:null,inturn:null};if(!t)return a;const e=function(t){const a={Inturn:{},Outturn:{}};return t.forEach((t=>{var e;a[t.method]&&(a[t.method][t.commodity]?null==(e=a[t.method][t.commodity])||e.push(t):a[t.method][t.commodity]=[t])})),[...Object.values(a.Inturn),...Object.values(a.Outturn)]}(t);let n=null;for(const t of e)n=1!==t.length||G(t[0])?I(t):x(t[0]),null!=n&&("Inturn"===n.method?a.inturn=n:"Outturn"===n.method&&(a.outturn=n));return a}(K.data.data),Z=t[y];let H;Z&&(H=await u.get(`/items/navarch_vessel/${Z}`,{params:{fields:[w]}}));const Q=await u.get(`/items/navarch_world_port/${t[_]}`,{params:{fields:[$,"country"]}}),tt=k(null==(o=X.inturn)?void 0:o.total_dry_weight,null==(r=X.outturn)?void 0:r.total_dry_weight),at=k(null==(i=X.inturn)?void 0:i.final_assay,null==(s=X.outturn)?void 0:s.final_assay),et=k(null==(d=X.inturn)?void 0:d.total_metal,null==(c=X.outturn)?void 0:c.total_metal),nt=await q(K.data.data[0][C],n),ot=await async function(t,a){if(null==t||null==a)return 1;if(t===a)return 1;const e=await u.get(`/items/${N}?filter[${E}]=${t}`,{params:{fields:[U]}});if(0===e.data.data.length||void 0===e.data.data[0][U]||null===e.data.data[0][U])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for source weight unit ${t}. Ensure that the symbol is correct and is a weight unit symbol`);const n=await u.get(`/items/${N}?filter[${E}]=${a}`,{params:{fields:[U]}});if(0===n.data.data.length||void 0===n.data.data[0][U]||null===n.data.data[0][U])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for the target weight unit ${a}. Ensure that the symbol is correct and is a weight unit symbol`);const o=parseFloat(e.data.data[0][U]);if(isNaN(o))throw new Error(`[getAssayUnitConversionValue] source weight unit ${t} conversion value=${o} is not a number`);console.log(`[getAssayUnitConversionValue] source unit conversion value=${o}`);const r=parseFloat(n.data.data[0][U]);if(isNaN(r))throw new Error(`[getAssayUnitConversionValue] target weight unit ${t} conversion value=${r} is not a number`);return console.log(`[getAssayUnitConversionValue] target unit conversion value=${r}`),console.log("[getAssayUnitConversionValue] returning "+o/r),o/r}(K.data.data[0][D],l.value),rt=await async function(t,a,e){const n=await u.get(`/items/${F}?filter[${P}]=${a}`,{params:{fields:[O]}});if(!n.data.data||!n.data.data[0]||!n.data.data[0][O])throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] Dry weight uom not found for symbol ${a}`);const o=n.data.data[0][O];if("%"===e)return o===t?.01:await q(o,t);let r=e.split("/");if(1==r.length){const t=await async function(t){const a=await u.get(`/items/${N}`,{params:{fields:[E,V],filter:{[V]:{_nnull:!0},[E]:{_eq:t}}}});if(200!==a.status||!a.data||0===a.data.data.length)throw new Error("[getAssayUnitComposition] no assay units found with composition");return a.data.data[0][V]}(e);if(!t)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${e} does not have a composition`);r=t.split("/")}if(r.length>2||0===r.length)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${e} is not in the format of 'unit1/unit2'`);const i=r[0],s=r[1];let l=1;if(s!==o){const t=await q(o,s);if(isNaN(t)||0===t)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] conversion value=${t} for original weight unit ${o} and assay unit denominator ${s} is not a number or is zero`);l*=t}if(i!==t){const a=await q(i,t);if(isNaN(a)||0===a)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] conversion value=${a} for evaluated contained metal uom ${i} and target weight unit ${t} is not a number or is zero`);l*=a}return console.log(`[getConversionValuesAndUnitsForPayableMetalCalculation] returning conversion value=${l}`),l}(e,K.data.data[0][C],K.data.data[0][D]);return{id:t.id,name:t.shipment_code,vessel:`${null!=(f=null==(m=null==H?void 0:H.data)?void 0:m.data[w])?f:"No vessel name found"}`,port:`${null!=(p=Q.data.data[$])?p:"No port found"}`,shipment_date:B(new Date(t.actual_shipment_date)),dry_weight:{loadport:(null!=(g=null==(v=X.inturn)?void 0:v.total_dry_weight)?g:0)*nt,disport:(null!=(M=null==(A=X.outturn)?void 0:A.total_dry_weight)?M:0)*nt,variance:tt.variance,variance_percent:tt.variance_percent},grade:{loadport:(null!=(J=null==(S=X.inturn)?void 0:S.final_assay)?J:0)*ot,disport:(null!=(j=null==(T=X.outturn)?void 0:T.final_assay)?j:0)*ot,variance:at.variance,variance_percent:at.variance_percent},metal:{loadport:(null!=(W=null==(L=X.inturn)?void 0:L.total_metal)?W:0)*rt,disport:(null!=(Y=null==(R=X.outturn)?void 0:R.total_metal)?Y:0)*rt,variance:et.variance,variance_percent:et.variance_percent},metal_uom:e,gain_loss:et.variance_percent>0?"Gain":"Loss"}}function k(t,a){if(null==t)throw new Error("Loadport (Inturn) assays must be defined as composite assays");if(null==a)throw new Error("Disport (Outturn) assays must be defined as assay lots");const e=a-t;return{variance:e,variance_percent:e/t*100}}function x(t){if(!t)return null;return{method:t.method,commodity:t.commodity,assay_uom:t.assay_uom,total_metal:t.dry_weight*t.final_assay,final_assay:t.final_assay,total_dry_weight:t.dry_weight}}function j(t){return!!t}function I(t){if(!t)return null;const a=t.filter(G).filter(j);if(0===a.length)return null;const e=a[0];let n={method:e.method,commodity:e.commodity,assay_uom:e.assay_uom,final_assay:0,total_metal:0,total_dry_weight:0};return a.forEach((t=>{n.total_metal=L(n.total_metal)+L(t.final_assay)*L(t.dry_weight),n.total_dry_weight=L(n.total_dry_weight)+L(t.dry_weight)})),n.final_assay=L(n.total_metal)/n.total_dry_weight,n}function L(t,a){return!t||Number.isNaN(t)?null!=a?a:0:t}function G(t){return!!t&&!(!("lot_number"in t)||!t.lot_number)}function W(t){const a=t.getDay(),e=t.getDate(),n=t.getMonth(),o=t.getFullYear();return`${["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"][a]}, ${["January","February","March","April","May","June","July","August","September","October","November","December"][n]} ${e}, ${o}`}function B(t){const a=t.getDate(),e=t.getMonth(),n=t.getFullYear();return`${a} ${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][e]} ${n}`}async function q(t,a){if(t===a)return 1;const e=await u.get(`/items/${F}?filter[${O}]=${t}`,{params:{fields:[S]}});if(0===e.data.data.length||null===e.data.data[0][S]||void 0===e.data.data[0][S])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for source weight unit ${t}. Ensure that the symbol is correct and is a weight unit symbol`);const n=await u.get(`/items/${F}?filter[${O}]=${a}`,{params:{fields:[S]}});if(0===n.data.data.length||null===n.data.data[0][S]||void 0===n.data.data[0][S])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for the target weight unit ${a}. Ensure that the symbol is correct and is a weight unit symbol`);const o=parseFloat(e.data.data[0][S]);if(isNaN(o))throw new Error(`[getWeightUnitConversionValue] source weight unit ${t} conversion value=${o} is not a number`);const r=parseFloat(n.data.data[0][S]);if(isNaN(r))throw new Error(`[getWeightUnitConversionValue] target weight unit ${a} conversion value=${r} is not a number`);return console.log(`[getWeightUnitConversionValue] source weight unit=${t}, target weight unit=${a}, source weight unit conversion=${o}, target weight unit conversion=${r}`),console.log("[getWeightUnitConversionValue] conversion factor="+o/r),o/r}}});const g={key:0},y={key:1};var _=[],h=[];!function(t,a){if(t&&"undefined"!=typeof document){var e,n=!0===a.prepend?"prepend":"append",o=!0===a.singleTag,r="string"==typeof a.container?document.querySelector(a.container):document.getElementsByTagName("head")[0];if(o){var i=_.indexOf(r);-1===i&&(i=_.push(r)-1,h[i]={}),e=h[i]&&h[i][n]?h[i][n]:h[i][n]=s()}else e=s();65279===t.charCodeAt(0)&&(t=t.substring(1)),e.styleSheet?e.styleSheet.cssText+=t:e.appendChild(document.createTextNode(t))}function s(){var t=document.createElement("style");if(t.setAttribute("type","text/css"),a.attributes)for(var e=Object.keys(a.attributes),o=0;o<e.length;o++)t.setAttribute(e[o],a.attributes[e[o]]);var i="prepend"===n?"afterbegin":"beforeend";return r.insertAdjacentElement(i,t),t}}(".margin-top-16px[data-v-64969d30] {\n  margin-top: 16px;\n}",{}),v.render=function(t,a,e,n,o,v){const _=r("v-button"),h=r("v-notice");return i(),s(l,null,[u(' <input :value="value" @input="handleChange($event.target.value)" /> '),u(" create a button only interface for Directus"),t.value?(i(),s("div",y,[d(_,{onClick:a[1]||(a[1]=()=>t.viewPdf())},{default:c((()=>[m("View Loadport-Disport Doc ")])),_:1})])):(i(),s("div",g,[d(_,{onClick:a[0]||(a[0]=()=>t.generatePdf()),loading:t.isGeneraingDoc},{default:c((()=>[m("Generate Loadport-Disport Doc")])),_:1},8,["loading"]),t.failureReason?(i(),f(h,{key:0},{default:c((()=>[m(p(t.failureReason),1)])),_:1})):u("v-if",!0)])),d(_,{class:"margin-top-16px",onClick:a[2]||(a[2]=()=>t.copy()),loading:t.isCopying},{default:c((()=>[m("Copy")])),_:1},8,["loading"])],64)},v.__scopeId="data-v-64969d30",v.__file="src/interface.vue";var w=a({id:"navarch-loadport-disport-generator",name:"Loadport-Disport Comparison Doc Generator",icon:"receipt_long",description:"This is a custom interface for Navarch's Loadport-Disport Comparison Document Generator Button.",component:v,options:null,types:["json"],group:"standard"});export{w as default};
