import{useApi as a,defineInterface as t}from"@directus/extensions-sdk";import{defineComponent as e,ref as n,inject as r,resolveComponent as o,openBlock as i,createElementBlock as s,Fragment as d,createCommentVNode as l,createVNode as c,withCtx as u,createTextVNode as m,createBlock as p,toDisplayString as f}from"vue";var g=e({props:{value:{type:Object,default:null}},emits:["input"],setup(t,{emit:e}){const o=n(""),i=a(),s=r("values",n({})),d="foreign_key",l="lot_number",c="method",u="contract",m="shipment_code",p="counterparty",f="assay_results",g="weight_result",_="bl_date",y="vessel",h="origin",$="destination",v="commodity",w="final_assay",b="assay_uom",N="dry_weight",x="wet_weight",A="wet_weight_uom",C="dry_weight_uom",P="name",E="name",k="name",I="line_1",O="line_2",W="city",U="state",D="country",F="zip",J="phone_code",R="phone_number",j="signatory_name",G="signatory_title",M="navarch_country",B="name",S="phone_code",T="navarch_world_port",z="port_name",V="country";return{failureReason:o,generatePdf:async function(){var a,t,n,r,q,H,K,L;try{const Q=s.value.parcel,X=await i.get(`/items/navarch_parcel/${Q}`,{params:{fields:["id",f,g,u,m,p,"actual_arrival_date",_,"invoice_date","estimated_shipment_date","actual_shipment_date",y,h,$]}}),Z=X.data.data[f],aa=X.data.data[g],ta=await i.get(`/items/navarch_assay_lot?filter[${d}]=${Z}&sort[]=${l}`,{params:{fields:[c,l,v,w,b]}}),ea=ta.data.data.reduce(((a,t)=>{const e=t[c],n=a.find((a=>a[0][c]===e));return n?n.push(t):a.push([t]),a}),[]),na=null!=(r=null!=(n=null!=(t=null!=(a=ea.find((a=>"Outturn"===a[0][c])))?a:ea.find((a=>"Inturn Final"===a[0][c])))?t:ea.find((a=>"Inturn"===a[0][c])))?n:ea.find((a=>"Estimated"===a[0][c])))?r:ea.find((a=>"Planned"===a[0][c]));if(!na)throw new Error("No assay lots found in selected parcel");const ra=ta.data.data.map((a=>a.commodity)).filter(((a,t,e)=>e.indexOf(a)===t)),oa=ra.map(((a,t)=>`filter[_or][${t}][code]=${a}`)).join("&"),ia=await i.get(`/items/navarch_commodity?${oa}`,{params:{fields:["name","code"]}});console.log(`commodity mapping response: ${JSON.stringify(ia.data.data)}`);const sa=ia.data.data.reduce(((a,t)=>(a[t.code]=t.name,a)),{}),da=na.map((a=>({lotNumber:a[l],commodityName:sa[a[v]],commodityCode:a[v],analyticalAssay:a[w],assayUom:a[b]}))),la=da.filter((a=>null!==a.lotNumber)),ca=da.filter((a=>null===a.lotNumber&&void 0===la.find((t=>t.commodityCode===a.commodityCode)))),ua=(await i.get(`/items/navarch_weight_lot?filter[${d}]=${aa}&filter[${c}]=Inturn&sort[]=${l}`,{params:{fields:[c,l,N,x,A,C]}})).data.data.reduce(((a,t)=>{const e=t[c],n=a.find((a=>a[0][c]===e));return n?n.push(t):a.push([t]),a}),[]),ma=null!=(L=null!=(K=null!=(H=null!=(q=ua.find((a=>"Outturn"===a[0][c])))?q:ua.find((a=>"Inturn Final"===a[0][c])))?H:ua.find((a=>"Inturn"===a[0][c])))?K:ua.find((a=>"Estimated"===a[0][c])))?L:ua.find((a=>"Planned"===a[0][c]));if(!ma)throw new Error("No weight lots found in selected parcel");const pa=ma.map((a=>{var t,e,n;return{lotNumber:a[l],wetWeight:a[x],wetWeightUom:a[A],moisture:((null!=(t=a[x])?t:0)-(null!=(e=a[N])?e:0))/(null!=(n=a[x])?n:1)*100,moistureUom:"%",dryWeight:a[N],dryWeightUom:a[C]}})),fa=X.data.data[y],ga=await i.get(`/items/navarch_vessel/${fa}`,{params:{fields:[E]}}),_a=(await i.get("/items/navarch_company",{params:{fields:[k,I,O,W,U,F,D,J,R,"email",j,G]}})).data.data,ya=_a[k],ha=(await i.get(`/items/${M}/${_a[J]}`,{params:{fields:[S]}})).data.data[S],$a=_a[R],va=_a[I],wa=_a[O]?`,\n${_a[O]}`:"",ba=_a[W]?`,\n${_a[W]}`:"",Na=_a[U]?`,\n${_a[U]}`:"",xa=await i.get(`/items/${M}/${_a[D]}`,{params:{fields:[B]}}),Aa=xa.data.data[B]?`, ${xa.data.data[B]}`:"",Ca=`${va}${wa}${ba}${_a[F]?` ${_a[F]}`:""}${Na}${Aa}`,Pa={signatoryName:_a[j],signatoryTitle:_a[G],company:ya},Ea=await i.get(`/items/navarch_counterparty/${X.data.data[p]}`,{params:{fields:[P]}}),ka=await i.get(`/items/${T}/${X.data.data[h]}`,{params:{fields:[z,V]}}),Ia=await i.get(`/items/${T}/${X.data.data[$]}`,{params:{fields:[z,V]}}),Oa={seller:ya,seller_address:Ca,seller_phone_number:`+${ha} ${$a}`,buyer:Ea.data.data[P],vessel:ga.data.data[E],contract_ref:`${X.data.data[u]}`,bl_date:Y(new Date(X.data.data[_])),parcel_ref:`${X.data.data[m]} (#${X.data.data.id})`,port_of_loading:`${ka.data.data[z]}, ${ka.data.data[V]}`,port_of_discharge:`${Ia.data.data[z]}, ${Ia.data.data[V]}`,weights:pa,assays:la,composite_assays:ca,signatory:Pa},Wa=await i.post("/generate/assay-exchange",Oa);if(200!==Wa.status)return console.log(`[generateProvWeightAndAssay] invoice response status: ${Wa.status}`),void(o.value=Wa.data);const Ua=Wa.data;e("input",{...Oa,doc_name:Ua})}catch(a){console.error("[generateProvWeightAndAssay] error=",a),o.value=a}},viewPdf:function(){const a=t.value.doc_name;console.log(`[viewPdf] doc name: ${a}`);const e=`/display-doc?filepath=${encodeURIComponent(`/data/uploads/${a}.pdf`)}`;window.open(e)}};function Y(a){const t=a.getDate(),e=a.getMonth(),n=a.getFullYear();return`${t} ${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][e]} ${n}`}}});const _={key:0},y={key:1};g.render=function(a,t,e,n,r,g){const h=o("v-button"),$=o("v-notice");return i(),s(d,null,[l(' <input :value="value" @input="handleChange($event.target.value)" /> '),l(" create a button only interface for Directus"),a.value?(i(),s("div",y,[c(h,{class:"margin-top-16px",onClick:t[1]||(t[1]=()=>a.viewPdf())},{default:u((()=>[m("View Assay Exchange Cert ")])),_:1})])):(i(),s("div",_,[c(h,{class:"margin-top-16px",onClick:t[0]||(t[0]=()=>a.generatePdf())},{default:u((()=>[m("Generate Assay Exchange Cert")])),_:1}),a.failureReason?(i(),p($,{key:0},{default:u((()=>[m(f(a.failureReason),1)])),_:1})):l("v-if",!0)]))],2112)},g.__file="src/interface.vue";var h=t({id:"navarch-docgen-assay-exchange",name:"Navarch Assay Exchange Cert Generator Button",icon:"receipt_long",description:"This is a custom interface for Navarch's Assay Exchange Cert Generator Button.",component:g,options:null,types:["json"],group:"standard"});export{h as default};
