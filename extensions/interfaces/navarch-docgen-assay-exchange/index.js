import{useApi as a,defineInterface as t}from"@directus/extensions-sdk";import{defineComponent as e,ref as n,inject as r,resolveComponent as i,openBlock as s,createElementBlock as o,Fragment as d,createCommentVNode as l,createVNode as u,withCtx as c,createTextVNode as m,createBlock as f,toDisplayString as p}from"vue";var g=e({props:{value:{type:String,default:null}},emits:["input"],setup(t,{emit:e}){const i=n(""),s=a(),o=r("values",n({})),d="foreign_key",l="lot_number",u="method",c="contract",m="shipment_code",f="counterparty",p="assay_results",g="weight_result",_="bl_date",y="vessel",h="origin",$="destination",v="commodity",w="final_assay",b="assay_uom",N="dry_weight",x="wet_weight",A="wet_weight_uom",C="dry_weight_uom",E="name",P="name",k="name",W="line_1",I="line_2",O="city",D="state",F="country",J="zip",U="phone_code",G="phone_number",M="signatory_name",R="signatory_title",S="navarch_country",B="name",T="phone_code",j="navarch_world_port",z="port_name",V="country";return{failureReason:i,generatePdf:async function(){var a,t,n,r,q,H,K,L;try{const Q=o.value.parcel,X=await s.get(`/items/navarch_parcel/${Q}`,{params:{fields:["id",p,g,c,m,f,"actual_arrival_date",_,"invoice_date","estimated_shipment_date","actual_shipment_date",y,h,$]}}),Z=X.data.data[p],aa=X.data.data[g],ta=await s.get(`/items/navarch_assay_lot?filter[${d}]=${Z}&sort[]=${l}`,{params:{fields:[u,l,v,w,b]}}),ea=ta.data.data.reduce(((a,t)=>{const e=t[u],n=a.find((a=>a[0][u]===e));return n?n.push(t):a.push([t]),a}),[]),na=null!=(r=null!=(n=null!=(t=null!=(a=ea.find((a=>"Outturn"===a[0][u])))?a:ea.find((a=>"Inturn Final"===a[0][u])))?t:ea.find((a=>"Inturn"===a[0][u])))?n:ea.find((a=>"Estimated"===a[0][u])))?r:ea.find((a=>"Planned"===a[0][u]));if(!na)throw new Error("No assay lots found in selected parcel");const ra=ta.data.data.map((a=>a.commodity)).filter(((a,t,e)=>e.indexOf(a)===t)),ia=ra.map(((a,t)=>`filter[_or][${t}][code]=${a}`)).join("&"),sa=await s.get(`/items/navarch_commodity?${ia}`,{params:{fields:["name","code"]}});console.log(`commodity mapping response: ${JSON.stringify(sa.data.data)}`);const oa=sa.data.data.reduce(((a,t)=>(a[t.code]=t.name,a)),{}),da=na.map((a=>({lotNumber:a[l],commodityName:oa[a[v]],commodityCode:a[v],analyticalAssay:a[w],assayUom:a[b]}))),la=da.filter((a=>null!==a.lotNumber)),ua=da.filter((a=>null===a.lotNumber&&void 0===la.find((t=>t.commodityCode===a.commodityCode)))),ca=(await s.get(`/items/navarch_weight_lot?filter[${d}]=${aa}&filter[${u}]=Inturn&sort[]=${l}`,{params:{fields:[u,l,N,x,A,C]}})).data.data.reduce(((a,t)=>{const e=t[u],n=a.find((a=>a[0][u]===e));return n?n.push(t):a.push([t]),a}),[]),ma=null!=(L=null!=(K=null!=(H=null!=(q=ca.find((a=>"Outturn"===a[0][u])))?q:ca.find((a=>"Inturn Final"===a[0][u])))?H:ca.find((a=>"Inturn"===a[0][u])))?K:ca.find((a=>"Estimated"===a[0][u])))?L:ca.find((a=>"Planned"===a[0][u]));if(!ma)throw new Error("No weight lots found in selected parcel");const fa=ma.map((a=>{var t,e,n;return{lotNumber:a[l],wetWeight:a[x],wetWeightUom:a[A],moisture:((null!=(t=a[x])?t:0)-(null!=(e=a[N])?e:0))/(null!=(n=a[x])?n:1)*100,moistureUom:"%",dryWeight:a[N],dryWeightUom:a[C]}})),pa=X.data.data[y],ga=await s.get(`/items/navarch_vessel/${pa}`,{params:{fields:[P]}}),_a=(await s.get("/items/navarch_company",{params:{fields:[k,W,I,O,D,J,F,U,G,"email",M,R]}})).data.data,ya=_a[k],ha=(await s.get(`/items/${S}/${_a[U]}`,{params:{fields:[T]}})).data.data[T],$a=_a[G],va=_a[W],wa=_a[I]?`,\n${_a[I]}`:"",ba=_a[O]?`,\n${_a[O]}`:"",Na=_a[D]?`,\n${_a[D]}`:"",xa=await s.get(`/items/${S}/${_a[F]}`,{params:{fields:[B]}}),Aa=xa.data.data[B]?`, ${xa.data.data[B]}`:"",Ca=`${va}${wa}${ba}${_a[J]?` ${_a[J]}`:""}${Na}${Aa}`,Ea={signatoryName:_a[M],signatoryTitle:_a[R],company:ya},Pa=await s.get(`/items/navarch_counterparty/${X.data.data[f]}`,{params:{fields:[E]}}),ka=await s.get(`/items/${j}/${X.data.data[h]}`,{params:{fields:[z,V]}}),Wa=await s.get(`/items/${j}/${X.data.data[$]}`,{params:{fields:[z,V]}}),Ia={seller:ya,seller_address:Ca,seller_phone_number:`+${ha} ${$a}`,buyer:Pa.data.data[E],vessel:ga.data.data[P],contract_ref:`${X.data.data[c]}`,bl_date:Y(new Date(X.data.data[_])),parcel_ref:`${X.data.data[m]} (#${X.data.data.id})`,port_of_loading:`${ka.data.data[z]}, ${ka.data.data[V]}`,port_of_discharge:`${Wa.data.data[z]}, ${Wa.data.data[V]}`,weights:fa,assays:la,composite_assays:ua,signatory:Ea},Oa=await s.post("/generate/assay-exchange",Ia);if(200!==Oa.status)return console.log(`[generateProvWeightAndAssay] invoice response status: ${Oa.status}`),void(i.value=Oa.data);const Da=Oa.data;e("input",{...Ia,doc_location:Da})}catch(a){console.error("[generateProvWeightAndAssay] error=",a),i.value=a}},viewPdf:function(){}};function Y(a){const t=a.getDate(),e=a.getMonth(),n=a.getFullYear();return`${t} ${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][e]} ${n}`}}});const _={key:0},y={key:1};g.render=function(a,t,e,n,r,g){const h=i("v-button"),$=i("v-notice");return s(),o(d,null,[l(' <input :value="value" @input="handleChange($event.target.value)" /> '),l(" create a button only interface for Directus"),a.value?(s(),o("div",y,[u(h,{class:"margin-top-16px",onClick:t[1]||(t[1]=()=>a.viewPdf())},{default:c((()=>[m("View Assay Exchange Cert ")])),_:1})])):(s(),o("div",_,[u(h,{class:"margin-top-16px",onClick:t[0]||(t[0]=()=>a.generatePdf())},{default:c((()=>[m("Generate Assay Exchange Cert")])),_:1}),a.failureReason?(s(),f($,{key:0},{default:c((()=>[m(p(a.failureReason),1)])),_:1})):l("v-if",!0)]))],2112)},g.__file="src/interface.vue";var h=t({id:"navarch-docgen-assay-exchange",name:"Navarch Assay Exchange Cert Generator Button",icon:"receipt_long",description:"This is a custom interface for Navarch's Assay Exchange Cert Generator Button.",component:g,options:null,types:["string"],group:"standard"});export{h as default};
