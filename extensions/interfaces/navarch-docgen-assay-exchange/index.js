import{useApi as a,defineInterface as e}from"@directus/extensions-sdk";import{defineComponent as t,ref as o,inject as n,resolveComponent as r,openBlock as d,createElementBlock as s,Fragment as i,createCommentVNode as c,createVNode as l,withCtx as h,createTextVNode as u,createBlock as f,toDisplayString as p}from"vue";var m=t({props:{value:{type:Object,default:null}},emits:["input"],setup(e,{emit:t}){const r=o(""),d=o(!1),s=a(),i=n("values",o({})),c="foreign_key",l="lot_number",h="method",u="contract",f="shipment_code",p="counterparty",m="assay_results",w="weight_result",y="bl_date",g="vessel",v="origin",_="destination",$="commodity",E="final_assay",N="assay_uom",b="dry_weight",C="wet_weight",S="wet_weight_uom",x="dry_weight_uom",A="name",P="name",k="name",O="line_1",U="line_2",D="city",I="state",W="country",G="zip",M="phone_code",F="phone_number",J="signatory_name",R="signatory_title",j="navarch_country",T="name",B="phone_code",z="navarch_world_port",V="port_name",Y="country",q="name",H="code";return{isGeneraingDoc:d,failureReason:r,generatePdf:async function(){var a,e,o,n,X,Z,aa,ea;r.value="",d.value=!0;try{const ta=i.value.parcel,oa=await s.get(`/items/navarch_parcel/${ta}`,{params:{fields:["id",m,w,u,f,p,y,g,v,_]}});!function(a){if(!a||!a.data||!a.data.data)throw new Error("No parcel data found, please ensure the selected parcel still exists.");if(!a.data.data[m])throw new Error("No assay data found in selected parcel");if(!a.data.data[w])throw new Error("No weight data found in selected parcel");if(!a.data.data[u])throw new Error("No contract found in selected parcel");if(!a.data.data[f])throw new Error("No shipment code found in selected parcel");if(!a.data.data[p])throw new Error("No counterparty found in selected parcel");if(!a.data.data[y])throw new Error("No bill of lading date found in selected parcel");if(!a.data.data[v])throw new Error("No origin port found in selected parcel");if(!a.data.data[_])throw new Error("No destination port found in selected parcel")}(oa);const na=oa.data.data[m],ra=oa.data.data[w],da=await s.get(`/items/navarch_assay_lot?filter[${c}]=${na}&sort[]=${l}`,{params:{fields:[h,l,$,E,N]}});!function(a){if(!a||!a.data||!a.data.data||0===a.data.data.length)throw new Error("No assay lots data found, please ensure assay data has been entered for the selected parcel.");a.data.data.forEach((a=>{if(!a[h])throw new Error("Some assays in the selected parcel does not have a method value");if(!a[$])throw new Error("Some assays in the selected parcel does not have a commodity value");if(!a[E])throw new Error("Some assays in the selected parcel does not have a final assay value");if(!a[N])throw new Error("Some assays in the selected parcel does not have an assay uom value")}))}(da);const sa=da.data.data.reduce(((a,e)=>{const t=e[h],o=a.find((a=>a[0][h]===t));return o?o.push(e):a.push([e]),a}),[]),ia=null!=(n=null!=(o=null!=(e=null!=(a=sa.find((a=>"Outturn"===a[0][h])))?a:sa.find((a=>"Inturn Final"===a[0][h])))?e:sa.find((a=>"Inturn"===a[0][h])))?o:sa.find((a=>"Estimated"===a[0][h])))?n:sa.find((a=>"Planned"===a[0][h]));if(!ia)throw new Error("No assay lots with a valid method found in selected parcel");const ca=da.data.data.map((a=>a.commodity)).filter(((a,e,t)=>t.indexOf(a)===e)),la=ca.map(((a,e)=>`filter[_or][${e}][code]=${a}`)).join("&"),ha=await s.get(`/items/navarch_commodity?${la}`,{params:{fields:[q,H]}});!function(a){if(!a||!a.data||!a.data.data||0===a.data.data.length)throw new Error("No commodity mapping data found, please contact Navarch for assistance.");a.data.data.forEach((a=>{if(!a[q])throw new Error("Some commodities in the selected parcel does not have a name, please contact Navarch for assistance.");if(!a[H])throw new Error("Some commodities in the selected parcel does not have a code, please contact Navarch for assistance.")}))}(ha),console.log(`commodity mapping response: ${JSON.stringify(ha.data.data)}`);const ua=ha.data.data.reduce(((a,e)=>(a[e.code]=e.name,a)),{}),fa=ia.map((a=>({lotNumber:a[l],commodityName:ua[a[$]],commodityCode:a[$],analyticalAssay:a[E],assayUom:a[N]}))),pa=fa.filter((a=>null!==a.lotNumber)),ma=fa.filter((a=>null===a.lotNumber&&void 0===pa.find((e=>e.commodityCode===a.commodityCode)))),wa=await s.get(`/items/navarch_weight_lot?filter[${c}]=${ra}&filter[${h}]=Inturn&sort[]=${l}`,{params:{fields:[h,l,b,C,S,x]}});!function(a){if(!a||!a.data||!a.data.data||0===a.data.data.length)throw new Error("No weight lots data found, please ensure weight data has been entered for the selected parcel.");a.data.data.forEach((a=>{if(!a[h])throw new Error("Some weights in the selected parcel does not have a method");if(!a[C])throw new Error("Some weights in the selected parcel does not have a wet weight value");if(!a[S])throw new Error("Some weights in the selected parcel does not have a wet weight UOM");if(!a[b])throw new Error("Some weights in the selected parcel does not have a dry weight value");if(!a[x])throw new Error("Some weights in the selected parcel does not have a dry weight UOM")}))}(wa);const ya=wa.data.data.reduce(((a,e)=>{const t=e[h],o=a.find((a=>a[0][h]===t));return o?o.push(e):a.push([e]),a}),[]),ga=null!=(ea=null!=(aa=null!=(Z=null!=(X=ya.find((a=>"Outturn"===a[0][h])))?X:ya.find((a=>"Inturn Final"===a[0][h])))?Z:ya.find((a=>"Inturn"===a[0][h])))?aa:ya.find((a=>"Estimated"===a[0][h])))?ea:ya.find((a=>"Planned"===a[0][h]));if(!ga)throw new Error("No weight lots with a valid method found in selected parcel");const va=ga.map((a=>{var e,t,o;return{lotNumber:a[l],wetWeight:a[C],wetWeightUom:a[S],moisture:((null!=(e=a[C])?e:0)-(null!=(t=a[b])?t:0))/(null!=(o=a[C])?o:1)*100,moistureUom:"%",dryWeight:a[b],dryWeightUom:a[x]}})),_a=oa.data.data[g];let $a;_a&&($a=await s.get(`/items/navarch_vessel/${_a}`,{params:{fields:[P]}}));const Ea=await s.get("/items/navarch_company",{params:{fields:[k,O,U,D,I,G,W,M,F,J,R]}});!function(a){if(!a||!a.data||!a.data.data)throw new Error("No company data found, please ensure that company data has been entered.");if(!a.data.data[k])throw new Error("Company name not found.");if(!a.data.data[O])throw new Error("Please ensure that company address line 1 has been entered.");if(!a.data.data[W])throw new Error("Company base country not found.");if(!a.data.data[M])throw new Error("Company phone code not found.");if(!a.data.data[F])throw new Error("Company phone number not found.");if(!a.data.data[J])throw new Error("Company signatory name not found.");if(!a.data.data[R])throw new Error("Company signatory title not found.")}(Ea);const Na=Ea.data.data,ba=Na[k],Ca=await s.get(`/items/${j}/${Na[M]}`,{params:{fields:[B]}});!function(a){if(!a||!a.data||!a.data.data)throw new Error("No company country phone code data found, please contact Navarch for assistance.");if(!a.data.data[B])throw new Error("Company-based country phone code not found, please contact Navarch for assistance.")}(Ca);const Sa=Ca.data.data[B],xa=Na[F],Aa=Na[O],Pa=Na[U]?`,\n${Na[U]}`:"",ka=Na[D]?`,\n${Na[D]}`:"",Oa=Na[I]?`,\n${Na[I]}`:"",Ua=await s.get(`/items/${j}/${Na[W]}`,{params:{fields:[T]}});!function(a){if(!a||!a.data||!a.data.data)throw new Error("No company country base data found, please contact Navarch for assistance.");if(!a.data.data[T])throw new Error("Company-based country name not found, please contact Navarch for assistance.")}(Ua);const Da=Ua.data.data[T]?`, ${Ua.data.data[T]}`:"",Ia=`${Aa}${Pa}${ka}${Na[G]?` ${Na[G]}`:""}${Oa}${Da}`,Wa={signatoryName:Na[J],signatoryTitle:Na[R],company:ba},Ga=await s.get(`/items/navarch_counterparty/${oa.data.data[p]}`,{params:{fields:[A]}});!function(a){if(!a||!a.data||!a.data.data)throw new Error("No counterparty data found, please ensure that counterparty data has been entered.");if(!a.data.data[A])throw new Error("Counterparty name not found, please ensure that the selected counterparty has a name.")}(Ga);const Ma=await s.get(`/items/${z}/${oa.data.data[v]}`,{params:{fields:[V,Y]}});K(Ma,"origin");const Fa=await s.get(`/items/${z}/${oa.data.data[_]}`,{params:{fields:[V,Y]}});K(Fa,"destination");const Ja={seller:ba,seller_address:Ia,seller_phone_number:`+${Sa} ${xa}`,buyer:Ga.data.data[A],vessel:$a?$a.data.data[P]:"N/A",contract_ref:`${oa.data.data[u]}`,bl_date:Q(new Date(oa.data.data[y])),parcel_ref:`${oa.data.data[f]} (#${oa.data.data.id})`,port_of_loading:`${Ma.data.data[V]}, ${Ma.data.data[Y]}`,port_of_discharge:`${Fa.data.data[V]}, ${Fa.data.data[Y]}`,weights:va,assays:pa,composite_assays:ma,signatory:Wa},Ra=await s.post("/generate/assay-exchange",Ja);if(200!==Ra.status)return console.log(`[generateProvWeightAndAssay] invoice response status: ${Ra.status}`),d.value=!1,void(r.value="Something went wrong when generating assay exchange cert, please contact Navarch for assistance.");const ja=Ra.data;t("input",{...Ja,doc_name:ja}),d.value=!1,L(ja)}catch(a){console.error("[generateProvWeightAndAssay] error=",a),r.value=a,d.value=!1}},viewPdf:L};function K(a,e){if(!a||!a.data||!a.data.data)throw new Error(`No ${e} port data found, please contact Navarch to check that the selected port is still valid.`);if(!a.data.data[V])throw new Error(`Port name for ${e} port not found, please contact Navarch to check that the selected port is still valid.`);if(!a.data.data[Y])throw new Error("Port country for ${portType} port not found, please contact Navarch to check that the selected port is still valid.")}function L(a){const t=null!=a?a:e.value.doc_name;console.log(`[viewPdf] doc name: ${t}`);const o=`/display-doc?filepath=${encodeURIComponent(`/data/uploads/${t}.pdf`)}`;window.open(o)}function Q(a){const e=a.getDate(),t=a.getMonth(),o=a.getFullYear();return`${e} ${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][t]} ${o}`}}});const w={key:0},y={key:1};m.render=function(a,e,t,o,n,m){const g=r("v-button"),v=r("v-notice");return d(),s(i,null,[c(' <input :value="value" @input="handleChange($event.target.value)" /> '),c(" create a button only interface for Directus"),a.value?(d(),s("div",y,[l(g,{class:"margin-top-16px",onClick:e[1]||(e[1]=()=>a.viewPdf())},{default:h((()=>[u("View Assay Exchange Cert ")])),_:1})])):(d(),s("div",w,[l(g,{class:"margin-top-16px",onClick:e[0]||(e[0]=()=>a.generatePdf()),loading:a.isGeneraingDoc},{default:h((()=>[u("Generate Assay Exchange Cert")])),_:1},8,["loading"]),a.failureReason?(d(),f(v,{key:0},{default:h((()=>[u(p(a.failureReason),1)])),_:1})):c("v-if",!0)]))],2112)},m.__file="src/interface.vue";var g=e({id:"navarch-docgen-assay-exchange",name:"Navarch Assay Exchange Cert Generator Button",icon:"receipt_long",description:"This is a custom interface for Navarch's Assay Exchange Cert Generator Button.",component:m,options:null,types:["json"],group:"standard"});export{g as default};
