import{useApi as t,defineInterface as e}from"@directus/extensions-sdk";import{defineComponent as a,ref as o,inject as n,resolveComponent as s,openBlock as i,createElementBlock as r,Fragment as l,createCommentVNode as d,createVNode as c,withCtx as u,createTextVNode as m,createBlock as g,toDisplayString as y}from"vue";var h=a({props:{value:{type:Object,default:null}},emits:["input"],setup(e,{emit:a}){const s=o(""),i=o(!1),r=o(!1),l=t(),d=n("values",o({})),c="foreign_key",u="lot_number",m="method",g="contract",y="counterparty",h="assay_results",_="weight_result",f="bl_date",w="vessel",p="origin",v="destination",$="assay_uom",A="name",b="name",N="name",O="logo",S="line_1",E="line_2",P="city",C="state",D="country",W="zip",k="phone_code",x="phone_number",J="signatory_name",j="signatory_title",F="signature",I="navarch_country",T="name",R="phone_code",G="navarch_world_port",V="port_name",B="country",M="commodity",q="navarch_commodity",K="name";return{isGeneraingDoc:i,failureReason:s,generatePdf:async function(){var t,e;s.value="",i.value=!0;try{const o=d.value.parcel,n=await l.get(`/items/navarch_parcel/${o}`,{params:{fields:[h,_,g,y,"actual_arrival_date",f,"estimated_shipment_date",w,p,v]}}),r=n.data.data[h],U=n.data.data[_],Y=await l.get(`/items/navarch_assay_lot?filter[${c}]=${r}&sort[]=${u}`,{params:{fields:["id","commodity",m,"dry_weight","dry_weight_uom","buyer_assay","seller_assay","final_assay","lot_number",$]}});console.log(`assayLotResponse.data.data=${JSON.stringify(Y.data.data)}`),function(t){if(!t||0===t.length)throw new Error("No assay lots found for the selected parcel")}(Y.data.data);const Q=Y.data.data.map((t=>t.commodity)).filter(((t,e,a)=>a.indexOf(t)===e));console.log(`commodities: ${Q}`);const X=(await l.get(`/items/${q}`,{params:{fields:["name","code"],filter:{code:{_in:Q}}}})).data.data.reduce(((t,e)=>(t[e.code]=e.name,t)),{}),Z=function(t){console.log("[evaluateAnalyticalAssay]");const e={};for(const a of t)e[a.method]||(e[a.method]={}),e[a.method][a.commodity]||(e[a.method][a.commodity]=[]),null!==a.lot_number?(1===e[a.method][a.commodity].length&&null===e[a.method][a.commodity][0].lot_number&&(e[a.method][a.commodity]=[]),e[a.method][a.commodity].push(a)):null===a.lot_number&&0===e[a.method][a.commodity].length&&e[a.method][a.commodity].push(a);console.log(`[evaluateAnalyticalAssay] group: ${JSON.stringify(e)}}`);let a=e.Outturn,o="Outturn";a||(a=e["Inturn Final"],o="Inturn Final");a||(a=e.Inturn,o="Inturn");a||(a=e.Estimated,o="Estimated");a||(a=e.Planned,o="Planned");if(!a)throw new Error("No assay lot data found for all assay methods. Please ensure assay lot data has been entered in the selected parcel.");console.log(`[evaluateAnalyticalAssay] latest method=${o}`);const n={};for(const t in e[o]){console.log(`[evaluateAnalyticalAssay] commodityKey: ${t}, group[METHOD][commodityKey]: ${JSON.stringify(e[o][t])}`),n[t]={};const a=e[o][t].reduce(((t,e)=>t+e.dry_weight),0);if(console.log(`[evaluateAnalyticalAssay] totalDryWeight: ${a} from ${JSON.stringify(e[o][t])}`),0===a||isNaN(a))throw s.value=`Please provide dry weight for ${t} commodity in ${o} method, total dry weight cannot be ${a}`,new Error("[evaluateAnalyticalAssay] totalDryWeight is 0");console.log(`[evaluateAnalyticalAssay] totalDryWeight: ${a}`),n[t].analytical_assay=e[o][t].reduce(((e,a)=>{var n,i;const r=null!=(i=a.final_assay)?i:null!=(n=a.seller_assay)?n:a.buyer_assay;if(null==r)throw s.value=`Please provide Final, Seller or Buyer assay value for ${t} commodity in ${o} method`,new Error("[evaluateAnalyticalAssay] assay value is not defined for assay lot");const l=e+r*a.dry_weight;return console.log(`[evaluateAnalyticalAssay] evaluated analytical assay: ${l} for method=${o}, commodity=${t}; with values accumulator=${e}, assayValue=${r}, dryWeight=${a.dry_weight}`),l}),0)/a,console.log(`[evaluateAnalyticalAssay] analytical assay: ${n[t].analytical_assay}`),e[o][t].length>0&&(n[t][$]=e[o][t][0][$])}return console.log(`[evaluateAnalyticalAssay] analyticalAssay: ${JSON.stringify(n)}`),n}(Y.data.data),tt=Object.keys(Z).map((t=>({commodity_name:X[t],analytical_assay:Z[t].analytical_assay,assay_uom:Z[t][$]})));console.log(`[generateProvWeightAndAssay] assay data=${JSON.stringify(tt)}}`);const et=await l.get(`/items/navarch_weight_lot?filter[${c}]=${U}&sort[]=${u}`,{params:{fields:["id","dry_weight","wet_weight",m,"moisture","wet_weight_uom","dry_weight_uom"]}});console.log(`weightLotResponse.data.data=${JSON.stringify(et.data.data)}`),function(t){if(!t||0===t.length)throw new Error("No weight lots found for the selected parcel")}(et.data.data);const at=function(t){console.log("[evaluateWeights]");const e={};for(const a of t)e[a.method]||(console.log(`adding method ${a.method} to weightData object`),e[a.method]=[]),e[a.method.toString()].push(a);const a=[];for(const t of Object.keys(e)){if(!e[t]){console.log(`method=${t} does not exist in weightData object`);continue}console.log(`adding lots and other values to weights for method=${t}`);const o=H(e[t]);o&&a.push(o)}return a}(et.data.data);let ot=at.find((t=>"Outturn"===t.method));if(ot||(ot=at.find((t=>"Inturn Final"===t.method))),ot||(ot=at.find((t=>"Inturn"===t.method))),ot||(ot=at.find((t=>"Estimated"===t.method))),ot||(ot=at.find((t=>"Planned"===t.method))),!ot)throw new Error("No weight lot data found for all weight methods. Please ensure weight lot data has been entered in the selected parcel.");if(void 0===ot.dry_weight||null===ot.dry_weight||void 0===ot.wet_weight||null===ot.wet_weight||void 0===ot.moisture||null===ot.moisture||void 0===ot.dry_weight_uom||null===ot.dry_weight_uom||void 0===ot.wet_weight_uom||null===ot.wet_weight_uom||void 0===ot.method||null===ot.method)throw new Error("One of the fields for weight lots is undefined");const nt=n.data.data[w];let st;nt&&(st=await l.get(`/items/navarch_vessel/${nt}`,{params:{fields:[b]}}));const it=(await l.get("/items/navarch_company",{params:{fields:[N,O,S,E,P,C,W,D,k,x,"email",J,j,F]}})).data.data,rt=it[N],lt=(await l.get(`/items/${I}/${it[k]}`,{params:{fields:[R]}})).data.data[R],dt=it[x],ct=it[S],ut=it[E]?`,\n${it[E]}`:"",mt=it[P]?`,\n${it[P]}`:"",gt=it[C]?`,\n${it[C]}`:"",yt=await l.get(`/items/${I}/${it[D]}`,{params:{fields:[T]}}),ht=yt.data.data[T]?`, ${yt.data.data[T]}`:"",_t=`${ct}${ut}${mt}${it[W]?` ${it[W]}`:""}${gt}${ht}`,ft={signatoryName:it[J],signatoryTitle:it[j],signature:it[F],company:rt},wt=await l.get(`/items/navarch_counterparty/${n.data.data[y]}`,{params:{fields:[A]}}),pt=await l.get(`/items/${G}/${n.data.data[p]}`,{params:{fields:[V,B]}}),vt=await l.get(`/items/${G}/${n.data.data[v]}`,{params:{fields:[V,B]}}),$t=n.data.data[g],At=(await l.get(`/items/navarch_commodity_in_contract?filter[${g}]=${$t}&filter[primary_commodity]=true`,{params:{fields:[M]}})).data.data[0][M],bt=null!=(t=(await l.get(`/items/${q}/${At}`,{params:{fields:[K]}})).data.data[K])?t:"",Nt={invoice_type:d.value.invoice_type,company_logo:null!=(e=it[O])?e:void 0,seller:rt,seller_address:_t,seller_phone_number:`+${lt} ${dt}`,buyer:wt.data.data[A],vessel:st?st.data.data[b]:"N/A",contract_ref:`${n.data.data[g]}`,bl_date:z(new Date(n.data.data[f])),port_of_loading:`${pt.data.data[V]}, ${pt.data.data[B]}`,port_of_discharge:`${vt.data.data[V]}, ${vt.data.data[B]}`,commodity_name:bt,wet_weight:ot.wet_weight,wet_weight_uom:ot.wet_weight_uom,dry_weight:ot.dry_weight,dry_weight_uom:ot.dry_weight_uom,moisture:ot.moisture,moisture_uom:"%",assays:tt,signatory:ft},Ot=await l.post("/generate/weight-and-assay-cert",Nt);if(200!==Ot.status)return console.log(`[generateProvWeightAndAssay] invoice response status: ${Ot.status}`),s.value=Ot.data,void(i.value=!1);const St=Ot.data;a("input",{...Nt,doc_name:St}),i.value=!1,L(St)}catch(t){console.error("[generateProvWeightAndAssay] error=",t),s.value=t,i.value=!1}},isCopying:r,copy:async function(){r.value=!0;const{id:t,user_created:e,date_created:a,user_updated:o,date_updated:n,weight_and_assay_cert:i,...c}=d.value;console.log(`[weight & assay::copy] requestBody=${JSON.stringify(c)}`);const u=await l.post("/items/navarch_weight_and_assay_cert",c);if(200!==u.status)return console.log(`[weight & assay::copy] copy response status: ${u.status}`),void(s.value=`Failed to duplicate weight & assay with status ${u.status}`);r.value=!1,window.open(`/admin/content/navarch_weight_and_assay_cert/${u.data.data.id}`)},viewPdf:L};function L(t){const a=null!=t?t:e.value.doc_name;console.log(`[viewPdf] doc name: ${a}`);const o=`/display-doc?docname=${encodeURIComponent(`${a}.pdf`)}`;window.open(o)}function z(t){const e=t.getDate(),a=t.getMonth(),o=t.getFullYear();return`${e} ${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][a]} ${o}`}function H(t){if(console.log("[evaluateWeightData]"),0===t.length)throw new Error("No weight lots found");const e=U(t,"dry_weight"),a=U(t,"wet_weight");return{method:Y(t,"method"),dry_weight_uom:Y(t,"dry_weight_uom"),wet_weight_uom:Y(t,"wet_weight_uom"),dry_weight:e,wet_weight:a,moisture:(a-e)/a*100}}function U(t,e){return console.log("[evaluateAggregateValue]"),t.reduce(((t,a)=>{var o;return t+(null!=(o=a[e.toString()])?o:0)}),0)}function Y(t,e){if(console.log("[getFirstValueAsSharedValue]"),0!==t.length)return console.log(`lots[0][${e.toString()}]=${t[0][e.toString()]}`),t[0][e.toString()]}}});const _={key:0},f={key:1};var w=[],p=[];!function(t,e){if(t&&"undefined"!=typeof document){var a,o=!0===e.prepend?"prepend":"append",n=!0===e.singleTag,s="string"==typeof e.container?document.querySelector(e.container):document.getElementsByTagName("head")[0];if(n){var i=w.indexOf(s);-1===i&&(i=w.push(s)-1,p[i]={}),a=p[i]&&p[i][o]?p[i][o]:p[i][o]=r()}else a=r();65279===t.charCodeAt(0)&&(t=t.substring(1)),a.styleSheet?a.styleSheet.cssText+=t:a.appendChild(document.createTextNode(t))}function r(){var t=document.createElement("style");if(t.setAttribute("type","text/css"),e.attributes)for(var a=Object.keys(e.attributes),n=0;n<a.length;n++)t.setAttribute(a[n],e.attributes[a[n]]);var i="prepend"===o?"afterbegin":"beforeend";return s.insertAdjacentElement(i,t),t}}(".margin-top-16px[data-v-64969d30] {\n  margin-top: 16px;\n}",{}),h.render=function(t,e,a,o,n,h){const w=s("v-button"),p=s("v-notice");return i(),r(l,null,[d(' <input :value="value" @input="handleChange($event.target.value)" /> '),d(" create a button only interface for Directus"),t.value?(i(),r("div",f,[c(w,{onClick:e[1]||(e[1]=()=>t.viewPdf())},{default:u((()=>[m("View Weight & Assay Cert ")])),_:1})])):(i(),r("div",_,[c(w,{onClick:e[0]||(e[0]=()=>t.generatePdf()),loading:t.isGeneraingDoc},{default:u((()=>[m("Generate Weight & Assay Cert")])),_:1},8,["loading"]),t.failureReason?(i(),g(p,{key:0},{default:u((()=>[m(y(t.failureReason),1)])),_:1})):d("v-if",!0)])),c(w,{class:"margin-top-16px",onClick:e[2]||(e[2]=()=>t.copy()),loading:t.isCopying},{default:u((()=>[m("Copy")])),_:1},8,["loading"])],64)},h.__scopeId="data-v-64969d30",h.__file="src/interface.vue";var v=e({id:"navarch-weight-n-assay-generator",name:"Weight & Assay Cert Generator",icon:"receipt_long",description:"This is a custom interface for Navarch's Weight & Assay Certificate Generator Button.",component:h,options:null,types:["json"],group:"standard"});export{v as default};
