import{useApi as a,defineInterface as t}from"@directus/extensions-sdk";import{defineComponent as e,ref as i,inject as r,resolveComponent as n,openBlock as o,createElementBlock as s,Fragment as d,createCommentVNode as l,createVNode as u,withCtx as c,createTextVNode as m,createBlock as _,toDisplayString as g}from"vue";var p=e({props:{value:{type:String,default:null}},emits:["input"],setup(t,{emit:e}){const n=i(""),o=a(),s=r("values",i({})),d="foreign_key",l="lot_number",u="method",c="contract",m="counterparty",_="assay_results",g="weight_result",p="bl_date",y="vessel",f="origin",h="destination",w="commodity",$="final_assay",v="assay_uom",A="name",b="name",S="name",k="line_1",C="line_2",W="city",P="state",x="country",D="zip",N="phone_code",J="phone_number",V="signatory_name",F="signatory_title",G="navarch_country",M="name",O="phone_code",R="navarch_world_port",I="port_name",T="country",j="commodity",z="navarch_commodity",B="name";return{failureReason:n,generatePdf:async function(){var a;try{const t=s.value.parcel,i=await o.get(`/items/navarch_parcel/${t}`,{params:{fields:[_,g,c,m,"actual_arrival_date",p,"invoice_date","estimated_shipment_date","actual_shipment_date",y,f,h]}}),r=i.data.data[_],H=i.data.data[g],K=await o.get(`/items/navarch_assay_lot?filter[${d}]=${r}&filter[${u}]=Inturn&filter[${l}][_null]=true`,{params:{fields:[w,$,v]}}),L=K.data.data.map((a=>a.commodity)).filter(((a,t,e)=>e.indexOf(a)===t)),Q=L.map(((a,t)=>`filter[_or][${t}][code]=${a}`)).join("&"),U=await o.get(`/items/${z}?${Q}`,{params:{fields:["name","code"]}});console.log(`commodity mapping response: ${JSON.stringify(U.data.data)}`);const X=U.data.data.reduce(((a,t)=>(a[t.code]=t.name,a)),{}),Z=K.data.data.map((a=>({commodity_name:X[a[w]],analytical_assay:a[$],assay_uom:a[v]}))),aa=function(a){if(console.log("[evaluateWeightData]"),0===a.length)throw new Error("No weight lots found");const t=Y(a,"dry_weight"),e=Y(a,"wet_weight");return{dry_weight_uom:q(a,"dry_weight_uom"),wet_weight_uom:q(a,"wet_weight_uom"),dry_weight:t,wet_weight:e,moisture:(e-t)/e*100}}((await o.get(`/items/navarch_weight_lot?filter[${d}]=${H}&filter[${u}]=Inturn&sort[]=${l}`,{params:{fields:["dry_weight","wet_weight","wet_weight_uom","dry_weight_uom"]}})).data.data),ta=i.data.data[y],ea=await o.get(`/items/navarch_vessel/${ta}`,{params:{fields:[b]}}),ia=(await o.get("/items/navarch_company",{params:{fields:[S,k,C,W,P,D,x,N,J,"email",V,F]}})).data.data,ra=ia[S],na=(await o.get(`/items/${G}/${ia[N]}`,{params:{fields:[O]}})).data.data[O],oa=ia[J],sa=ia[k],da=ia[C]?`,\n${ia[C]}`:"",la=ia[W]?`,\n${ia[W]}`:"",ua=ia[P]?`,\n${ia[P]}`:"",ca=await o.get(`/items/${G}/${ia[x]}`,{params:{fields:[M]}}),ma=ca.data.data[M]?`, ${ca.data.data[M]}`:"",_a=`${sa}${da}${la}${ia[D]?` ${ia[D]}`:""}${ua}${ma}`,ga={signatoryName:ia[V],signatoryTitle:ia[F],company:ra},pa=await o.get(`/items/navarch_counterparty/${i.data.data[m]}`,{params:{fields:[A]}}),ya=await o.get(`/items/${R}/${i.data.data[f]}`,{params:{fields:[I,T]}}),fa=await o.get(`/items/${R}/${i.data.data[h]}`,{params:{fields:[I,T]}}),ha=i.data.data[c],wa=(await o.get(`/items/navarch_commodity_in_contract?filter[${c}]=${ha}&filter[primary_commodity]=true`,{params:{fields:[j]}})).data.data[0][j],$a=null!=(a=(await o.get(`/items/${z}/${wa}`,{params:{fields:[B]}})).data.data[B])?a:"",va={invoice_type:s.value.invoice_type,seller:ra,seller_address:_a,seller_phone_number:`+${na} ${oa}`,buyer:pa.data.data[A],vessel:ea.data.data[b],contract_ref:`${i.data.data[c]}`,bl_date:E(new Date(i.data.data[p])),port_of_loading:`${ya.data.data[I]}, ${ya.data.data[T]}`,port_of_discharge:`${fa.data.data[I]}, ${fa.data.data[T]}`,commodity_name:$a,wet_weight:aa.wet_weight,wet_weight_uom:aa.wet_weight_uom,dry_weight:aa.dry_weight,dry_weight_uom:aa.dry_weight_uom,moisture:aa.moisture,moisture_uom:"%",assays:Z,signatory:ga},Aa=await o.post("/generate/weight-and-assay-cert",va);if(200!==Aa.status)return console.log(`[generateProvWeightAndAssay] invoice response status: ${Aa.status}`),void(n.value=Aa.data);const ba=Aa.data;e("input",{...va,doc_location:ba})}catch(a){console.error("[generateProvWeightAndAssay] error=",a),n.value=a}},viewPdf:function(){}};function E(a){const t=a.getDate(),e=a.getMonth(),i=a.getFullYear();return`${t} ${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][e]} ${i}`}function Y(a,t){return console.log("[evaluateAggregateValue]"),a.reduce(((a,e)=>{var i;return a+(null!=(i=e[t.toString()])?i:0)}),0)}function q(a,t){if(console.log("[getFirstValueAsSharedValue]"),0!==a.length)return console.log(`lots[0][${t.toString()}]=${a[0][t.toString()]}`),a[0][t.toString()]}}});const y={key:0},f={key:1};p.render=function(a,t,e,i,r,p){const h=n("v-button"),w=n("v-notice");return o(),s(d,null,[l(' <input :value="value" @input="handleChange($event.target.value)" /> '),l(" create a button only interface for Directus"),a.value?(o(),s("div",f,[u(h,{class:"margin-top-16px",onClick:t[1]||(t[1]=()=>a.viewPdf())},{default:c((()=>[m("View Weight & Assay Cert ")])),_:1})])):(o(),s("div",y,[u(h,{class:"margin-top-16px",onClick:t[0]||(t[0]=()=>a.generatePdf())},{default:c((()=>[m("Generate Weight & Assay Cert")])),_:1}),a.failureReason?(o(),_(w,{key:0},{default:c((()=>[m(g(a.failureReason),1)])),_:1})):l("v-if",!0)]))],2112)},p.__file="src/interface.vue";var h=t({id:"navarch-weight-n-assay-generator",name:"Weight & Assay Cert Generator",icon:"receipt_long",description:"This is a custom interface for Navarch's Weight & Assay Certificate Generator Button.",component:p,options:null,types:["string"],group:"standard"});export{h as default};
