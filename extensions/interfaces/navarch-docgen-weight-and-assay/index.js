import{useApi as a,defineInterface as t}from"@directus/extensions-sdk";import{defineComponent as e,ref as i,inject as n,resolveComponent as o,openBlock as r,createElementBlock as s,Fragment as d,createCommentVNode as l,createVNode as u,withCtx as c,createTextVNode as m,createBlock as g,toDisplayString as _}from"vue";var p=e({props:{value:{type:Object,default:null}},emits:["input"],setup(t,{emit:e}){const o=i(""),r=i(!1),s=a(),d=n("values",i({})),l="foreign_key",u="lot_number",c="method",m="contract",g="counterparty",_="assay_results",p="weight_result",f="bl_date",y="vessel",h="origin",w="destination",v="commodity",$="final_assay",A="assay_uom",b="name",C="name",k="name",D="line_1",P="line_2",S="city",W="state",N="country",x="zip",G="phone_code",J="phone_number",O="signatory_name",R="signatory_title",V="navarch_country",j="name",F="phone_code",I="navarch_world_port",M="port_name",T="country",z="commodity",B="navarch_commodity",E="name";return{isGeneraingDoc:r,failureReason:o,generatePdf:async function(){var a;o.value="",r.value=!0;try{const t=d.value.parcel,i=await s.get(`/items/navarch_parcel/${t}`,{params:{fields:[_,p,m,g,"actual_arrival_date",f,"estimated_shipment_date",y,h,w]}}),n=i.data.data[_],K=i.data.data[p],L=await s.get(`/items/navarch_assay_lot?filter[${l}]=${n}&filter[${c}]=Inturn&filter[${u}][_null]=true`,{params:{fields:[v,$,A]}}),Q=L.data.data.map((a=>a.commodity)).filter(((a,t,e)=>e.indexOf(a)===t)),X=Q.map(((a,t)=>`filter[_or][${t}][code]=${a}`)).join("&"),Z=await s.get(`/items/${B}?${X}`,{params:{fields:["name","code"]}});console.log(`commodity mapping response: ${JSON.stringify(Z.data.data)}`);const aa=Z.data.data.reduce(((a,t)=>(a[t.code]=t.name,a)),{}),ta=L.data.data.map((a=>({commodity_name:aa[a[v]],analytical_assay:a[$],assay_uom:a[A]}))),ea=function(a){if(console.log("[evaluateWeightData]"),0===a.length)throw new Error("No weight lots found");const t=q(a,"dry_weight"),e=q(a,"wet_weight");return{dry_weight_uom:H(a,"dry_weight_uom"),wet_weight_uom:H(a,"wet_weight_uom"),dry_weight:t,wet_weight:e,moisture:(e-t)/e*100}}((await s.get(`/items/navarch_weight_lot?filter[${l}]=${K}&filter[${c}]=Inturn&sort[]=${u}`,{params:{fields:["dry_weight","wet_weight","wet_weight_uom","dry_weight_uom"]}})).data.data),ia=i.data.data[y];let na;ia&&(na=await s.get(`/items/navarch_vessel/${ia}`,{params:{fields:[C]}}));const oa=(await s.get("/items/navarch_company",{params:{fields:[k,D,P,S,W,x,N,G,J,"email",O,R]}})).data.data,ra=oa[k],sa=(await s.get(`/items/${V}/${oa[G]}`,{params:{fields:[F]}})).data.data[F],da=oa[J],la=oa[D],ua=oa[P]?`,\n${oa[P]}`:"",ca=oa[S]?`,\n${oa[S]}`:"",ma=oa[W]?`,\n${oa[W]}`:"",ga=await s.get(`/items/${V}/${oa[N]}`,{params:{fields:[j]}}),_a=ga.data.data[j]?`, ${ga.data.data[j]}`:"",pa=`${la}${ua}${ca}${oa[x]?` ${oa[x]}`:""}${ma}${_a}`,fa={signatoryName:oa[O],signatoryTitle:oa[R],company:ra},ya=await s.get(`/items/navarch_counterparty/${i.data.data[g]}`,{params:{fields:[b]}}),ha=await s.get(`/items/${I}/${i.data.data[h]}`,{params:{fields:[M,T]}}),wa=await s.get(`/items/${I}/${i.data.data[w]}`,{params:{fields:[M,T]}}),va=i.data.data[m],$a=(await s.get(`/items/navarch_commodity_in_contract?filter[${m}]=${va}&filter[primary_commodity]=true`,{params:{fields:[z]}})).data.data[0][z],Aa=null!=(a=(await s.get(`/items/${B}/${$a}`,{params:{fields:[E]}})).data.data[E])?a:"",ba={invoice_type:d.value.invoice_type,seller:ra,seller_address:pa,seller_phone_number:`+${sa} ${da}`,buyer:ya.data.data[b],vessel:na?na.data.data[C]:"N/A",contract_ref:`${i.data.data[m]}`,bl_date:Y(new Date(i.data.data[f])),port_of_loading:`${ha.data.data[M]}, ${ha.data.data[T]}`,port_of_discharge:`${wa.data.data[M]}, ${wa.data.data[T]}`,commodity_name:Aa,wet_weight:ea.wet_weight,wet_weight_uom:ea.wet_weight_uom,dry_weight:ea.dry_weight,dry_weight_uom:ea.dry_weight_uom,moisture:ea.moisture,moisture_uom:"%",assays:ta,signatory:fa},Ca=await s.post("/generate/weight-and-assay-cert",ba);if(200!==Ca.status)return console.log(`[generateProvWeightAndAssay] invoice response status: ${Ca.status}`),o.value=Ca.data,void(r.value=!1);const ka=Ca.data;e("input",{...ba,doc_name:ka}),r.value=!1,U(ka)}catch(a){console.error("[generateProvWeightAndAssay] error=",a),o.value=a,r.value=!1}},viewPdf:U};function U(a){const e=null!=a?a:t.value.doc_name;console.log(`[viewPdf] doc name: ${e}`);const i=`/display-doc?filepath=${encodeURIComponent(`/data/uploads/${e}.pdf`)}`;window.open(i)}function Y(a){const t=a.getDate(),e=a.getMonth(),i=a.getFullYear();return`${t} ${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][e]} ${i}`}function q(a,t){return console.log("[evaluateAggregateValue]"),a.reduce(((a,e)=>{var i;return a+(null!=(i=e[t.toString()])?i:0)}),0)}function H(a,t){if(console.log("[getFirstValueAsSharedValue]"),0!==a.length)return console.log(`lots[0][${t.toString()}]=${a[0][t.toString()]}`),a[0][t.toString()]}}});const f={key:0},y={key:1};p.render=function(a,t,e,i,n,p){const h=o("v-button"),w=o("v-notice");return r(),s(d,null,[l(' <input :value="value" @input="handleChange($event.target.value)" /> '),l(" create a button only interface for Directus"),a.value?(r(),s("div",y,[u(h,{class:"margin-top-16px",onClick:t[1]||(t[1]=()=>a.viewPdf())},{default:c((()=>[m("View Weight & Assay Cert ")])),_:1})])):(r(),s("div",f,[u(h,{class:"margin-top-16px",onClick:t[0]||(t[0]=()=>a.generatePdf()),loading:a.isGeneraingDoc},{default:c((()=>[m("Generate Weight & Assay Cert")])),_:1},8,["loading"]),a.failureReason?(r(),g(w,{key:0},{default:c((()=>[m(_(a.failureReason),1)])),_:1})):l("v-if",!0)]))],2112)},p.__file="src/interface.vue";var h=t({id:"navarch-weight-n-assay-generator",name:"Weight & Assay Cert Generator",icon:"receipt_long",description:"This is a custom interface for Navarch's Weight & Assay Certificate Generator Button.",component:p,options:null,types:["json"],group:"standard"});export{h as default};
