import{useApi as e,defineInterface as t}from"@directus/extensions-sdk";import{defineComponent as a,ref as o,inject as n,resolveComponent as r,openBlock as i,createElementBlock as l,Fragment as s,createCommentVNode as c,createVNode as d,withCtx as u,createTextVNode as f,createBlock as m,toDisplayString as p}from"vue";var y=(e=>(e.BRACKET="Bracket",e.MIN_DEDUCTION="Minimum Deduction",e.MAX_CAP="Maximum Cap",e))(y||{}),v=(e=>(e.PERCENTAGE="Percentage",e.FRACTIONAL="Fractional",e))(v||{}),h=(e=>(e.WET_WEIGHT="wet_weight",e.MOISTURE="moisture",e.DRY_WEIGHT="dry_weight",e))(h||{}),_=(e=>(e.METHOD="method",e.WET_WEIGHT_UOM="wet_weight_uom",e.MOISTURE_UOM="moisture_uom",e.DRY_WEIGHT_UOM="dry_weight_uom",e))(_||{}),g=a({props:{value:{type:Object,default:null}},emits:["input"],setup(t,{emit:a}){const r=o(""),i=o(!1),l=o(!1),s=e(),c=n("values",o({}));function d(e){if(console.log("[evaluateWeightData]"),0===e.length)return;const t=f(e,h.DRY_WEIGHT),a=f(e,h.WET_WEIGHT);return{method:u(e,_.METHOD),lots:e,dry_weight_uom:u(e,_.DRY_WEIGHT_UOM),wet_weight_uom:u(e,_.WET_WEIGHT_UOM),dry_weight:t,wet_weight:a,moisture:(a-t)/a*100}}function u(e,t){if(console.log("[getFirstValueAsSharedValue]"),0!==e.length)return console.log(`lots[0][${t.toString()}]=${e[0][t.toString()]}`),e[0][t.toString()]}function f(e,t){return console.log("[evaluateAggregateValue]"),e.reduce(((e,a)=>{var o;return e+parseFloat(null!=(o=a[t.toString()])?o:"0")}),0)}function m(e){return null==e}function p(e,t=2,a=!0){if(console.log("[formatNumber]"),isNaN(e)||null===e)return"-";const o=Math.round(e*Math.pow(10,t))/Math.pow(10,t),[n,r]=o.toString().split("."),i=n.replace(/\B(?=(\d{3})+(?!\d))/g,",");if(!r&&!a)return i;return`${i}.${(null!=r?r:"").padEnd(t,"0")}`}function g(e,t=2,a=!1){if(m(e)||isNaN(e))return null;const o=a&&e<0;return o&&(e*=-1),Math.round(e*Math.pow(10,t))/Math.pow(10,t)*(o?-1:1)}function $(e){if(console.log("[parseNumber]"),"number"==typeof e)return e;if(!e||"-"===e)return 0;const t=parseFloat(e.replace(/[^\d.-]/g,""));return console.log(`[parseNumber] number: ${e} to ${t}`),t}function w(e,t){return console.log("[findBracket]"),e.find((e=>{var a,o;const n=t>(null!=(a=e.lower_threshold)?a:0)&&(m(e.upper_threshold)||t<e.upper_threshold)||e.lower_threshold_inclusive&&t===(null!=(o=e.lower_threshold)?o:0)||e.upper_threshold_inclusive&&t===e.upper_threshold;return console.log(`[findBracket] value=${t} for bracket: ${JSON.stringify(e)}? match=${!!n}`),n}))}function D(e,t){var a,o,n,r,i,l,s,c,d,u,f;console.log("[evaluateFinalValueFromBrackets]");const m=(e-(null!=(a=t.initial_adjustment)?a:0)*(t.initial_adjustment_conversion_by_multiplication?null!=(o=t.initial_adjustment_conversion_factor)?o:1:1/(null!=(n=t.initial_adjustment_conversion_factor)?n:1)))*(null!=(r=t.rate)?r:0)*(t.rate_type===v.PERCENTAGE?.01:1)+(null!=(i=t.final_adjustment)?i:0)*(t.final_adjustment_conversion_factor?null!=(l=t.final_adjustment_conversion_factor)?l:1:1/(null!=(s=t.final_adjustment_conversion_factor)?s:1));switch(t.bracket_type){case y.MIN_DEDUCTION:if(null===t.comparator||void 0===t.comparator)throw new Error("Minimum deduction not found");const a=t.comparator*(t.comparator_conversion_by_multiplication?null!=(c=t.comparator_conversion_factor)?c:1:1/(null!=(d=t.comparator_conversion_factor)?d:1));return e-m<a?g(e-a,4):m;case y.MAX_CAP:if(null===t.comparator||void 0===t.comparator)throw new Error("Maximum cap not found");const o=t.comparator*(t.comparator_conversion_by_multiplication?null!=(u=t.comparator_conversion_factor)?u:1:1/(null!=(f=t.comparator_conversion_factor)?f:1));return g(m>o?o:m,4);case y.BRACKET:return g(m,4);default:throw new Error(`bracket type ${t.bracket_type} is not supported`)}}async function b(e,t,a,o){var n,r,i,l,s,c,d,u;if(console.log("[evaluatePayableAssay]"),!a||0===a.length)return{};const f=w(a,e);if(!f)throw new Error(`Unable to find the range for analytical assay value of ${e}, please ensure the payable assay rates for the commodity ${o} are defined in the contract cover all range of possible values`);let m,h,_=1,$=!0;if(f.initial_adjustment_uom&&void 0!==f.initial_adjustment_uom&&null!==f.initial_adjustment_uom&&f.initial_adjustment_uom!==t){const e=await F(f.initial_adjustment_uom,t);_=e.value,m=k(f.initial_adjustment_uom,t,e.isConvertByMultiplication),$=e.isConvertByMultiplication}let b,E=1,P=!0;if(f.bracket_type===y.MAX_CAP){if(h=null!=(n=f.maximum_cap)?n:0,void 0!==f.maximum_cap_uom&&null!==f.maximum_cap_uom&&f.maximum_cap_uom!==t){const e=await F(f.maximum_cap_uom,t);E=e.value,b=k(f.maximum_cap_uom,t,e.isConvertByMultiplication),P=e.isConvertByMultiplication}}else if(f.bracket_type===y.MIN_DEDUCTION&&(h=null!=(r=f.minimum_deduction)?r:0,void 0!==f.minimum_deduction_uom&&null!==f.minimum_deduction_uom&&f.minimum_deduction_uom!==t)){const e=await F(f.minimum_deduction_uom,t);E=e.value,b=k(f.minimum_deduction_uom,t,e.isConvertByMultiplication),P=e.isConvertByMultiplication}const C={bracket_type:f.bracket_type,rate:null!=(i=f.rate)?i:1,rate_type:null!=(l=f.rate_type)?l:v.FRACTIONAL,initial_adjustment:null!=(s=f.initial_adjustment)?s:0,initial_adjustment_conversion_factor:_,initial_adjustment_conversion_by_multiplication:$,comparator:h,comparator_conversion_factor:E,comparator_conversion_by_multiplication:P};console.log(`[evaluatePayableAssay] bracketForEvaluation: ${JSON.stringify(C)}`);const S=D(e,C);let A="";const T=void 0!==f.initial_adjustment&&null!==f.initial_adjustment;if(f.bracket_type===y.BRACKET)A=`${T?"(":""}${p(e,4)}${null!=t?t:""}${T?` - ${p(f.initial_adjustment,4)}${null!=(c=f.initial_adjustment_uom)?c:`${null!=t?t:""}`}`:""}${T&&1!==_?` ${$?"*":"/"} ${p(_,4)}${m}`:""}${T?")":""} * ${p(f.rate,4)}${f.rate_type===v.PERCENTAGE?"/100":`/${p(1,4)}`}`;else if(f.bracket_type===y.MIN_DEDUCTION){A=S===g(e-(null!=h?h:0)*(P?null!=E?E:1:1/(null!=E?E:1)),4)?`${p(e,4)}${null!=t?t:""} - ${p(h,4)}${null!=t?t:""}${1!==E?` ${P?"*":"/"} ${p(E,4)}${b}`:""}`:`${T?"(":""}${p(e,4)}${null!=t?t:""}${T?` - ${p(f.initial_adjustment,4)}${null!=(d=f.initial_adjustment_uom)?d:`${null!=t?t:""}`}`:""}${T&&1!==_?` ${$?"*":"/"} ${p(_,4)}${m}`:""}${T?")":""} * ${p(f.rate,4)}${f.rate_type===v.PERCENTAGE?"/100":`/${p(1,4)}`}`}else{if(f.bracket_type!==y.MAX_CAP)throw new Error(`[buildPayableAssayExpression] unknown bracket method: ${f.bracket_type}`);A=S===g((null!=h?h:0)*(P?null!=E?E:1:1/(null!=E?E:1)),4)?`${p(h,4)}${null!=t?t:""}${1!==E?` ${P?"*":"/"} ${p(E,4)}${b}`:""}`:`${T?"(":""}${p(e,4)}${null!=t?t:""}${T?` - ${p(f.initial_adjustment,4)}${null!=(u=f.initial_adjustment_uom)?u:`${null!=t?t:""}`}`:""}${T&&1!==_?` ${$?"*":"/"} ${p(_,4)}${m}`:""}${T?")":""} * ${p(f.rate,4)}${f.rate_type===v.PERCENTAGE?"/100":`/${p(1,4)}`}`}return{payableAssay:S,expression:A}}console.log("[main] formValues=",c);const E="above the lower threshold, plus",P="below the upper threshold, minus";function C(e,t,a,o,n){var r,i,l,s,c,d,u;if(console.log("[evaluateCharge]"),!a||!a.length)return;const f=w(a,e);if(!f)throw new Error(`Unable to find the range for the price rate value of ${e}, please ensure the ${n} rates for commodity ${o} are defined in the contract cover all range of possible values`);let m=0,p=1;if(f.use_btc)p=0,m=0;else{const e=null!=(r=f.escalator_reference)?r:1;if(p=(null!=(i=f.rate)?i:1)/e,f.for_every_unit===E)m=null!=(l=f.lower_threshold)?l:0;else{if(f.for_every_unit!==P)throw new Error(`[evaluateCharge] unknown for_every_unit: ${f.for_every_unit}`);m=null!=(s=f.upper_threshold)?s:0}}const h={bracket_type:y.BRACKET,rate:p,rate_type:v.FRACTIONAL,initial_adjustment:m,final_adjustment:(null!=(c=f.base_treatment_charge)?c:0)+(null!=(d=f.base_charge_adjustment)?d:0)};return console.log(`[evaluateCharge] bracketForEvaluation: ${JSON.stringify(h)}`),{finalValue:D(e,h),baseTreatmentCharge:f.base_treatment_charge+(null!=(u=f.base_charge_adjustment)?u:0)}}function S(e,t,a,o,n){var r,i,l,s;if(console.log("[evaluatePenalty]"),!t||!t.length)return{};const c=w(t,e);if(!c)throw new Error(`Unable to find the range for the analytical assay value of ${e}, please ensure the penalty rates for commodity ${n} are defined in the contract cover all range of possible values`);let d=0,u=1;if(c.no_penalty)u=0,d=0;else{const e=null!=(r=c.escalator_reference)?r:1;if(u=(null!=(i=c.rate)?i:1)/e,c.for_every_unit===E)d=null!=(l=c.lower_threshold)?l:0;else{if(c.for_every_unit!==P)throw new Error(`[evaluatePenalty] unknown for_every_unit: ${c.for_every_unit}`);d=null!=(s=c.upper_threshold)?s:0}}const f={bracket_type:y.BRACKET,rate:u,rate_type:v.FRACTIONAL,initial_adjustment:d,final_adjustment:0};console.log(`[evaluatePenalty] bracketForEvaluation: ${JSON.stringify(f)}`);const m=D(e,f),h=null!=f.initial_adjustment;let _="";return _=c.rate&&0!==c.rate?`${h?"(":""}${p(e,4)}${h?` - ${p(d,4)})`:""} / ${p(1,4)} * ${null!=a?a:""} ${p(u,4)}/${null!=o?o:""}`:"No penalty",{penalty:m,expression:_,bracket:c}}function A(e){const t=e.getDate(),a=e.getMonth(),o=e.getFullYear();return`${t} ${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][a]} ${o}`}function T(e,t=!0){const a=e.getMonth()+1,o=e.getDate();return`${e.getFullYear()}${t?"-":" "}${a<10?"0":""}${a}${t?"-":" "}${o<10?"0":""}${o}`}function N(e){return 0===e.getDay()||6===e.getDay()}function O(e,t,a=!1){const o=new Date(e.valueOf());let n=t-(a?1:0),r=!0;for(;N(o);)o.setDate(o.getDate()+1),r&&(n-=1,r=!1);for(;n>0;)o.setDate(o.getDate()+1),N(o)||(n-=1);for(o.getHours()>=12&&o.setDate(o.getDate()+1);N(o);)o.setDate(o.getDate()+1);return o}function M(e,t){const a=new Date(e.valueOf());return a.setMonth(a.getMonth()+t,1),a}function I(e,t){const a=new Date(e.valueOf());return a.setMonth(a.getMonth()+t+1,0),a}async function U(e,t){var a,o;if(e===t)return{value:1,isConvertByMultiplication:!0};const n=await s.get(`/items/${Tt}?filter[${Nt}]=${e}`,{params:{fields:[Ft]}});if(0===n.data.data.length||null===n.data.data[0][Ft]||void 0===n.data.data[0][Ft])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for source weight unit ${e}. Ensure that the symbol is correct and is a weight unit symbol`);const r=await s.get(`/items/${Tt}?filter[${Nt}]=${t}`,{params:{fields:[Ft]}});if(0===r.data.data.length||null===r.data.data[0][Ft]||void 0===r.data.data[0][Ft])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for the target weight unit ${t}. Ensure that the symbol is correct and is a weight unit symbol`);const i=parseFloat(n.data.data[0][Ft]);if(isNaN(i))throw new Error(`[getWeightUnitConversionValue] source weight unit ${e} conversion value=${i} is not a number`);const l=parseFloat(r.data.data[0][Ft]);if(isNaN(l))throw new Error(`[getWeightUnitConversionValue] target weight unit ${t} conversion value=${l} is not a number`);return i<l?{value:null!=(a=g(l/i,4))?a:1,isConvertByMultiplication:!1}:{value:null!=(o=g(i/l,4))?o:1,isConvertByMultiplication:!0}}async function F(e,t){var a,o;if(null==e||null==t)return{value:1,isConvertByMultiplication:!0};if(e===t)return{value:1,isConvertByMultiplication:!0};const n=await s.get(`/items/${kt}?filter[${jt}]=${e}`,{params:{fields:[Bt]}});if(0===n.data.data.length||void 0===n.data.data[0][Bt]||null===n.data.data[0][Bt])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for source weight unit ${e}. Ensure that the symbol is correct and is a weight unit symbol`);const r=await s.get(`/items/${kt}?filter[${jt}]=${t}`,{params:{fields:[Bt]}});if(0===r.data.data.length||void 0===r.data.data[0][Bt]||null===r.data.data[0][Bt])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for the target weight unit ${t}. Ensure that the symbol is correct and is a weight unit symbol`);const i=parseFloat(n.data.data[0][Bt]);if(isNaN(i))throw new Error(`[getAssayUnitConversionValue] source weight unit ${e} conversion value=${i} is not a number`);console.log(`[getAssayUnitConversionValue] source unit conversion value=${i}`);const l=parseFloat(r.data.data[0][Bt]);if(isNaN(l))throw new Error(`[getAssayUnitConversionValue] target weight unit ${e} conversion value=${l} is not a number`);return console.log(`[getAssayUnitConversionValue] target unit conversion value=${l}`),console.log("[getAssayUnitConversionValue] returning "+i/l),i<l?{value:null!=(a=g(l/i,4))?a:1,isConvertByMultiplication:!1}:{value:null!=(o=g(i/l,4))?o:1,isConvertByMultiplication:!0}}function k(e,t,a){if(void 0===e||void 0===t||null===e||null===t)return;const o=e.split("/"),n=t.split("/");if(o.length>2||n.length>2)throw new Error(`[getConversionUnit] sourceUnit=${e} and targetUnit=${t} must be in the format of 'unit1/unit2', an extra '/' was found`);if(1===o.length&&1===n.length)return a?`${n[0]}/${o[0]}`:`${o[0]}/${n[0]}`;if(1===o.length){const e=n[0]===o[0]?"":`${n[1]}(${o[1]})`,t=n[1];return""===t?a?e:`/${e}`:a?`${e}/${t}`:`${t}/${e}`}if(1===n.length){const e=o[1],t=o[0]===n[0]?"":`${o[1]}(${n[0]})`;return""===t?a?e:`/${e}`:a?`${e}/${t}`:`${t}/${e}`}{const e=o[0]===n[0],t=o[1]===n[1],r=e||""===o[0],i=e||""===n[0],l=t||""===o[1],s=t||""===n[1],c=!l&&!i,d=!r&&!s,u=`${l?"":o[1]}${c?"(":""}${i?"":`${n[0]}`}${c?")":""}`,f=`${r?"":o[0]}${d?"(":""}${s?"":`${n[1]}`}${d?")":""}`;return""===f?a?u:`/${u}`:a?`${u}/${f}`:`${f}/${u}`}}async function j(e,t,a){const o=await s.get(`/items/${Tt}?filter[${Ot}]=${t}`,{params:{fields:[Nt]}});if(!o.data.data||!o.data.data[0]||!o.data.data[0][Nt])throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] Dry weight uom not found for symbol ${t}`);const n=o.data.data[0][Nt];if("%"===a){if(n===e)return{};const t=await U(n,e),a=k(n,e,t.isConvertByMultiplication);if(!a)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] no conversion unit found for dry weight unit ${n} and target weight unit ${e}`);return{finalConversion:{conversionFactor:t.value,conversionUom:a,isConvertByMultiplication:t.isConvertByMultiplication}}}let r=a.split("/");if(1==r.length){const e=await async function(e){const t=await s.get(`/items/${kt}`,{params:{fields:[jt,Vt],filter:{[Vt]:{_nnull:!0},[jt]:{_eq:e}}}});if(200!==t.status||!t.data||0===t.data.data.length)throw new Error("[getAssayUnitComposition] no assay units found with composition");return t.data.data[0][Vt]}(a);if(!e)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${a} does not have a composition`);r=e.split("/")}if(r.length>2||0===r.length)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${a} is not in the format of 'unit1/unit2'`);const i=r[0],l=r[1],c={};if(l!==n){const e=await U(n,l),t=k(n,l,e.isConvertByMultiplication);if(!t)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] no conversion unit found for dry weight unit ${n} and assay unit denominator unit ${l}`);c.initialConversion={conversionFactor:e.value,conversionUom:t,isConvertByMultiplication:e.isConvertByMultiplication}}if(i!==e){const t=await U(i,e),a=k(i,e,t.isConvertByMultiplication);if(!a)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] no conversion unit found for target weight unit ${e} and assay unit numerator unit ${i}`);c.finalConversion={conversionFactor:t.value,conversionUom:a,isConvertByMultiplication:t.isConvertByMultiplication}}return c}const B="id",V="foreign_key",x="related_parcel",J="lot_number",R="method",q="navarch_cashflow",W="navarch_parcel",G="contract",L="counterparty",H="assay_results",Q="weight_result",K="actual_arrival_date",Y="estimate_arrival_date",X="bl_date",z="invoice_due_date",Z="estimated_shipment_date",ee="qp_selection",te="vessel",ae="origin",oe="destination",ne="shipment_code",re="adjustments",ie="parcel_finalisation_date",le="navarch_assay_lot",se="commodity",ce="dry_weight",de="dry_weight_uom",ue="buyer_assay",fe="seller_assay",me="final_assay",pe="assay_uom",ye="lot_number",ve="navarch_weight_lot",he="dry_weight",_e="wet_weight",ge="moisture",$e="wet_weight_uom",we="dry_weight_uom",De="navarch_contract",be="contract_currency",Ee="name",Pe="gst_applicable",Ce="gst_rate",Se="navarch_contract_payment_information",Ae="related_contract",Te="invoice_type",Ne="pay_percent",Oe="pa_days",Me="pa_day_type",Ie="pa_ref_day",Ue="pp_days",Fe="pp_day_type",ke="pp_ref_day",je="navarch_commodity_in_contract",Be="contract",Ve="commodity",xe="primary_commodity",Je="payable_commodity",Re="price_method",qe="price_fix_to_use",We="price_per_uom",Ge="treatment_charge_per_uom",Le="refining_charge_rate_uom",He="quotational_periods",Qe="payable_assay_rates",Ke="penalty_rates",Ye="penalty_per_uom",Xe="navarch_payable_assay_bracket",ze="initial_adjustment",Ze="initial_adjustment_uom",et="minimum_deduction",tt="minimum_deduction_uom",at="maximum_cap",ot="maximum_cap_uom",nt="related_commodity_in_contract",rt="bracket_type",it="lower_threshold",lt="lower_threshold_inclusive",st="upper_threshold",ct="upper_threshold_inclusive",dt="rate",ut="rate_type",ft="navarch_treatment_charge_bracket",mt="base_treatment_charge",pt="base_charge_adjustment",yt="use_btc",vt="escalator_reference",ht="for_every_unit",_t="related_contract_commodity_tc",gt="related_contract_commodity_rc",$t="navarch_penalty_bracket",wt="no_penalty",Dt="escalator_reference",bt="for_every_unit",Et="navarch_commodity",Pt="name",Ct="code",St="navarch_currency",At="code",Tt="navarch_unit",Nt="symbol",Ot="dry_symbol",Mt="wet_symbol",It="dry_unit",Ut="wet_unit",Ft="conversionToGram",kt="navarch_assay_unit",jt="unit",Bt="conversion_to_ppb",Vt="composition",xt="navarch_counterparty",Jt="codename",Rt="navarch_vessel",qt="name",Wt="price_am",Gt="price_pm",Lt="average_price",Ht="date",Qt="navarch_invoices",Kt="parcel",Yt="invoice",Xt="invoice_date",zt="amount_paid",Zt="invoice_type",ea="end_date",ta="start_date",aa="navarch_forecast_price",oa="commodity",na="price",ra="start_date",ia="end_date",la=new Date("0000"),sa={Advance:0,"Second Advance":1,"Third Advance":2,"Fourth Advance":3,Provisional:4,"Second Provisional":5,"Third Provisional":6,"Fourth Provisional":7,Final:8};function ca(e){const t=[...new Set(e.flatMap((e=>Object.keys(e))))],a=["Total Penalties USD","Total Adjustments USD","Total Revenues USD","Parcel Value USD","Parcel Payable Value USD","Payments USD","GST Payable USD","Due Total"];for(const e of a){const a=t.indexOf(e);-1!==a&&(t.splice(a,1),t.push(e))}const o=e.map((e=>t.map((t=>{const a=e[t]||"";return"string"==typeof a&&a.includes(",")?`"${a}"`:a})).join(",")));return[t.join(","),...o].join("\n")}function da(e){const t=new Blob([e],{type:"text/csv"}),a=URL.createObjectURL(t),o=document.createElement("a");o.href=a,o.download=`Cashflow-[${function(){const e=new Date,t=60*e.getTimezoneOffset()*1e3,a=e.getTime()-t,o=new Date(a),n=o.toISOString().slice(0,19),r=e.getTimezoneOffset()/60*-1;return`${n}GMT${r>0?"+":""}${r}`.replace(/:/g,"")}()}]-Valuation_Period-(${T(new Date(c.value.start_date),!1)}~${T(new Date(c.value.end_date),!1)}).csv`,document.body.appendChild(o),o.click(),document.body.removeChild(o)}class ua extends Error{constructor(e){super(e),this.name="NonFatalError",Object.setPrototypeOf(this,ua.prototype)}}return{isGeneraingDoc:i,invoiceUrl:c.value,generateCashflow:async function(){r.value="";try{i.value=!0;const e=await async function(){var e,t,a,o,n,i,l,d,u;const f=new Date(c.value[ta]);if("Invalid Date"===f.toString())throw r.value="Start date is invalid",new Error("Start date is invalid");const p=new Date(c.value[ea]);if("Invalid Date"===p.toString())throw r.value="End date is invalid",new Error("End date is invalid");const y=await s.get(`/items/${De}`,{params:{fields:[Ee,B,"invoice_type"]}}),v={};for(const r of y.data.data){const c=await s.get(`/items/${Se}`,{params:{filter:{[Ae]:{_eq:r[B]}},fields:[Te,Oe,Me,Ie]}});console.log(`[getApplicableParcelsData] allPaymentInformation.data.data=${JSON.stringify(c.data.data)}::${r[Ee]}`);const y=await s.get(`/items/${W}`,{params:{filter:{[G]:{_eq:r[B]}},fields:[B,ne,K,Y,X,Z,ie,z]}}),h=c.data.data.map((e=>e[Te])).sort(((e,t)=>sa[e]-sa[t]));console.log(`[getApplicableParcelsData] 1-sortedListOfPossibleInvTypes=${JSON.stringify(h)}::${r[Ee]}`);for(const _ of c.data.data){const c={days:_[Oe],day_type:_[Me],ref_day:"Final"===_[Zt]?"QP Month + n days":_[Ie]};if(!c)throw new Error(`Contract ${r[Ee]} does not have a payment advice for invoice type ${_[Zt]}`);let g,$="";for(const w of y.data.data){const y=await s.get(`/items/${Qt}`,{params:{filter:{[Kt]:{_eq:w[B]},[Zt]:{_eq:_[Te]},[Yt]:{_nnull:!0}},fields:[Yt]}});let D;if((null==(t=null==(e=y.data)?void 0:e.data)?void 0:t.length)>0&&(null==(a=y.data)?void 0:a.data[0][Yt])){D=new Date(y.data.data[0][Yt].due_date),console.log(`[getApplicableParcelsData] exsiting invoice found with due date=${D}::${r[Ee]}:${w[ne]}:${_[Te]}`),D<f&&D>p&&(D=la),v[w[B]]||(v[w[B]]=[]),v[w[B]].push({invoiceType:_[Te],dueDate:D,parcelId:w[B],contractName:r[Ee],sortedListOfInvTypesFromContract:h});continue}switch(c.ref_day){case"Arrival Date":$="Actual Arrival Date from the Parcel form",g=null!=(o=w[K])?o:w[Y];break;case"B/L Date":$="B/L Date (or Estimated Shipment Date) from the Parcel form",g=null!=(n=w[X])?n:w[Z];break;case"End of Month of Delivery":$="B/L Date (or Estimated Shipment Date) from the Parcel form",g=null!=(i=w[X])?i:w[Z];const e=new Date(g);e.setMonth(e.getMonth()+1,0),g=T(e);break;case"Invoice Date":$="Invoice Date (using the B/L Date or Estimated Shipment Date from the Parcel form)",g=null!=(l=w[X])?l:w[Z];break;case"Estimated Shipment Date":$="Estimated Shipment Date from the Parcel form",g=w[Z];break;case"QP Month + n days":const t=await s.get(`items/${je}`,{params:{filter:{[Be]:{_eq:r[B]},[Je]:{_eq:!0}},fields:[He]}});if(!Array.isArray(t.data.data)||0===t.data.data.length)throw new Error(`Contract ${r[Ee]} does not have any payable commodities`);const a=t.data.data.map((e=>e[He].find((e=>!!e.default)))),f=a.reduce(((e,t)=>t.qp_period>e.qp_period?t:e),a[0]);let p;switch(f.qp_code){case"MAMA":$="Actual Arrival Date (or Estimated Arrival Date) from the Parcel form",p=null!=(d=w[K])?d:w[Y];break;case"MOSS":case"MOS":case"MOAS":$="B/L Date (or Estimated Shipment Date) from the Parcel form",p=null!=(u=w[X])?u:w[Z];break;default:throw new Error(`Unsupported QP code ${f.qp_code}, currently only supports MAMA, MOS, MOSS, and MOAS`)}if(m(p))throw new Error(`Invalid reference date, please ensure the ${$} field(s) in parcel ${w[ne]} are filled in`);g=I(new Date(p),f.qp_period).toISOString();break;default:throw new Error(`Invalid reference day for payment advice: ${c.ref_day}; please contact Navarch for support`)}if(null==g)throw new Error(`Reference day for payment advice ${$} is empty in parcel ${w[ne]}`);const b=new Date(g),E=parseInt(c.days),P=c.day_type;switch(P){case"Business Day(s)":D=O(b,E);break;case"Calendar Day(s)":D=new Date(b.valueOf()),D.getHours()>=12?D.setDate(D.getDate()+E+1):D.setDate(D.getDate()+E);break;default:throw new Error(`Please provide a valid Day Type (Cashflow) for ${r[Ee]}:Final Invoice Type`)}if(console.log(`[getApplicableParcels] payment advice ref date: ${b.toString()} plus ${E} ${P} equals due date: ${D.toString()}::${r[Ee]}:${w[ne]}:${_[Te]}`),D>=f&&D<=p&&(v[w[B]]||(v[w[B]]=[]),v[w[B]].push({invoiceType:_[Te],dueDate:D,parcelId:w[B],contractName:r[Ee],sortedListOfInvTypesFromContract:h})),w[z]){const e=w[z][_[Te]];if(e&&e.due_date){const t=e.inv_type,a=new Date(e.due_date);if("Invalid Date"===a.toString())throw new Error(`Invoice Due Date field in the parcel ${w[ne]} has an invalid due date for invoice type ${t}`);if(a>=f&&a<=p){v[w[B]]||(v[w[B]]=[]);const e={invoiceType:t,dueDate:a,parcelId:w[B],contractName:r[Ee],sortedListOfInvTypesFromContract:h},o=v[w[B]].findIndex((e=>e.invoiceType===t));-1!==o?v[w[B]][o]=e:v[w[B]].push(e)}else if(v[w[B]]){const e=v[w[B]].findIndex((e=>e.invoiceType===t));-1!==e&&v[w[B]].splice(e,1)}}}}}}console.log(`[getApplicableParcels] invoice types by parcel id: ${JSON.stringify(v)}`),Object.values(v).forEach((e=>{var t;if(!e||0===e.length)return;const a=e.reduce(((e,t)=>e&&sa[t.invoiceType]<sa[e.invoiceType]?t:e),e[0]);if(console.log(`[getApplicableParcels] earliestInvoiceType=${JSON.stringify(a)}`),!a)throw new Error(`Could not find the earliest invoice type for parcel with ID: ${null==(t=e[0])?void 0:t.parcelId}`);if(new Date(a.dueDate)<f)return;console.log(`[getApplicableParcelsData] sorted list of possible inv types=${JSON.stringify(a.sortedListOfInvTypesFromContract)}`);const o=a.sortedListOfInvTypesFromContract.findIndex((e=>e===a.invoiceType));if(-1===o)throw new Error(`Could not find the invoice type ${a.invoiceType} in the list of Contract Payment Information (${a.sortedListOfInvTypesFromContract.join(", ")}) for parcel with ID: ${a.parcelId}`);if(o>0){if(!v[a.parcelId])throw new Error(`No invoice data recorded for parcel with ID: ${a.parcelId} when evaluating due dates for each invoice type`);v[a.parcelId].push({invoiceType:a.sortedListOfInvTypesFromContract[o-1],dueDate:la,parcelId:a.parcelId,contractName:a.contractName,sortedListOfInvTypesFromContract:a.sortedListOfInvTypesFromContract})}}));const h=Object.keys(v);let _;for(let e=0;e<h.length;e+=15){const t=h.slice(e,e+15),a=await s.get(`/items/${W}`,{params:{filter:{[B]:{_in:t}},fields:[B,G,L,H,Q,K,Y,X,Z,ee,te,ae,oe,ne,re,"parcel_finalised",ie,H]}});_?_.data.data=_.data.data.concat(a.data.data):_=a}if(!_.data.data||_.data.data.length!==h.length)throw new Error("Experiencing some network issues, please try again. If the issue persists, contact Navarch for support");const g={parcelData:_.data.data.reduce(((e,t)=>(e[t[B]]=t,e)),{}),contractNameByParcelId:h.reduce(((e,t)=>(e[t]=v[t][0].contractName,e)),{}),invoiceTypeParcel:h.flatMap((e=>v[e])),parcelIds:h};return console.log(`[getApplicableParcels] returnObject=${JSON.stringify(g)}`),g}(),t=await async function(e){const t=[];let a;for(let t=0;t<e.parcelIds.length;t+=15){const o=e.parcelIds.slice(t,t+15),n=await s.get(`/items/${Qt}`,{params:{filter:{[Kt]:{_in:o},[Yt]:{_nnull:!0}},fields:[Kt,Zt,Yt,Xt,zt]}});a?a.data.data=a.data.data.concat(n.data.data):a=n}a.data.data.sort(((e,t)=>{const a=sa[e[Zt]]-sa[t[Zt]];return 0===a?new Date(t[Xt]).valueOf()-new Date(e[Xt]).valueOf():a}));for(const o of e.invoiceTypeParcel){const n=a.data.data.find((e=>e[Kt]===o.parcelId&&e[Zt]===o.invoiceType));n?t.push({parcelId:o.parcelId,invoiceType:o.invoiceType,contractName:e.contractNameByParcelId[o.parcelId],dueDate:n[zt]?la:o.dueDate,invoiceData:{...n[Yt],amount_paid:n[zt]}}):t.push({parcelId:o.parcelId,invoiceType:o.invoiceType,contractName:e.contractNameByParcelId[o.parcelId],dueDate:o.dueDate,parcelData:e.parcelData[o.parcelId]})}return console.log(`[generateInvoiceParamForParcel] invoiceParams=${JSON.stringify(t)}`),t}(e);console.log(`[generateCashflow] form values=${JSON.stringify(c.value)}`);const o=await Promise.all(t.map((async e=>(console.log(`[generateCashflow] invoiceParam=${JSON.stringify(e)}`),await async function(e){var t,a,o,n,l,c,u,f,y,v,h,_,w,D,E,P,T,N,O,M,I,U,F,k,q,z,ee,ie,Ft,kt,jt,Bt,Vt,Wt,Gt,Lt,Ht,Xt,zt;r.value="",i.value=!0;try{if(e.invoiceData){console.log(`[generateInvoice][invoice=${JSON.stringify(e.invoiceData.invoice_number)}::parcel=${e.invoiceData.parcel}] using existing invoice=${JSON.stringify(e.invoiceData)}`);const a=e.invoiceData;if(!a.buyer_id)throw new Error(`Invoice ${a.invoice_number} does not have a buyer ID`);const o=await s.get(`/items/${xt}/${a.buyer_id}`,{params:{fields:[Jt]}});Da(o.data.data);const n=await s.get(`/items/${W}`,{params:{filter:{[B]:{_eq:e.parcelId}},fields:[X,K,Y]}});console.log(`[generateInvoice][invoice=${JSON.stringify(e.invoiceData.invoice_number)}::parcel=${e.invoiceData.parcel}] parcel date data=${JSON.stringify(n.data.data)}`);const r=n.data.data[0];return{Parcel:a.parcel,Counterparty:o.data.data[Jt],Vessel:"N/A"===a.vessel?"Vessel TBA":a.vessel,"Shipment Date":a.bl_date,"Arrival Date":r[K]?A(new Date(r[K])):r[Y]?A(new Date(r[Y])):"N/A",Status:n[X]?"Unfinalised":"Planned",Revision:"Original",Invoice:`${a.invoice_type}:Original`,"Invoice Due Date":A(e.dueDate),"Dry Weight":`${p(a.dry_weight,2)}`,"Dry Weight UOM":a.dry_weight_uom,...await ya(a.commodities,{dryWeight:a.dry_weight,dryWeightUom:a.dry_weight_uom}),"Total Penalties USD":p(a.total_deductions),"Total Adjustments USD":a.adjustments?p(a.adjustments.total_adjustments):"0.00","Total Revenues USD":p(a.total_revenue),"Parcel Value USD":p(a.invoice_value),"Parcel Payable Value USD":p(a.payable_amount),"Payments USD":a.amount_paid,"GST Payable USD":p(null==(t=a.balance_of_gst_payable)?void 0:t.gst_in_usd),"Due Total":p(a.balance_in_sellers_favor),metadata:{invoiceTypeRanking:sa[a.invoice_type]}}}if(void 0===e.parcelData)throw new ua(`Something went wrong, no parcel or invoice data for Invoice of parcel id ${e.parcelId.substring(0,5)} and invoice type ${e.invoiceType}`);const i=e.parcelId;if(!i)return void console.error(`[generateInvoice] A parcel id is not defined for invoice type ${e.invoiceType}`);const ea=e.invoiceType,ta=e.parcelData,aa=e.contractName;console.log(`[generateInvoice][parcel=${ta[ne]}::invoice type=${ea}] parcel data=${JSON.stringify(ta)}`),function(e){if(!e)throw new Error("Parcel data not found, please ensure the selected parcel still exists");if(!e[ne])throw new Error("One of the parcels does not have a shipment code, please ensure that all parcels have a shipment code");if(!e[G])throw new Error(`The parcel ${e[ne]} does not have a contract, please ensure that the contract field for the parcel is not empty`);if(!e[L])throw new Error(`The parcel ${e[ne]} does not havea counterparty, please ensure that the counterparty field for the parcel is not empty`);if(!e[H])throw new ua(`The parcel ${e[ne]} does not have assay results`);if(!e[Q])throw new ua(`The parcel ${e[ne]} does not have weight results`);if(!e[ae])throw new Error(`The parcel ${e[ne]} does not havean origin port`);if(!e[oe])throw new Error(`The parcel ${e[ne]} does not havea destination port`)}(ta);const oa=ta[H],na=(ta[Q],ta[G]);if(!na)throw new Error(`Contract not found for parcel ${ta[ne]}`);const ra=await s.get(`/items/${Se}`,{params:{filter:{[Ae]:{_eq:na},[Te]:{_eq:ea}},fields:[Te,Ne,Oe,Me,Ie,Ue,Fe,ke]}});if(ra.data.data&&0===ra.data.data.length)throw new Error(`No invoice type found for the contract ${aa}`);const ia=ra.data.data.find((e=>e[Te]===ea));if(!ia)throw new Error(`Cannot find payment information for ${ea} in the contract ${aa}, please ensure that data for it has been entered and saved`);const la=await s.get(`/items/${ve}?filter[${x}]=${i}&filter[${J}][_nnull]=true&sort[]=${J}`,{params:{fields:[B,he,_e,R,ge,$e,we]}});console.log(`[generateInvoice][parcel=${ta[ne]}::invoice type=${ea}] weight lots data=${JSON.stringify(la.data.data)}`),function(e){if(!e||0===e.length)throw new ua("No weight lots found for the selected parcel")}(la.data.data);const ca=function(e){console.log("[evaluateWeights]");const t={};for(const a of e)t[a.method]||(console.log(`adding method ${a.method} to weightData object`),t[a.method]=[]),console.log(`adding lot ${a.id} to weightData.${a.method} array`),t[a.method.toString()].push(a);const a=[];for(const e of Object.keys(t)){if(!t[e]){console.log(`method=${e} does not exist in weightData object`);continue}console.log(`adding lots and other values to weights for method=${e}`);const o=d(t[e]);o&&a.push(o)}return a}(la.data.data);let da;if(da||(da=ca.find((e=>"Outturn"===e.method))),da||(da=ca.find((e=>"Inturn Final"===e.method))),da||(da=ca.find((e=>"Inturn"===e.method))),da||(da=ca.find((e=>"Estimated"===e.method))),da||(da=ca.find((e=>"Planned"===e.method))),!da)throw new Error(`No weight lots with valid method found for parcel ${ta[ne]}`);if(void 0===da.dry_weight||null===da.dry_weight||void 0===da.wet_weight||null===da.wet_weight||void 0===da.moisture||null===da.moisture||void 0===da.dry_weight_uom||null===da.dry_weight_uom||void 0===da.wet_weight_uom||null===da.wet_weight_uom||void 0===da.method||null===da.method)throw new Error(`One of the fields for the latest weight lots data is undefined for parcel ${ta[ne]}`);const fa=await s.get(`/items/${Tt}?filter[${Ot}]=${da.dry_weight_uom}`,{params:{fields:[It]}}),va=await s.get(`/items/${Tt}?filter[${Mt}]=${da.wet_weight_uom}`,{params:{fields:[Ut]}});if(!fa.data.data||!fa.data.data[0]||!fa.data.data[0][It])throw new Error(`Dry weight uom not found for symbol ${da.dry_weight_uom} for parcel ${ta[ne]}`);if(!va.data.data||!va.data.data[0]||!va.data.data[0][Ut])throw new Error(`Wet weight uom not found for symbol ${da.wet_weight_uom} for parcel ${ta[ne]}`);const ba=await s.get(`/items/${le}?filter[${V}]=${oa}&sort[]=${J}`,{params:{fields:[B,se,R,ce,de,ue,fe,me,ye,pe]}});console.log(`[generateInvoice][parcel=${ta[ne]}::invoice type=${ea}] assay lots data=${JSON.stringify(ba.data.data)}`),function(e){if(!e||0===e.length)throw new ua("No assay lots found for the selected parcel")}(ba.data.data);const Ea=function(e){var t;console.log("[evaluateAnalyticalAssay]");const a={};for(const t of e)a[t.method]||(a[t.method]={}),a[t.method][t.commodity]||(a[t.method][t.commodity]=[]),null!==t.lot_number?(1===a[t.method][t.commodity].length&&null===a[t.method][t.commodity][0].lot_number&&(a[t.method][t.commodity]=[]),a[t.method][t.commodity].push(t)):null===t.lot_number&&0===a[t.method][t.commodity].length&&a[t.method][t.commodity].push(t);console.log(`[evaluateAnalyticalAssay] group: ${JSON.stringify(a)}}`);const o={};for(const e in a){console.log(`[evaluateAnalyticalAssay] methodKey: ${e}, group[methodKey]: ${JSON.stringify(a[e])}`);for(const n in a[e]){console.log(`[evaluateAnalyticalAssay] commodityKey: ${n}, group[methodKey][commodityKey]: ${JSON.stringify(a[e][n])}`),o[e]=null!=(t=o[e])?t:{},o[e][n]={};const i=a[e][n].reduce(((e,t)=>e+parseFloat(t.dry_weight)),0);if(console.log(`[evaluateAnalyticalAssay] totalDryWeight: ${i} from ${JSON.stringify(a[e][n])}`),0===i||isNaN(i))throw r.value=`Please provide dry weight for ${n} commodity in ${e} method, total dry weight cannot be ${i}`,new Error("[evaluateAnalyticalAssay] totalDryWeight is 0");console.log(`[evaluateAnalyticalAssay] totalDryWeight: ${i}`),o[e][n].analytical_assay=a[e][n].reduce(((t,a)=>{var o,i,l;const s=parseFloat(null!=(i=a.final_assay)?i:null!=(o=a.seller_assay)?o:a.buyer_assay);if(null==s)throw r.value=`Please provide Final, Seller or Buyer assay value for ${n} commodity in ${e} method`,new Error("[evaluateAnalyticalAssay] assay value is not defined for assay lot");const c=t+s*parseFloat(null!=(l=a.dry_weight)?l:"0");return console.log(`[evaluateAnalyticalAssay] evaluated analytical assay: ${c} for method=${e}, commodity=${n}; with values accumulator=${t}, assayValue=${s}, dryWeight=${a.dry_weight}`),c}),0)/i,console.log(`[evaluateAnalyticalAssay] analytical assay: ${o[e][n].analytical_assay}`),a[e][n].length>0&&(o[e][n][pe]=a[e][n][0][pe])}}return console.log(`[evaluateAnalyticalAssay] analyticalAssay: ${JSON.stringify(o)}`),o}(ba.data.data);let Pa;if(Pa||(Pa=Ea.Outturn),Pa||(Pa=Ea["Inturn Final"]),Pa||(Pa=Ea.Inturn),Pa||(Pa=Ea.Estimated),Pa||(Pa=Ea.Planned),!Pa)throw new Error(`No assay lot data with a valid method found for parcel ${ta[ne]}`);console.log(`[generateInvoice][parcel=${ta[ne]}::invoice type=${ea}] weight lots for invoice evaluation=${JSON.stringify(da)}`),console.log(`[generateInvoice][parcel=${ta[ne]}::invoice type=${ea}] assay lots for invoice evaluation=${JSON.stringify(Pa)}`);const Ca=await s.get(`/items/${De}/${na}`,{params:{fields:[Ee,be,Pe,Ce]}});!function(e){if(!e)throw new Error("Contract data not found, please ensure the selected contract still exists");if(!e[be])throw new Error(`The contract ${e[Ee]} does not have a set currency, please ensure that the currency field for the contract is not empty`);if(e[Pe]&&m(e[Ce]))throw new Error(`The contract ${e[Ee]} is applicable for GST but does not have a GST rate, please ensure that the GST rate field for the contract is not empty`)}(Ca.data.data);const Sa=await s.get(`/items/${St}/${Ca.data.data.contract_currency}`,{params:{fields:[At]}});!function(e){if(!e)throw new Error("Currency data not found, please ensure the selected currency still exists");if(!e[At])throw new Error("The selected currency in the contract is not valid")}(Sa.data.data);const Aa=Sa.data.data.code,Ta=await s.get(`/items/${je}?filter[${Be}]=${na}`,{params:{fields:["id",Ve,xe,Je,Re,qe,He,Qe,Ke,Ye,We,Ge,Le]}});!function(e){if(!e||0===e.length)throw new Error("No commodity data found in selected contract for parcel");if(!e.every((e=>e[Ve])))throw new Error("The selected contract has an undefined commodity, please ensure that the 'Commodity' field for all commodites in the contract is not empty");if(!e.every((e=>!e[Je]||e[We])))throw new Error("The selected contract has an undefined base price Uom for commodity, please ensure that the 'Base Price Uom' field for all commodites in the contract is not empty")}(Ta.data.data),console.log(`[generateInvoice][parcel=${ta[ne]}::invoice type=${ea}] contract commodity data=${JSON.stringify(Ta.data.data)}`);const Na=[],Oa=[];let Ma="";for(const{id:e,commodity:t,primary_commodity:r,price_method:i,price_fix_to_use:d,quotational_periods:m,price_per_uom:$,penalty_per_uom:V,treatment_charge_per_uom:x,refining_charge_rate_uom:J}of Ta.data.data){const R=await s.get(`/items/${Et}/${t}`,{params:{fields:[Pt,Ct,B]}});if(_a(R.data.data,t),!Pa[R.data.data.code]){console.log(`[generateInvoice][parcel=${ta[ne]}::invoice type=${ea}::comm=${R.data.data[Pt]}] no analytical assay for commodity ${R.data.data.code} found, skipping...`);continue}if(r&&(Ma=R.data.data[Pt]),null!==m){const t=m;console.log(`[generateInvoice][parcel=${ta[ne]}::invoice type=${ea}::comm=${R.data.data[Pt]}] qp=${JSON.stringify(t)}`);const r=Array.isArray(t)?t.find((e=>e.default)):null;if(!r)throw new Error(`No default quotational period found for commodity ${R.data.data.code}`);const S=t.filter((e=>!e.default)).map((e=>`${e.qp_period} ${e.qp_code}`)),V=[`${r.qp_period} ${r.qp_code}`,...S].join(", ");console.log(`[generateInvoice][parcel=${ta[ne]}::invoice type=${ea}::comm=${R.data.data[Pt]}] evaluate payable assay for ${R.data.data.code} with an analytical assay=${null==(a=Pa[R.data.data.code])?void 0:a.analytical_assay}`);const W=await s.get(`/items/${Xe}?filter[${nt}]=${e}`,{params:{fields:[rt,it,lt,st,ct,dt,ut,ze,Ze,et,tt,at,ot]}}),{payableAssay:G,expression:L}=await b(null==(o=Pa[R.data.data.code])?void 0:o.analytical_assay,null==(n=Pa[R.data.data.code])?void 0:n.assay_uom,W.data.data,R.data.data[Pt]);let H=null,Q=null,K=null;if("Final"!==ea){const e=await ma(R.data.data.code,R.data.data.name,ta,i,(async()=>pa(r,ta,aa,R.data.data[Pt])));if(null===e)throw new Error(`Pricing dates not found for commodity ${R.data.data.code} for parcel ${ta[ne]}`);if(null===e.provisionalPricingStartDate||!(e.provisionalPricingStartDate instanceof Date))throw new Error(`Invalid provisional pricing start date for commodity ${R.data.data.code} of invoice type ${ea} in parcel ${ta[ne]}`);if(H=e.provisionalPricingStartDate,null===e.provisionalPricingEndDate||!(e.provisionalPricingEndDate instanceof Date))throw new Error(`Invalid provisional pricing end date for commodity ${R.data.data.code} of invoice type ${ea} in parcel ${ta[ne]}`);Q=e.provisionalPricingEndDate,K=e.expectedNoOfBusinessDays}else{const e=await ma(R.data.data.code,R.data.data.name,ta,i,(async()=>pa(r,ta,aa,R.data.data[Pt])));if(null===e)throw new Error(`Pricing dates not found for commodity ${R.data.data.code} for parcel ${ta[ne]}`);if(null===e.provisionalPricingStartDate||!(e.provisionalPricingStartDate instanceof Date))throw new Error(`Invalid provisional pricing start date for commodity ${R.data.data.code} of invoice type ${ea} in parcel ${ta[ne]}`);if(H=e.provisionalPricingStartDate,null===e.provisionalPricingEndDate||!(e.provisionalPricingEndDate instanceof Date))throw new Error(`Invalid provisional pricing end date for commodity ${R.data.data.code} of invoice type ${ea} in parcel ${ta[ne]}`);Q=e.provisionalPricingEndDate}console.log(`[generateInvoice][parcel=${ta[ne]}::invoice type=${ea}::comm=${R.data.data[Pt]}] provisional pricing date range: ${H.toString()} - ${Q.toString()}`);const Y=await ha(R.data.data.code,R.data.data[B],i,H,Q,K,d),X=Y.averagePrice;let Z;H=Y.startDate,Q=Y.endDate,console.log(`[generateInvoice] average price within period: ${X} with start date=${H} and end date=${Q}`);const te=await s.get(`/items/${ft}?filter[${_t}]=${e}`,{params:{fields:[it,lt,st,ct,mt,pt,yt,vt,ht,dt]}});let ae,oe;if(void 0!==te.data.data&&null!==te.data.data&&te.data.data.length>0&&(Z=await C(X,null==(l=Pa[R.data.data.code])||l.assay_uom,te.data.data,R.data.data[Pt],"treatment charge")),Z){if(!x)throw new Error(`Treatment Charge Rate UOM is not defined for commodity ${R.data.data[Pt]}`);const e=await s.get(`/items/${Tt}/${x}`,{params:{fields:[Nt]}});$a(e.data.data,R.data.data[Pt]),ae=e.data.data[Nt]}const re=await s.get(`/items/${ft}?filter[${gt}]=${e}`,{params:{fields:[it,lt,st,ct,mt,pt,yt,vt,ht,dt]}});let le;if(void 0!==re.data.data&&null!==re.data.data&&re.data.data.length>0&&(oe=await C(X,null==(c=Pa[R.data.data.code])||c.assay_uom,re.data.data,R.data.data[Pt],"refining charge")),oe){if(!J)throw new Error(`Refining Charge Rate UOM is not defined for commodity ${R.data.data[Pt]}`);const e=await s.get(`/items/${Tt}/${J}`,{params:{fields:[Nt]}});$a(e.data.data,R.data.data[Pt]),le=e.data.data[Nt]}const se=await s.get(`/items/${Tt}/${$}`,{params:{fields:[Nt]}});ga(se.data.data,R.data.data[Pt]);const ce=se.data.data[Nt],de=await j(ce,da.dry_weight_uom,null==(u=Pa[R.data.data.code])?void 0:u.assay_uom);console.log(`[generateInvoice][parcel=${ta[ne]}::invoice type=${ea}::comm=${R.data.data[Pt]}] payableMetalConversion for commodity ${R.data.data.name}: ${JSON.stringify(de)}`),de.initialConversion=1===(null==(f=de.initialConversion)?void 0:f.conversionFactor)?void 0:de.initialConversion,de.finalConversion=1===(null==(y=de.finalConversion)?void 0:y.conversionFactor)?void 0:de.finalConversion;const ue=(null==(v=de.initialConversion)?void 0:v.isConvertByMultiplication)?null!=(_=null==(h=de.initialConversion)?void 0:h.conversionFactor)?_:1:1/(null!=(D=null==(w=de.initialConversion)?void 0:w.conversionFactor)?D:1),fe=(null==(E=de.finalConversion)?void 0:E.isConvertByMultiplication)?null!=(T=null==(P=de.finalConversion)?void 0:P.conversionFactor)?T:1:1/(null!=(O=null==(N=de.finalConversion)?void 0:N.conversionFactor)?O:1),me=null!=(I=g(da.dry_weight*ue*(null!=G?G:1)*fe*("%"!==(null==(M=Pa[R.data.data.code])?void 0:M.assay_uom)?1:.01),4))?I:1;console.log(`[generateInvoice] PAYABLE_METAL for commodity ${R.data.data.name}: ${me}`);const pe=g(X,4),ye=g(me*(null!=pe?pe:X));Na.push({commodity:R.data.data.name,analytical_assay:p(null==(U=Pa[R.data.data.code])?void 0:U.analytical_assay,4),deduction_expression:L,payable_assay:p(G,4),assay_uom:null==(F=Pa[R.data.data.code])?void 0:F.assay_uom,payable_metal:p(me,4),payable_metal_expression:`${p(da.dry_weight,4)}${da.dry_weight_uom}${de.initialConversion?` ${de.initialConversion.isConvertByMultiplication?"*":"/"} ${p(de.initialConversion.conversionFactor,4)}${de.initialConversion.conversionUom}`:""} * ${p(null!=G?G:1,4)}${"%"!==(null==(k=Pa[R.data.data.code])?void 0:k.assay_uom)?`${null==(q=Pa[R.data.data.code])?void 0:q.assay_uom}`:" / 100"}${de.finalConversion?` ${de.finalConversion.isConvertByMultiplication?"*":"/"} ${p(de.finalConversion.conversionFactor,4)}${de.finalConversion.conversionUom}`:""}`,payable_metal_uom:ce,qp:V,qp_start_date:A(H),qp_end_date:A(Q),price_method:i,price_rate:p(pe,4),price_per_uom:ce,price:p(ye),treatment_charge:Z?{rate:p(Z.baseTreatmentCharge,4),discount:p((null!=(z=Z.baseTreatmentCharge)?z:0)-(null!=(ee=Z.finalValue)?ee:0),4),final_rate:p(Z.finalValue,4),per_uom:ae,final_amount:p(g(da.dry_weight*(null!=(ie=Z.finalValue)?ie:1)*-1,2,!0))}:void 0,refining_charge:oe?{rate:p(oe.baseTreatmentCharge,4),discount:p((null!=(Ft=oe.baseTreatmentCharge)?Ft:0)-(null!=(kt=oe.finalValue)?kt:0),4),final_rate:p(oe.finalValue,4),per_uom:le,final_amount:p(g(me*(null!=(jt=oe.finalValue)?jt:1)*-1,2,!0))}:void 0,final_total:g((null!=ye?ye:0)+(Z&&null!=(Vt=g(da.dry_weight*(null!=(Bt=Z.finalValue)?Bt:1)*-1,2,!0))?Vt:0)+(oe&&null!=(Gt=g(me*(null!=(Wt=oe.finalValue)?Wt:1)*-1,2,!0))?Gt:0))})}const W=await s.get(`/items/${$t}?filter[${nt}]=${e}`,{params:{fields:[it,lt,st,ct,wt,Dt,bt,dt]}});if(W.data.data.length>0){if(null===V)throw new Error(`Please fill in the field for Penalty Per UOM in contract ${aa} for commodity ${R.data.data[Pt]}`);const e=await s.get(`/items/${Tt}/${V}`,{params:{fields:[Nt]}});wa(e.data.data,R.data.data[Pt]);const t=e.data.data[Nt],{penalty:a,expression:o,bracket:n}=await S(null==(Lt=Pa[R.data.data.code])?void 0:Lt.analytical_assay,W.data.data,Aa,t,R.data.data[Pt]);console.log(`[generateInvoice][parcel=${ta[ne]}::invoice type=${ea}::comm=${R.data.data[Pt]}] evaluated penalty with an analytical assay=${null==(Ht=Pa[R.data.data.code])?void 0:Ht.analytical_assay}, penaltyRate=${null==n?void 0:n.rate}, finalPenaltyRate=${a}, expression='${o}'`),Oa.push({commodity:R.data.data.name,analytical_assay:p(null==(Xt=Pa[R.data.data.code])?void 0:Xt.analytical_assay,4),deduction_expression:o,assay_uom:null==(zt=Pa[R.data.data.code])?void 0:zt.assay_uom,penalty_rate:p(null==n?void 0:n.rate,4),penalty_per_uom:t,final_penalty_rate:p(a,4),final_penalty:p((null!=a?a:1)*da.dry_weight)})}}console.log(`[generateInvoice][parcel=${ta[ne]}::invoice type=${ea}] evaluated commodities=${JSON.stringify(Na)}`),console.log(`[generateInvoice][parcel=${ta[ne]}::invoice type=${ea}] evaluated penalties${JSON.stringify(Oa)}`);const Ia=Na.reduce(((e,t)=>e+$(t.price)),0),Ua=Na.reduce(((e,t)=>{var a;return e+$(null==(a=t.treatment_charge)?void 0:a.final_amount)}),0),Fa=Na.reduce(((e,t)=>{var a;return e+$(null==(a=t.refining_charge)?void 0:a.final_amount)}),0),ka=Oa.reduce(((e,t)=>e+$(t.final_penalty)),0);console.log(`[generateInvoice][parcel=${ta[ne]}::invoice type=${ea}] TOTAL_REVENUE=${Ia}, TOTAL_TREATMENT_CHARGE=${Ua}, TOTAL_REFINING_CHARGE=${Fa}, TOTAL_PENALTIES=${ka}`);let ja,Ba=0;const Va=!!ta[re];Va&&(Ba=ta[re].reduce(((e,t)=>e+t.amount),0),ja={adjustments:ta[re].map((e=>({description:e.description,amount:p(e.amount)}))),total_adjustments:p(Ba)});const xa=ia[Ne],Ja=Ia+Ua+Fa+ka,Ra=null!=xa?Ja*xa/100+(null!=Ba?Ba:0):void 0;let qa,Wa=0;(Zt=Ca.data.data)&&"object"==typeof Zt&&Zt[Pe]&&(Wa=Ca.data.data[Ce]/100,qa=Ja*Wa);const Ga=await s.get(`/items/${xt}/${ta[L]}`,{params:{fields:[Jt]}});Da(Ga.data.data);const La=ta[te];let Ha;La&&(Ha=await s.get(`/items/${Rt}/${La}`,{params:{fields:[qt]}}),function(e){if(console.log("[validateVessel]"),!e)throw new Error("Vessel for parcel not found");if(!e[qt])throw new Error("No name defined for vessel of the selected parcel")}(Ha.data.data));let Qa=(await s.get(`/items/${Qt}?filter[${Kt}]=${i}`,{params:{fields:["id",Yt]}})).data.data.reduce(((e,t)=>e+(t[Yt]?1:0)),0)+1;const Ka=Qa.toString().padStart(2,"0"),Ya=(ta[ne],{Parcel:`${ta[ne]}`,Counterparty:Ga.data.data[Jt],Vessel:Ha?Ha.data.data[qt]:"Vessel TBA","Shipment Date":ta[X]?A(new Date(ta[X])):ta[Z]?A(new Date(ta[Z])):"N/A","Arrival Date":ta[K]?A(new Date(ta[K])):ta[Y]?A(new Date(ta[Y])):"N/A",Status:ta[X]?"Unfinalised":"Planned",Revision:"Valuation",Invoice:`${ea}:Valuation`,"Invoice Due Date":A(e.dueDate),"Dry Weight":`${p(da.dry_weight,2)}`,"Dry Weight UOM":da.dry_weight_uom,...await ya(Na,{dryWeight:da.dry_weight,dryWeightUom:da.dry_weight_uom}),"Total Revenues USD":p(Ia),"Total Penalties USD":p(ka+Ua+Fa),"Total Adjustments USD":Va?ja.total_adjustments:"0.00","Parcel Value USD":p(Ja),"Parcel Payable Value USD":p(Ra),"Payments USD":"-","GST Payable USD":p(qa),"Due Total":"-",metadata:{invoiceTypeRanking:sa[ea]}});return console.log(`[generateInvoice][parcel=${ta[ne]}::invoice type=${ea}] generated forecast invoice=${JSON.stringify(Ya)}`),Ya}catch(t){if(t instanceof ua)return void console.error(`[generateInvoice][parcel=${e.parcelId}::invoice type=${e.invoiceType}]Non-fatal error: ${t.message}`);throw new Error(t.message+` (parcel ${e.parcelId}, invoice type ${e.invoiceType})`)}var Zt}(e))))),n=function(e){const t=e.reduce(((e,t)=>(e[t.Parcel]||(e[t.Parcel]=[]),e[t.Parcel].push(t),e)),{});Object.keys(t).forEach((e=>{t[e].sort(((e,t)=>e.metadata.invoiceTypeRanking<t.metadata.invoiceTypeRanking?-1:e.metadata.invoiceTypeRanking>t.metadata.invoiceTypeRanking?1:0))})),console.log(`[evaluateDuePaymentsForCashflow] cashflowByParcel=${JSON.stringify(t)}`),Object.keys(t).forEach((e=>{t[e].forEach(((a,o)=>{if(!a["Parcel Payable Value USD"]||"-"===a["Parcel Payable Value USD"])throw new Error(`Parcel ${e} for invoice ${a.Invoice} does not have a Parcel Payable Value USD`);const n=$(a["Parcel Payable Value USD"]);if(isNaN(n))throw new Error(`Parcel ${e} for invoice ${a.Invoice} has an invalid Parcel Payable Value USD of ${a["Parcel Payable Value USD"]}`);if(0===o){a["Payments USD"]=a["Payments USD"]&&"-"!==a["Payments USD"]?a["Payments USD"]:"0.00";const e=$(a["Payments USD"]);a["Due Total"]=p(n-e)}else{if(!t[e][o-1]["Parcel Payable Value USD"]||"-"===t[e][o-1]["Parcel Payable Value USD"])throw new Error(`Parcel ${e} for invoice ${a.Invoice} does not have a Parcel Payable Value USD for the previous invoice`);const r=$(t[e][o-1]["Parcel Payable Value USD"]);if(isNaN(r))throw new Error(`Parcel ${e} for invoice ${a.Invoice} has an invalid Parcel Payable Value USD of ${t[e][o-1]["Parcel Payable Value USD"]} for the previous invoice`);a["Due Total"]=p(n-r),a["Payments USD"]&&"-"!==a["Payments USD"]||(a["Payments USD"]=t[e][o-1]["Payments USD"],a["GST Payable USD"]&&"-"!==a["GST Payable USD"]&&(a["GST Payable USD"]=p($(a["GST Payable USD"])-$(t[e][o-1]["GST Payable USD"]))))}}))})),console.log(`[evaluateDuePaymentsForCashflow] cashflowByParcel=${JSON.stringify(t)}`);const a=Object.keys(t).flatMap((e=>t[e]));return console.log(`[evaluateDuePaymentsForCashflow] cashflowAsJsonWithDueTotal=${JSON.stringify(a)}`),a}(o.filter((e=>!!e))),l=n.map((e=>(delete e.metadata,e))),u=new Date(c.value[ta]),f=new Date(c.value[ea]),y=l.filter((e=>new Date(e["Invoice Due Date"])>=u&&new Date(e["Invoice Due Date"])<=f));a("input",y),console.log(`[generateCashflow] cashflow response: ${JSON.stringify(y)}`);const v=ca(y);console.log(`[generateCashflow] cashflow as csv: ${v}`),i.value=!1,fa(v)}catch(e){r.value=e.message}finally{i.value=!1}},downloadDoc:fa,copy:async function(){l.value=!0;const{id:e,user_created:t,date_created:a,user_updated:o,date_updated:n,cashflow:i,forecast_price:d,...u}=c.value,f=await s.get(`/items/${aa}`,{params:{filter:{[B]:{_in:d}},fields:[oa,ra,ia,na]}}),m=await s.post(`items/${aa}`,f.data.data);if(200!==m.status)return console.log(`[cashflow::copy] duplicate forecast prices response status: ${m.status}`),void(r.value=`Failed to duplicate forecast prices with status ${m.status}`);const p=m.data.data.map((e=>e.id));console.log(`[cashflow::copy] duplicated forecast prices id=${JSON.stringify(p)}`),console.log(`[cashflow::copy] requestBody=${JSON.stringify(u)}`);const y=await s.post("/items/"+q,{forecast_price:p,...u});if(200!==y.status)return console.log(`[cashflow::copy] copy response status: ${y.status}`),void(r.value=`Failed to duplicate cashflow with status ${y.status}`);l.value=!1,window.open(`/admin/content/${q}/${y.data.data.id}`)},isCopying:l,failureReason:r};function fa(e){let t;t=m(e)?ca(c.value.cashflow):e,console.log(`[downloadDoc] csvData=${t}`),da(t)}async function ma(e,t,a,o,n,r=!1){if(null===n&&(m(a[ee])||m(a[ee][e])))throw new Error(`QP Selection is not set for commodity ${t} in the parcel ${a[ne]}, please ensure all contract commodities have a QP selection`);if(m(a[ee])||m(a[ee][e]))return await n();const i=await async function(e,t,a,o){var n,r;if(o&&!e.declared)return null;const i=null==e?void 0:e.qp_selected;if(!i)return null;const l=i.split(" "),s={qp_period:parseInt(l[0]),qp_code:l[1]};let c,d,u,f;switch(s.qp_code){case"MAMA":c=null!=(n=t[K])?n:t[Y],d="Actual/Estimated Arrival Date";break;case"MOSS":c=t[Z],d="Estimated Shipment Date";break;case"MOS":case"MOAS":c=null!=(r=t[X])?r:t[Z],d="B/L Date (or Estimated Shipment Date)";break;default:throw new Error(`Unsupported QP code ${s.qp_code} in the contract commodities, please ensure all commodity QP codes are MAMA, MOS, MOSS, or MOAS`)}if(m(c))throw new Error(`Please fill in a date for the field '${d}' for the Parcel form, for QP: ${i}`);const p=new Date(c);return u=M(p,s.qp_period),f=I(p,s.qp_period),{provisionalPricingStartDate:u,provisionalPricingEndDate:f,expectedNoOfBusinessDays:null}}(a[ee][e],a,0,r);return i||await n()}async function pa(e,t,a,o){var n,r;let i,l,s,c;switch(e.qp_code){case"MAMA":c=null!=(n=t[K])?n:t[Y],i="Actual/Estimated Arrival Date";break;case"MOSS":case"MOS":case"MOAS":c=null!=(r=t[X])?r:t[Z],i="B/L Date (Estimated Shipment Date)";break;default:throw new Error(`Unsupported QP code ${e.qp_code} in the contract ${a}, please ensure all commodity QP codes are MAMA, MOS, MOSS, or MOAS`)}if(m(c))throw new Error(`No reference day provided for ${i} from contract ${a} for commodity ${o}`);const d=new Date(c);return l=M(d,e.qp_period),s=I(d,e.qp_period),{provisionalPricingStartDate:l,provisionalPricingEndDate:s,expectedNoOfBusinessDays:null}}async function ya(e,t){console.log(`[mapOutCommoditiesForCashflow] commodities=${JSON.stringify(e)};;containedMetalParam=${JSON.stringify(t)}`);return(await Promise.all(e.map((async e=>{var a,o,n,r,i,l,s,c,d,u;const f=await j(e.payable_metal_uom,t.dryWeightUom,e.assay_uom);console.log(`[mapOutCommoditiesForCashflow] commodity=${e.commodity}, containedMetalUnitConversion=${JSON.stringify(f)}`);const m=((null==(a=f.initialConversion)?void 0:a.isConvertByMultiplication)?null!=(n=null==(o=f.initialConversion)?void 0:o.conversionFactor)?n:1:1/(null!=(i=null==(r=f.initialConversion)?void 0:r.conversionFactor)?i:1))*((null==(l=f.finalConversion)?void 0:l.isConvertByMultiplication)?null!=(c=null==(s=f.finalConversion)?void 0:s.conversionFactor)?c:1:1/(null!=(u=null==(d=f.finalConversion)?void 0:d.conversionFactor)?u:1)),y=("%"===e.assay_uom?.01:1)*e.analytical_assay;return{[`${e.commodity} Payable Metal (${e.payable_metal_uom})`]:e.payable_metal,[`${e.commodity} Contained Metal (${e.payable_metal_uom})`]:p(t.dryWeight*y*m),[`${e.commodity} Revenue (USD)`]:e.price,[`${e.commodity} QP Month`]:va(new Date(e.qp_start_date)),[`${e.commodity} Price (USD/${e.price_per_uom})`]:e.price_rate,...!!e.treatment_charge&&{[`${e.commodity} TC (USD)`]:e.treatment_charge.final_amount,[`${e.commodity} TC (USD/${e.treatment_charge.per_uom})`]:e.treatment_charge.final_rate},...!!e.refining_charge&&{[`${e.commodity} RC (USD)`]:e.refining_charge.final_amount,[`${e.commodity} RC (USD/${e.refining_charge.per_uom})`]:e.refining_charge.final_rate}}})))).reduce(((e,t)=>({...e,...t})),{})}function va(e){return`${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][e.getMonth()]} ${e.getFullYear()}`}async function ha(e,t,a,o,n,r,i=null,l=1){var d;if(console.log(`[getCommodityAvgPrice] commodity=${e}, commodityId=${t}, source=${a}, startDate=${o}, endDate=${n}, currency=${l}`),m(e))throw new Error(`Commodity ${e} is not defined for price calcualtion`);if(m(a))throw new Error(`Price method for commodity ${e} is not defined for price calcualtion`);if(m(o))throw new Error(`Start date is not defined for price calcualtion with Price Method #${a} has not been properly defined, please ensure that contract QP for commodity ${e} is properly defined`);if(m(n))throw new Error(`End date is not defined for price calcualtion with Price Method #${a} has not been properly defined, please ensure that contract QP for commodity ${e} is properly defined`);const u=new Date(o.valueOf()),f=new Date(n.valueOf());null===r||isNaN(r)?null===r&&f.setDate(f.getDate()+10):u.setDate(u.getDate()-10);const p=await s.get(`/items/navarch_commodity_price?filter[_and][0][price_method][_eq]=${a}&filter[_and][0][currency][_eq]=${l}&filter[_and][1][date][_between][0]=${T(u)}&filter[_and][1][date][_between][1]=${T(f)}&sort[]=-${Ht}`,{params:{fields:[Wt,Gt,Lt,Ht,"price_method"]}});if((null==(d=p.data)?void 0:d.data)&&Array.isArray(p.data.data)&&p.data.data.length>0){const t=p.data.data[0],l=new Date(t[Ht]);if(console.log(`[getCommodityAvgPrice] commodity prices=${JSON.stringify(p.data.data)}`),l>=n||null===r){if(null!=r&&p.data.data.length<r)throw new Error(`Not enough commodity prices found for commodity ${e} between ${T(o)} and ${T(n)}, please contact Navarch for support`);const t=null===r||isNaN(r)?p.data.data.filter((e=>{const t=new Date(e[Ht]);return t>=o&&t<=n})):p.data.data.slice(0,r),l=t.reduce(((t,o)=>{if(!o[Lt]&&!o[Gt]&&!o[Wt])throw new Error(`Commodity ${e} for Price Method #${a} on the date of ${o[Ht]} does not have a price, please contact Navarch for assistance`);let n;if("PM"===i){if(null===o[Gt])throw new Error(`The price data for the commodity ${e} does not have a Closing Price (PM) for the date of ${o[Ht]}, please choose another price fix or provide a Price PM for this date`);n=Number(o[Gt])}else if("AM"===i){if(null===o[Wt])throw new Error(`The price data for the commodity ${e} does not have an Opening Price (AM) for the date of ${o[Ht]}, please choose another price fix or provide a Price AM for this date`);n=Number(o[Wt])}else if("Average"===i){if(null===o[Lt])throw new Error(`The price data for the commodity ${e} does not have an Average Price for the date of ${o[Ht]}, please choose another price fix or provide an Average Price for this date`);n=Number(o[Lt])}else if(null!==o[Lt])n=Number(o[Lt]);else if(null!==o[Gt])n=Number(o[Gt]);else{if(null===o[Wt])throw new Error(`The commodity price for ${e} of Price Method #${a} for the date of ${o[Ht]} is not a valid number, please contact Navarch for assistance`);n=Number(o[Wt])}return t+n}),0)/t.length;return console.log(`[getCommodityAvgPrice] average price=${l} for commodity ${e} between ${T(o)} (with over-adjusted start date of ${T(u)}) and ${T(n)}`),{averagePrice:l,startDate:new Date(t[t.length-1][Ht]),endDate:new Date(t[0][Ht])}}console.log(`[getCommodityAvgPrice] latest comm price date=${l} is before end date=${n}, getting forecast price`)}if(!c.value[B])throw new Error("Please save the Cashflow form first before generating the cashflow doc");const y=await s.get(`/items/${aa}`,{params:{filter:{[oa]:{_eq:t},cashflow_forecast_id:{_eq:c.value[B]}},fields:[na,oa,ra,ia]}});!function(e,t){if(!e||!Array.isArray(e)||0===e.length)throw new Error(`No forecast price found for ${t}, please ensure prices have been provided`)}(y.data.data,e);const v=y.data.data.find((e=>{const t=new Date(e[ra]),a=new Date(e[ia]);return t<=o&&a>=n}));if(!v)throw new Error(`No single forecast price found for commodity ${e} between ${T(o)} and ${T(n)}, please ensure there is only one price value for this range`);return console.log(`[getCommodityAvgPrice] forecast price=${v[na]} for commodity ${e} between ${T(o)} and ${T(n)}`),{averagePrice:v[na],startDate:o,endDate:n}}function _a(e,t){var a,o,n;if(console.log("[validateCommodityData]"),!e)throw new Error("commodity data response is null");if(!e[Pt])throw new Error(`Commodity name for commodity ${null!=(a=e[Ct])?a:t} is undefined, please contact Navarch for assistance`);if(!e[Ct])throw new Error(`Commodity code for commodity ${null!=(o=e[Pt])?o:t} is not defined, please contact Navarch for assistance`);if(!e[B])throw new Error(`Commodity ID for commodity ${null!=(n=e[Pt])?n:t} is not defined, please contact Navarch for assistance`)}function ga(e,t){if(!e)throw new Error(`Price per UOM for commodity ${t} is not a valid`);if(!e[Nt])throw new Error(`Price per UOM for commodity ${t} does not have a valid unit symbol, please contact Navarch for assistance`)}function $a(e,t){if(!e)throw new Error(`Charge per UOM for commodity ${t} is not a valid`);if(!e[Nt])throw new Error(`Charge per UOM for commodity ${t} does not have a valid unit symbol, please contact Navarch for assistance`)}function wa(e,t){if(!e)throw new Error(`Penalty per UOM for commodity ${t} is not a valid`);if(!e[Nt])throw new Error(`Penalty per UOM for commodity ${t} does not have a valid unit symbol, please contact Navarch for assistance`)}function Da(e){if(console.log("[validateCounterparty]"),!e)throw new Error("Counterparty for parcel not found");if(!e[Jt])throw new Error("No codename defined for counterparty of the selected parcel")}}});const $={key:0},w={key:1};var D=[],b=[];!function(e,t){if(e&&"undefined"!=typeof document){var a,o=!0===t.prepend?"prepend":"append",n=!0===t.singleTag,r="string"==typeof t.container?document.querySelector(t.container):document.getElementsByTagName("head")[0];if(n){var i=D.indexOf(r);-1===i&&(i=D.push(r)-1,b[i]={}),a=b[i]&&b[i][o]?b[i][o]:b[i][o]=l()}else a=l();65279===e.charCodeAt(0)&&(e=e.substring(1)),a.styleSheet?a.styleSheet.cssText+=e:a.appendChild(document.createTextNode(e))}function l(){var e=document.createElement("style");if(e.setAttribute("type","text/css"),t.attributes)for(var a=Object.keys(t.attributes),n=0;n<a.length;n++)e.setAttribute(a[n],t.attributes[a[n]]);var i="prepend"===o?"afterbegin":"beforeend";return r.insertAdjacentElement(i,e),e}}(".margin-top-16px[data-v-64969d30] {\n  margin-top: 16px;\n}",{}),g.render=function(e,t,a,o,n,y){const v=r("v-button"),h=r("v-notice");return i(),l(s,null,[c(' <input :value="value" @input="handleChange($event.target.value)" /> '),c(" create a button only interface for Directus"),e.value?(i(),l("div",w,[d(v,{onClick:t[1]||(t[1]=()=>e.downloadDoc())},{default:u((()=>[f("Download Cashflow ")])),_:1})])):(i(),l("div",$,[d(v,{onClick:t[0]||(t[0]=()=>e.generateCashflow()),loading:e.isGeneraingDoc},{default:u((()=>[f("Generate Cashflow")])),_:1},8,["loading"]),e.failureReason?(i(),m(h,{key:0},{default:u((()=>[f(p(e.failureReason),1)])),_:1})):c("v-if",!0)])),d(v,{class:"margin-top-16px",onClick:t[2]||(t[2]=()=>e.copy()),loading:e.isCopying},{default:u((()=>[f("Copy")])),_:1},8,["loading"])],64)},g.__scopeId="data-v-64969d30",g.__file="src/interface.vue";var E=t({id:"navarch-docgen-cashflow",name:"Navarch Cashflow Generator Button",icon:"receipt_long",description:"This is my custom interface for Navarch's Cashflow Doc!",component:g,options:null,types:["json"],group:"standard"});export{E as default};
