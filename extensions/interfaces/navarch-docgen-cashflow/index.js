import{useApi as e,defineInterface as t}from"@directus/extensions-sdk";import{defineComponent as a,ref as o,inject as n,resolveComponent as r,openBlock as i,createElementBlock as l,Fragment as s,createCommentVNode as c,createVNode as d,withCtx as u,createTextVNode as m,createBlock as f,toDisplayString as y}from"vue";var p=(e=>(e.BRACKET="Brackets",e.MIN_DEDUCTION="Minimum Deduction",e.MAX_CAP="Maximum Cap",e))(p||{}),h=(e=>(e.PERCENTAGE="Percentage",e.FRACTIONAL="Fractional",e))(h||{}),v=(e=>(e.WET_WEIGHT="wet_weight",e.MOISTURE="moisture",e.DRY_WEIGHT="dry_weight",e))(v||{}),_=(e=>(e.METHOD="method",e.WET_WEIGHT_UOM="wet_weight_uom",e.MOISTURE_UOM="moisture_uom",e.DRY_WEIGHT_UOM="dry_weight_uom",e))(_||{}),g=a({props:{value:{type:Object,default:null}},emits:["input"],setup(t,{emit:a}){const r=o(""),i=o(!1),l=e(),s=n("values",o({}));function c(e){if(console.log("[evaluateWeightData]"),0===e.length)return;const t=u(e,v.DRY_WEIGHT),a=u(e,v.WET_WEIGHT);return{method:d(e,_.METHOD),lots:e,dry_weight_uom:d(e,_.DRY_WEIGHT_UOM),wet_weight_uom:d(e,_.WET_WEIGHT_UOM),dry_weight:t,wet_weight:a,moisture:(a-t)/a*100}}function d(e,t){if(console.log("[getFirstValueAsSharedValue]"),0!==e.length)return console.log(`lots[0][${t.toString()}]=${e[0][t.toString()]}`),e[0][t.toString()]}function u(e,t){return console.log("[evaluateAggregateValue]"),e.reduce(((e,a)=>{var o;return e+(null!=(o=a[t.toString()])?o:0)}),0)}function m(e){return null==e}function f(e,t=2,a=!0){if(console.log("[formatNumber]"),isNaN(e)||null===e)return"-";const o=Math.round(e*Math.pow(10,t))/Math.pow(10,t),[n,r]=o.toString().split("."),i=n.replace(/\B(?=(\d{3})+(?!\d))/g,",");if(!r&&!a)return i;return`${i}.${(null!=r?r:"").padEnd(t,"0")}`}function y(e){if(console.log("[parseNumber]"),!e)return 0;const t=parseFloat(e.replace(/,/g,""));return console.log(`[parseNumber] number: ${e} to ${t}`),t}function g(e,t,a){var o,n,r;if(console.log("[findBracket]"),1===e.length){if(t>=(null!=(o=e[0].lower_threshold)?o:0)&&(null===e[0].upper_threshold||void 0===e[0].upper_threshold||t<e[0].upper_threshold))return e[0];throw new Error(`Evaluated monetary value $${t} does not fall within the only ${a.type} bracket with range ${null!=(n=e[0].lower_threshold)?n:0} - ${null!=(r=e[0].upper_threshold)?r:"âˆž"}`)}return e.find((e=>{var a,o;const n=t>(null!=(a=e.lower_threshold)?a:0)&&(null===e.upper_threshold||void 0===e.upper_threshold||t<e.upper_threshold)||e.lower_threshold_inclusive&&t===(null!=(o=e.lower_threshold)?o:0)||e.upper_threshold_inclusive&&t===e.upper_threshold;return console.log(`[findBracket] value=${t} for bracket: ${JSON.stringify(e)}? match=${!!n}`),n}))}function $(e,t){var a,o,n,r,i,l,s;console.log("[evaluateFinalValueFromBrackets]");const c=(e-(null!=(a=t.initial_adjustment)?a:0)*(null!=(o=t.initial_adjustment_conversion_factor)?o:1))*(null!=(n=t.rate)?n:0)*(t.rate_type===h.PERCENTAGE?.01:1)+(null!=(r=t.final_adjustment)?r:0)*(null!=(i=t.final_adjustment_conversion_factor)?i:1);switch(t.bracket_type){case p.MIN_DEDUCTION:if(null===t.comparator||void 0===t.comparator)throw new Error("Minimum deduction not found");const a=t.comparator*(null!=(l=t.comparator_conversion_factor)?l:1);return e-c<a?e-a:c;case p.MAX_CAP:if(null===t.comparator||void 0===t.comparator)throw new Error("Maximum cap not found");const o=t.comparator*(null!=(s=t.comparator_conversion_factor)?s:1);return c>o?o:c;case p.BRACKET:return c;default:throw new Error(`bracket type ${t.bracket_type} is not supported`)}}async function w(e,t,a,o){var n,r,i,l,s,c,d,u;if(console.log("[evaluatePayableAssay]"),!a||0===a.length)return{};const m=g(a,e,{commodityCode:o,type:"Payable Assay"});if(!m)throw new Error(`Bracket not found for value ${e}, please ensure the brackets for all commodities defined in the contract cover all range of possible values for payable assays`);let y,v,_=1;m.initial_adjustment_uom&&void 0!==m.initial_adjustment_uom&&null!==m.initial_adjustment_uom&&m.initial_adjustment_uom!==t&&(_=await I(m.initial_adjustment_uom,t),y=M(m.initial_adjustment_uom,t));let w,D=1;m.bracket_type===p.MAX_CAP?(v=null!=(n=m.maximum_cap)?n:0,void 0!==m.maximum_cap_uom&&null!==m.maximum_cap_uom&&m.maximum_cap_uom!==t&&(D=await I(m.maximum_cap_uom,t),w=M(m.maximum_cap_uom,t))):m.bracket_type===p.MIN_DEDUCTION&&(v=null!=(r=m.minimum_deduction)?r:0,void 0!==m.minimum_deduction_uom&&null!==m.minimum_deduction_uom&&m.minimum_deduction_uom!==t&&(D=await I(m.minimum_deduction_uom,t),w=M(m.minimum_deduction_uom,t)));const b=$(e,{bracket_type:m.bracket_type,rate:null!=(i=m.rate)?i:1,rate_type:null!=(l=m.rate_type)?l:h.FRACTIONAL,initial_adjustment:null!=(s=m.initial_adjustment)?s:0,initial_adjustment_conversion_factor:_,comparator:v,comparator_conversion_factor:D});let E="";const P=void 0!==m.initial_adjustment&&null!==m.initial_adjustment;if(m.bracket_type===p.BRACKET)E=`${P?"(":""}${f(e,4)}${null!=t?t:""}${P?` - ${f(m.initial_adjustment,4)}${null!=(c=m.initial_adjustment_uom)?c:`${null!=t?t:""}`}`:""}${P&&1!==_?` * ${f(_,4)}${y}`:""}${P?")":""} * ${f(m.rate,4)}${m.rate_type===h.PERCENTAGE?"/100":`/${f(1,4)}`}`;else if(m.bracket_type===p.MIN_DEDUCTION){E=b===e-v*D?`${f(e,4)}${null!=t?t:""} - ${f(v,4)}${null!=t?t:""}${1!==D?` * ${f(D,4)}${w}`:""}`:`${P?"(":""}${f(e,4)}${null!=t?t:""}${P?` - ${f(m.initial_adjustment,4)}${null!=(d=m.initial_adjustment_uom)?d:`${null!=t?t:""}`}`:""}${P&&1!==_?` * ${f(_,4)}${y}`:""}${P?")":""} * ${f(m.rate,4)}${m.rate_type===h.PERCENTAGE?"/100":`/${f(1,4)}`}`}else{if(m.bracket_type!==p.MAX_CAP)throw new Error(`[buildPayableAssayExpression] unknown bracket method: ${m.bracket_type}`);E=b===v*D?`${f(v,4)}${null!=t?t:""}${1!==D?` * ${f(D,4)}${w}`:""}`:`${P?"(":""}${f(e,4)}${null!=t?t:""}${P?` - ${f(m.initial_adjustment,4)}${null!=(u=m.initial_adjustment_uom)?u:`${null!=t?t:""}`}`:""}${P&&1!==_?` * ${f(_,4)}${y}`:""}${P?")":""} * ${f(m.rate,4)}${m.rate_type===h.PERCENTAGE?"/100":`/${f(1,4)}`}`}return{payableAssay:b,expression:E}}console.log("[main] formValues=",s);const D="above the lower threshold, plus",b="below the upper threshold, minus";function E(e,t,a,o){var n,r,i,l;if(console.log("[evaluateTreatmentCharge]"),!a||!a.length)return;const s=g(a,e,{commodityCode:o,type:"Treatment Charge"});if(!s)throw new Error(`Bracket not found for value ${e}, please ensure the brackets for all commodities defined in the contract cover all range of possible values for treatment charge`);let c=0,d=1;if(s.use_btc)d=0,c=0;else if(d=null!=(n=s.rate)?n:1,s.for_every_unit===D)c=null!=(r=s.lower_threshold)?r:0;else{if(s.for_every_unit!==b)throw new Error(`[evaluateTreatmentCharge] unknown for_every_unit: ${s.for_every_unit}`);c=null!=(i=s.upper_threshold)?i:0}const u={bracket_type:p.BRACKET,rate:d,rate_type:h.FRACTIONAL,initial_adjustment:c,final_adjustment:null!=(l=s.base_treatment_charge)?l:0};return console.log(`[evaluateTreatmentCharge] bracketForEvaluation: ${JSON.stringify(u)}`),{finalValue:$(e,u),baseTreatmentCharge:s.base_treatment_charge}}function P(e,t,a,o,n){var r,i,l;if(console.log("[evaluatePenalty]"),!t||!t.length)return{};const s=g(t,e,{commodityCode:n,type:"Penalty"});if(!s)throw new Error(`[evaluatePenalty] Bracket not found for value ${e}, please ensure the brackets for all commodities defined in the contract cover all range of possible values for penalty`);let c=0,d=1;if(s.no_penalty)d=0,c=0;else if(d=null!=(r=s.rate)?r:1,s.for_every_unit===D)c=null!=(i=s.lower_threshold)?i:0;else{if(s.for_every_unit!==b)throw new Error(`[evaluatePenalty] unknown for_every_unit: ${s.for_every_unit}`);c=null!=(l=s.upper_threshold)?l:0}const u={bracket_type:p.BRACKET,rate:d,rate_type:h.FRACTIONAL,initial_adjustment:c,final_adjustment:0};console.log(`[evaluatePenalty] bracketForEvaluation: ${JSON.stringify(u)}`);const m=$(e,u),y=null!=u.initial_adjustment;let v="";return v=s.rate&&0!==s.rate?`${y?"(":""}${f(e,4)}${y?` - ${f(c,4)})`:""} / ${f(1,4)} * ${null!=a?a:""} ${f(d,4)}/${null!=o?o:""}`:"No penalty",{penalty:m,expression:v,bracket:s}}function C(e){const t=e.getDate(),a=e.getMonth(),o=e.getFullYear();return`${t} ${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][a]} ${o}`}function S(e,t=!0){const a=e.getMonth()+1,o=e.getDate();return`${e.getFullYear()}${t?"-":" "}${a<10?"0":""}${a}${t?"-":" "}${o<10?"0":""}${o}`}function A(e,t,a=!1){const o=new Date(e.valueOf());let n=t-(a?1:0);for(;n>0;)o.setDate(o.getDate()-1),0!==o.getDay()&&6!==o.getDay()&&(n-=1);return o.getHours()>=12&&o.setDate(o.getDate()+1),o}function N(e,t,a=!1){const o=new Date(e.valueOf());let n=t-(a?1:0);for(;n>0;)o.setDate(o.getDate()+1),0!==o.getDay()&&6!==o.getDay()&&(n-=1);return o.getHours()>=12&&o.setDate(o.getDate()+1),o}function O(e,t){const a=new Date(e.valueOf());return a.setMonth(a.getMonth()+t,1),a}function T(e,t){const a=new Date(e.valueOf());return a.setMonth(a.getMonth()+t+1,0),a}async function U(e,t){if(e===t)return 1;const a=await l.get(`/items/${ft}?filter[${yt}]=${e}`,{params:{fields:[gt]}});if(0===a.data.data.length||null===a.data.data[0][gt]||void 0===a.data.data[0][gt])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for source weight unit ${e}. Ensure that the symbol is correct and is a weight unit symbol`);const o=await l.get(`/items/${ft}?filter[${yt}]=${t}`,{params:{fields:[gt]}});if(0===o.data.data.length||null===o.data.data[0][gt]||void 0===o.data.data[0][gt])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for the target weight unit ${t}. Ensure that the symbol is correct and is a weight unit symbol`);const n=parseFloat(a.data.data[0][gt]);if(isNaN(n))throw new Error(`[getWeightUnitConversionValue] source weight unit ${e} conversion value=${n} is not a number`);const r=parseFloat(o.data.data[0][gt]);if(isNaN(r))throw new Error(`[getWeightUnitConversionValue] target weight unit ${t} conversion value=${r} is not a number`);return n/r}async function I(e,t){if(null==e||null==t)return 1;if(e===t)return 1;const a=await l.get(`/items/${$t}?filter[${wt}]=${e}`,{params:{fields:[Dt]}});if(0===a.data.data.length||void 0===a.data.data[0][Dt]||null===a.data.data[0][Dt])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for source weight unit ${e}. Ensure that the symbol is correct and is a weight unit symbol`);const o=await l.get(`/items/${$t}?filter[${wt}]=${t}`,{params:{fields:[Dt]}});if(0===o.data.data.length||void 0===o.data.data[0][Dt]||null===o.data.data[0][Dt])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for the target weight unit ${t}. Ensure that the symbol is correct and is a weight unit symbol`);const n=parseFloat(a.data.data[0][Dt]);if(isNaN(n))throw new Error(`[getAssayUnitConversionValue] source weight unit ${e} conversion value=${n} is not a number`);console.log(`[getAssayUnitConversionValue] source unit conversion value=${n}`);const r=parseFloat(o.data.data[0][Dt]);if(isNaN(r))throw new Error(`[getAssayUnitConversionValue] target weight unit ${e} conversion value=${r} is not a number`);return console.log(`[getAssayUnitConversionValue] target unit conversion value=${r}`),console.log("[getAssayUnitConversionValue] returning "+n/r),n/r}function M(e,t){if(void 0===e||void 0===t||null===e||null===t)return;const a=e.split("/"),o=t.split("/");if(a.length>2||o.length>2)throw new Error(`[getConversionUnit] sourceUnit=${e} and targetUnit=${t} must be in the format of 'unit1/unit2', an extra '/' was found`);if(1===a.length&&1===o.length)return`${o[0]}/${a[0]}`;if(1===a.length){const e=o[0]===a[0]?"":`${o[1]}(${a[1]})`,t=o[1];return""===t?e:`${e}/${t}`}if(1===o.length){const e=a[1],t=a[0]===o[0]?"":`${a[1]}(${o[0]})`;return""===t?e:`${e}/${t}`}{const e=a[0]===o[0],t=a[1]===o[1],n=e||""===a[0],r=e||""===o[0],i=t||""===a[1],l=t||""===o[1],s=!i&&!r,c=!n&&!l,d=`${i?"":a[1]}${s?"(":""}${r?"":`${o[0]}`}${s?")":""}`,u=`${n?"":a[0]}${c?"(":""}${l?"":`${o[1]}`}${c?")":""}`;return""===u?d:`${d}/${u}`}}async function k(e,t,a){const o=await l.get(`/items/${ft}?filter[${pt}]=${t}`,{params:{fields:[yt]}});if(!o.data.data||!o.data.data[0]||!o.data.data[0][yt])throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] Dry weight uom not found for symbol ${t}`);const n=o.data.data[0][yt];if("%"===a){if(n===e)return{};const t=M(n,e);if(!t)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] no conversion unit found for dry weight unit ${n} and target weight unit ${e}`);return{finalConversion:{conversionFactor:await U(n,e),conversionUom:t}}}let r=a.split("/");if(1==r.length){const e=await async function(e){const t=await l.get(`/items/${$t}`,{params:{fields:[wt,bt],filter:{[bt]:{_nnull:!0},[wt]:{_eq:e}}}});if(200!==t.status||!t.data||0===t.data.data.length)throw new Error("[getAssayUnitComposition] no assay units found with composition");return t.data.data[0][bt]}(a);if(!e)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${a} does not have a composition`);r=e.split("/")}if(r.length>2||0===r.length)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${a} is not in the format of 'unit1/unit2'`);const i=r[0],s=r[1],c={};if(s!==n){const e=M(n,s);if(!e)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] no conversion unit found for dry weight unit ${n} and assay unit denominator unit ${s}`);c.initialConversion={conversionFactor:await U(n,s),conversionUom:e}}if(i!==e){const t=M(i,e);if(!t)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] no conversion unit found for target weight unit ${e} and assay unit numerator unit ${i}`);c.finalConversion={conversionFactor:await U(i,e),conversionUom:t}}return c}const F="id",j="foreign_key",V="lot_number",B="method",J="navarch_parcel",R="contract",q="counterparty",x="assay_results",L="weight_result",W="actual_arrival_date",G="estimate_arrival_date",H="bl_date",K="estimated_shipment_date",Q="vessel",Y="origin",X="destination",z="shipment_code",Z="adjustments",ee="parcel_finalisation_date",te="navarch_assay_lot",ae="commodity",oe="dry_weight",ne="final_assay",re="assay_uom",ie="lot_number",le="navarch_weight_lot",se="dry_weight",ce="wet_weight",de="moisture",ue="wet_weight_uom",me="dry_weight_uom",fe="navarch_contract",ye="contract_currency",pe="name",he="navarch_contract_payment_information",ve="related_contract",_e="invoice_type",ge="pay_percent",$e="pa_days",we="pa_day_type",De="pa_ref_day",be="pa_cashflow_days",Ee="pa_cashflow_day_type",Pe="pp_days",Ce="pp_day_type",Se="pp_ref_day",Ae="navarch_commodity_in_contract",Ne="contract",Oe="commodity",Te="primary_commodity",Ue="price_method",Ie="price_per_uom",Me="treatment_charge_per_uom",ke="quotational_periods",Fe="payable_assay_rates",je="treatment_charge_rates",Ve="penalty_rates",Be="penalty_per_uom",Je="navarch_payable_assay_bracket",Re="initial_adjustment",qe="initial_adjustment_uom",xe="minimum_deduction",Le="minimum_deduction_uom",We="maximum_cap",Ge="maximum_cap_uom",He="related_commodity_in_contract",Ke="bracket_type",Qe="lower_threshold",Ye="lower_threshold_inclusive",Xe="upper_threshold",ze="upper_threshold_inclusive",Ze="rate",et="rate_type",tt="navarch_treatment_charge_bracket",at="base_treatment_charge",ot="use_btc",nt="for_every_unit",rt="navarch_penalty_bracket",it="no_penalty",lt="for_every_unit",st="navarch_commodity",ct="name",dt="code",ut="navarch_currency",mt="code",ft="navarch_unit",yt="symbol",pt="dry_symbol",ht="wet_symbol",vt="dry_unit",_t="wet_unit",gt="conversionToGram",$t="navarch_assay_unit",wt="unit",Dt="conversion_to_ppb",bt="composition",Et="navarch_counterparty",Pt="codename",Ct="name",St="navarch_vessel",At="name",Nt="price_pm",Ot="average_price",Tt="date",Ut="navarch_invoices",It="parcel",Mt="invoice",kt="amount_paid",Ft="invoice_type",jt="commodity",Vt="price",Bt="start_date",Jt="end_date",Rt={Advance:0,"Second Advance":1,"Third Advance":2,"Fourth Advance":3,Provisional:4,"Second Provisional":5,"Third Provisional":6,"Fourth Provisional":7,Final:8};class qt extends Error{constructor(e){super(e),this.name="NonFatalError",Object.setPrototypeOf(this,qt.prototype)}}return{isGeneraingDoc:i,invoiceUrl:s.value,generateCashflow:async function(){r.value="";try{i.value=!0;const e=await async function(){const e=new Date(s.value.start_date);if("Invalid Date"===e.toString())throw r.value="Start date is invalid",new Error("Start date is invalid");const t=new Date(s.value.end_date);if("Invalid Date"===t.toString())throw r.value="End date is invalid",new Error("End date is invalid");const a=await l.get(`/items/${fe}`,{params:{fields:[pe,F,"invoice_type"]}}),o={};await Promise.all(a.data.data.map((async a=>{var n,r,i,s,c;const d=await l.get(`/items/${he}`,{params:{filter:{[ve]:{_eq:a[F]}},fields:[_e,$e,we,De,be,Ee]}}),u=await l.get(`/items/${J}`,{params:{filter:{[R]:{_eq:a[F]}},fields:[F,z,W,G,H,K,ee]}});for(const m of d.data.data){const d={days:"Final"===m[Ft]?m[be]:m[$e],day_type:"Final"===m[Ft]?m[Ee]:m[we],ref_day:"Final"===m[Ft]?"QP Month + n days":m[De]};if(!d)throw new Error(`Contract ${a[pe]} does not have a payment advice for invoice type ${m[Ft]}`);let f,y="";for(const p of u.data.data){switch(d.ref_day){case"Arrival Date":y="Actual Arrival Date from the Parcel form",f=null!=(n=p[W])?n:p[G];break;case"B/L Date":y="B/L Date (or Estimated Shipment Date) from the Parcel form",f=null!=(r=p[H])?r:p[K];break;case"Invoice Date":y="Invoice Date (using the B/L Date or Estimated Shipment Date from the Parcel form)",f=null!=(i=p[H])?i:p[K];break;case"Estimated Shipment Date":y="Estimated Shipment Date from the Parcel form",f=p[K];break;case"QP Month + n days":const e=await l.get(`items/${Ae}`,{params:{filter:{[Ne]:{_eq:a[F]},payable_commodity:{_eq:!0}},fields:[ke]}});if(!Array.isArray(e.data.data)||0===e.data.data.length)throw new Error(`Contract ${a[pe]} does not have any payable commodities`);const t=e.data.data.map((e=>e[ke].find((e=>!!e.default)))),o=t.reduce(((e,t)=>t.qp_period>e.qp_period?t:e),t[0]);let u;switch(o.qp_code){case"MAMA":y="Actual Arrival Date (or Estimated Arrival Date) from the Parcel form",u=null!=(s=p[W])?s:p[G];break;case"MOSS":case"MOS":case"MOAS":y="B/L Date (or Estimated Shipment Date) from the Parcel form",u=null!=(c=p[H])?c:p[K];break;default:throw new Error(`Unsupported QP code ${o.qp_code}, currently only supports MAMA, MOS, MOSS, and MOAS`)}const m=T(new Date(u),o.qp_period);if(!m||"Invalid Date"===m.toString())throw new Error(`Invalid date for last date of QP month: ${m}, please ensure all fields for QP for contract ${a[pe]} and the ${y} in parcel ${p[z]} are filled in`);f=m.toISOString();break;default:throw new Error(`Invalid reference day for payment advice: ${d.ref_day}; please contact Navarch for support`)}if(null==f)throw new Error(`Reference day for payment advice ${y} is empty in parcel ${p[z]}`);const u=new Date(f),h=parseInt(d.days);let v;switch(d.day_type){case"Business Day(s)":v=N(u,h,!0);break;case"Calendar Day(s)":v=new Date(u.valueOf()),v.getHours()>=12?v.setDate(v.getDate()+h+1):v.setDate(v.getDate()+h);break;default:throw new Error(`Please provide a valid Day Type (Cashflow) for ${a[pe]}:Final Invoice Type`)}v>=e&&v<=t&&(o[p[F]]||(o[p[F]]=[]),o[p[F]].push({invoiceType:m[_e],dueDate:v,parcelId:p[F],contractName:a[pe]}))}}})));const n=Object.keys(o),i=await l.get(`/items/${J}`,{params:{filter:{[F]:{_in:n}},fields:[F,R,q,x,L,W,G,H,K,Q,Y,X,z,Z,"parcel_finalised",ee,x]}});if(!i.data.data||i.data.data.length!==n.length)throw new Error("Experiencing some network issues, please try again. If the issue persists, contact Navarch for support");const c={parcelData:i.data.data.reduce(((e,t)=>(e[t[F]]=t,e)),{}),contractNameByParcelId:n.reduce(((e,t)=>(e[t]=o[t][0].contractName,e)),{}),invoiceTypeParcel:n.flatMap((e=>o[e])),parcelIds:n};return console.log(`[getApplicableParcels] returnObject=${JSON.stringify(c)}`),c}(),t=await async function(e){const t=[],a=await l.get(`/items/${Ut}`,{params:{filter:{[It]:{_in:e.parcelIds},[Mt]:{_nnull:!0}},fields:[It,Ft,Mt,kt]}});for(const o of e.invoiceTypeParcel){const n=a.data.data.find((e=>e[It]===o.parcelId&&e[Ft]===o.invoiceType));n?t.push({parcelId:o.parcelId,invoiceType:o.invoiceType,contractName:e.contractNameByParcelId[o.parcelId],dueDate:o.dueDate,invoiceData:{...n[Mt],amount_paid:n[kt]}}):t.push({parcelId:o.parcelId,invoiceType:o.invoiceType,contractName:e.contractNameByParcelId[o.parcelId],dueDate:o.dueDate,parcelData:e.parcelData[o.parcelId]})}return console.log(`[generateInvoiceParamForParcel] invoiceParams=${JSON.stringify(t)}`),t}(e);console.log(`[generateCashflow] form values=${JSON.stringify(s.value)}`);const o=await Promise.all(t.map((async e=>(console.log(`[generateCashflow] invoiceParam=${JSON.stringify(e)}`),await async function(e){var t,a,o,n,s,d,u,m,p,h,v,_,g,$,D,b,S,N,U,I,M,ee,pe,be,Ee,gt,$t,wt,Dt,bt,Nt,Ot,Tt,kt,Ft,jt,Vt,Bt,Jt;r.value="",i.value=!0;try{if(e.invoiceData){console.log(`[generateInvoice][invoice=${JSON.stringify(e.invoiceData.invoice_number)}::parcel=${e.invoiceData.parcel}] using existing invoice=${JSON.stringify(e.invoiceData)}`);const t=e.invoiceData,a=await l.get(`/items/${Et}`,{params:{filter:{[Ct]:{_eq:t.buyer}},fields:[Pt]}});Yt(a.data.data[0]);const o=await l.get(`/items/${J}`,{params:{filter:{[F]:{_eq:e.parcelId}},fields:[H,W,G]}});console.log(`[generateInvoice][invoice=${JSON.stringify(e.invoiceData.invoice_number)}::parcel=${e.invoiceData.parcel}] parcel date data=${JSON.stringify(o.data.data)}`);const n=o.data.data[0];return{Counterparty:a.data.data[0][Pt],Vessel:"N/A"===t.vessel?"Vessel TBA":t.vessel,"Shipment Date":t.bl_date,"Arrival Date":n[W]?C(new Date(n[W])):n[G]?C(new Date(n[G])):"N/A",Status:o[H]?"Unfinalised":"Planned",Revision:"Original",Invoice:`${t.invoice_type}:Original`,Parcel:t.parcel,"Invoice Due Date":C(e.dueDate),"Dry Weight":t.dry_weight,"Total Revenues USD":t.total_revenue,"Total Penalties USD":t.total_deductions,...await xt(t.commodities,{dryWeight:y(t.dry_weight),dryWeightUom:t.dry_weight_uom}),"Total Adjustments USD":t.adjustments?t.adjustments.total_adjustments:"0.00","Parcel Value USD":t.invoice_value,"Parcel Payable Value(Below Line) USD":t.payable_amount,"Payments USD":t.amount_paid,"Due Total":t.balance_in_sellers_favor,metadata:{invoiceTypeRanking:Rt[t.invoice_type]}}}if(void 0===e.parcelData)throw new qt(`Something went wrong, no parcel or invoice data for Invoice of parcel id ${e.parcelId.substring(0,5)} and invoice type ${e.invoiceType}`);const r=e.parcelId;if(!r)return void console.error(`[generateInvoice] A parcel id is not defined for invoice type ${e.invoiceType}`);const i=e.invoiceType,Lt=e.parcelData,Xt=e.contractName;console.log(`[generateInvoice][parcel=${Lt[z]}::invoice type=${i}] parcel data=${JSON.stringify(Lt)}`),function(e){if(!e)throw new Error("Parcel data not found, please ensure the selected parcel still exists");if(!e[z])throw new Error("One of the parcels does not have a shipment code, please ensure that all parcels have a shipment code");if(!e[R])throw new Error(`The parcel ${e[z]} does not have a contract, please ensure that the contract field for the parcel is not empty`);if(!e[q])throw new Error(`The parcel ${e[z]} does not havea counterparty, please ensure that the counterparty field for the parcel is not empty`);if(!e[x])throw new qt(`The parcel ${e[z]} does not have assay results`);if(!e[L])throw new qt(`The parcel ${e[z]} does not have weight results`);if(!e[Y])throw new Error(`The parcel ${e[z]} does not havean origin port`);if(!e[X])throw new Error(`The parcel ${e[z]} does not havea destination port`)}(Lt);const zt=Lt[x],Zt=Lt[L],ea=Lt[R];if(!ea)throw new Error(`Contract not found for parcel ${Lt[z]}`);const ta=await l.get(`/items/${he}`,{params:{filter:{[ve]:{_eq:ea},[_e]:{_eq:i}},fields:[_e,ge,$e,we,De,Pe,Ce,Se]}});if(ta.data.data&&0===ta.data.data.length)throw new Error(`No invoice type found for the contract ${Xt}`);const aa=ta.data.data.find((e=>e[_e]===i));if(!aa)throw new Error(`Cannot find payment information for ${i} in the contract ${Xt}, please ensure that data for it has been entered and saved`);const oa=await l.get(`/items/${le}?filter[${j}]=${Zt}&sort[]=${V}`,{params:{fields:[F,se,ce,B,de,ue,me]}});console.log(`[generateInvoice][parcel=${Lt[z]}::invoice type=${i}] weight lots data=${JSON.stringify(oa.data.data)}`),function(e){if(!e||0===e.length)throw new qt("No weight lots found for the selected parcel")}(oa.data.data);const na=function(e){console.log("[evaluateWeights]");const t={};for(const a of e)t[a.method]||(console.log(`adding method ${a.method} to weightData object`),t[a.method]=[]),console.log(`adding lot ${a.id} to weightData.${a.method} array`),t[a.method.toString()].push(a);const a=[];for(const e of Object.keys(t)){if(!t[e]){console.log(`method=${e} does not exist in weightData object`);continue}console.log(`adding lots and other values to weights for method=${e}`);const o=c(t[e]);o&&a.push(o)}return a}(oa.data.data);let ra;if(ra||(ra=na.find((e=>"Outturn"===e.method))),ra||(ra=na.find((e=>"Inturn Final"===e.method))),ra||(ra=na.find((e=>"Inturn"===e.method))),ra||(ra=na.find((e=>"Estimated"===e.method))),ra||(ra=na.find((e=>"Planned"===e.method))),!ra)throw new Error(`No weight lots with valid method found for parcel ${Lt[z]}`);if(void 0===ra.dry_weight||null===ra.dry_weight||void 0===ra.wet_weight||null===ra.wet_weight||void 0===ra.moisture||null===ra.moisture||void 0===ra.dry_weight_uom||null===ra.dry_weight_uom||void 0===ra.wet_weight_uom||null===ra.wet_weight_uom||void 0===ra.method||null===ra.method)throw new Error(`One of the fields for the latest weight lots data is undefined for parcel ${Lt[z]}`);const ia=await l.get(`/items/${ft}?filter[${pt}]=${ra.dry_weight_uom}`,{params:{fields:[vt]}}),la=await l.get(`/items/${ft}?filter[${ht}]=${ra.wet_weight_uom}`,{params:{fields:[_t]}});if(!ia.data.data||!ia.data.data[0]||!ia.data.data[0][vt])throw new Error(`Dry weight uom not found for symbol ${ra.dry_weight_uom} for parcel ${Lt[z]}`);if(!la.data.data||!la.data.data[0]||!la.data.data[0][_t])throw new Error(`Wet weight uom not found for symbol ${ra.wet_weight_uom} for parcel ${Lt[z]}`);const sa=ia.data.data[0][vt],ca=(sa.indexOf("dry"),la.data.data[0][_t]),da=(ca.indexOf("wet"),await l.get(`/items/${te}?filter[${j}]=${zt}&sort[]=${V}`,{params:{fields:[F,ae,B,oe,ne,ie,re]}}));console.log(`[generateInvoice][parcel=${Lt[z]}::invoice type=${i}] assay lots data=${JSON.stringify(da.data.data)}`),function(e){if(!e||0===e.length)throw new qt("No assay lots found for the selected parcel")}(da.data.data);const ua=function(e){var t;console.log("[evaluateAnalyticalAssay]");const a={};for(const t of e)a[t.method]||(a[t.method]={}),a[t.method][t.commodity]||(a[t.method][t.commodity]=[]),null!==t.lot_number?(1===a[t.method][t.commodity].length&&null===a[t.method][t.commodity][0].lot_number&&(a[t.method][t.commodity]=[]),a[t.method][t.commodity].push(t)):null===t.lot_number&&0===a[t.method][t.commodity].length&&a[t.method][t.commodity].push(t);console.log(`[evaluateAnalyticalAssay] group: ${JSON.stringify(a)}}`);const o={};for(const e in a){console.log(`[evaluateAnalyticalAssay] methodKey: ${e}, group[methodKey]: ${JSON.stringify(a[e])}`);for(const n in a[e]){console.log(`[evaluateAnalyticalAssay] commodityKey: ${n}, group[methodKey][commodityKey]: ${JSON.stringify(a[e][n])}`),o[e]=null!=(t=o[e])?t:{},o[e][n]={};const r=a[e][n].reduce(((e,t)=>e+t[oe]),0);console.log(`[evaluateAnalyticalAssay] totalDryWeight: ${r} from ${JSON.stringify(a[e][n])}`),o[e][n].analytical_assay=a[e][n].reduce(((e,t)=>e+t[ne]*t[oe]),0)/(0!==r?r:1),console.log(`[evaluateAnalyticalAssay] analytical assay: ${o[e][n].analytical_assay}`),a[e][n].length>0&&(o[e][n][re]=a[e][n][0][re])}}return console.log(`[evaluateAnalyticalAssay] analyticalAssay: ${JSON.stringify(o)}`),o}(da.data.data);let ma;if(ma||(ma=ua.Outturn),ma||(ma=ua["Inturn Final"]),ma||(ma=ua.Inturn),ma||(ma=ua.Estimated),ma||(ma=ua.Planned),!ma)throw new Error(`No assay lot data with a valid method found for parcel ${Lt[z]}`);console.log(`[generateInvoice][parcel=${Lt[z]}::invoice type=${i}] weight lots for invoice evaluation=${JSON.stringify(ra)}`),console.log(`[generateInvoice][parcel=${Lt[z]}::invoice type=${i}] assay lots for invoice evaluation=${JSON.stringify(ma)}`);const fa=await l.get(`/items/${fe}/${ea}`,{params:{fields:[ye]}});!function(e){if(!e)throw new Error("Contract data not found, please ensure the selected contract still exists");if(!e[ye])throw new Error("The selected contract does not have a set currency, please ensure that the currency field for the contract is not empty")}(fa.data.data);const ya=await l.get(`/items/${ut}/${fa.data.data.contract_currency}`,{params:{fields:[mt]}});!function(e){if(!e)throw new Error("Currency data not found, please ensure the selected currency still exists");if(!e[mt])throw new Error("The selected currency in the contract is not valid")}(ya.data.data);const pa=ya.data.data.code,ha=await l.get(`/items/${Ae}?filter[${Ne}]=${ea}`,{params:{fields:["id",Oe,Te,Ue,ke,Fe,je,Ve,Be,Ie,Me]}});!function(e){if(!e||0===e.length)throw new Error("No commodity data found in selected contract for parcel");if(!e.every((e=>e[Oe])))throw new Error("The selected contract has an undefined commodity, please ensure that the 'Commodity' field for all commodites in the contract is not empty");if(!e.every((e=>e[Ie])))throw new Error("The selected contract has an undefined base price Uom for commodity, please ensure that the 'Base Price Uom' field for all commodites in the contract is not empty")}(ha.data.data),console.log(`[generateInvoice][parcel=${Lt[z]}::invoice type=${i}] contract commodity data=${JSON.stringify(ha.data.data)}`);const va=[],_a=[];let ga="";for(const{id:e,commodity:r,primary_commodity:c,price_method:y,quotational_periods:j,price_per_uom:V,penalty_per_uom:B,treatment_charge_per_uom:J}of ha.data.data){const R=await l.get(`/items/${st}/${r}`,{params:{fields:[ct,dt,F]}});if(Gt(R.data.data,r),!ma[R.data.data.code]){console.log(`[generateInvoice][parcel=${Lt[z]}::invoice type=${i}::comm=${R.data.data[ct]}] no analytical assay for commodity ${R.data.data.code} found, skipping...`);continue}if(c&&(ga=R.data.data[ct]),null!==j){const r=j;console.log(`[generateInvoice][parcel=${Lt[z]}::invoice type=${i}::comm=${R.data.data[ct]}] qp=${JSON.stringify(r)}`);const c=Array.isArray(r)?r.find((e=>e.default)):null;if(!c)throw new Error(`No default quotational period found for commodity ${R.data.data.code}`);const P=r.filter((e=>!e.default)).map((e=>`${e.qp_period} ${e.qp_code}`)),B=[`${c.qp_period} ${c.qp_code}`,...P].join(", ");console.log(`[generateInvoice][parcel=${Lt[z]}::invoice type=${i}::comm=${R.data.data[ct]}] evaluate payable assay for ${R.data.data.code} with an analytical assay=${null==(t=ma[R.data.data.code])?void 0:t.analytical_assay}`);const q=await l.get(`/items/${Je}?filter[${He}]=${e}`,{params:{fields:[Ke,Qe,Ye,Xe,ze,Ze,et,Re,qe,xe,Le,We,Ge]}}),{payableAssay:x,expression:L}=await w(null==(a=ma[R.data.data.code])?void 0:a.analytical_assay,null==(o=ma[R.data.data.code])?void 0:o.assay_uom,q.data.data,R.data.data[ct]);let Q,Y,X="";if("Final"!==i){const e={invoice_type:i,days:aa[Pe],day_type:aa[Ce],ref_day:aa[Se]};if(!e)throw new Error(`No provisional pricing found for invoice type ${i} for parcel ${Lt[z]}`);let t;switch(e.ref_day){case"Arrival Date":t=null!=(n=Lt[W])?n:Lt[G],X="Actual Arrival Date from the Parcel form";break;case"B/L Date":t=null!=(s=Lt[H])?s:Lt[K],X="B/L Date from the Parcel form";break;case"Invoice Date":t=null!=(d=Lt[H])?d:Lt[K],X="B/L Date (or Estimated Date) as Invoice Date";break;case"Estimated Shipment Date":t=Lt[K],X="Estimated Shipment Date from the Parcel form";break;default:throw new Error(`Invalid reference day for invoice pricing: ${e.ref_day}; please contact Navarch for support`)}if(null==t)throw new Error(`Reference day for invoice pricing ${X} is empty`);Y=new Date(t);const a=parseInt(e.days),o=e.day_type;switch(o){case"Business Day(s)":Q=A(Y,a,!0);break;case"Calendar Day(s)":Q=new Date(Y.valueOf()),Q.setDate(Q.getDate()-a);break;default:throw new Error(`Invalid day type ${o} from contract ${Xt} for invoice type ${i}`)}}else{let e;switch(c.qp_code){case"MAMA":e=new Date(null!=(u=Lt[W])?u:Lt[G]),X="Actual Arrival Date";break;case"MOSS":case"MOS":case"MOAS":e=new Date(null!=(m=Lt[H])?m:Lt[K]),X="Estimated Shipment Date";break;default:throw new Error(`Unsupported QP code ${c.qp_code} in the contract ${Xt}, please ensure all commodity QP codes are MAMA, MOS, MOSS, or MOAS`)}if(null==e)throw new Error(`Invalid reference day for ${X} from contract ${Xt} for commodity ${R.data.data[ct]}`);Q=O(e,c.qp_period),Y=T(e,c.qp_period)}console.log(`[generateInvoice][parcel=${Lt[z]}::invoice type=${i}::comm=${R.data.data[ct]}] provisional pricing date range: ${Q.toString()} - ${Y.toString()}`);const Z=await Wt(R.data.data.code,R.data.data[F],y,Q,Y);let te;const ae=await l.get(`/items/${tt}?filter[${He}]=${e}`,{params:{fields:[Qe,Ye,Xe,ze,at,ot,nt,Ze]}});void 0!==ae.data.data&&null!==ae.data.data&&ae.data.data.length>0&&(te=await E(Z,null==(p=ma[R.data.data.code])||p.assay_uom,ae.data.data,R.data.data[ct]));const oe=await l.get(`/items/${ft}/${V}`,{params:{fields:[yt]}});Ht(oe.data.data,R.data.data[ct]);const ne=oe.data.data[yt];let re;if(te){if(!J)throw new Error(`Treatment Charge Rate UOM is not defined for commodity ${R.data.data[ct]}`);const e=await l.get(`/items/${ft}/${J}`,{params:{fields:[yt]}});Kt(e.data.data,R.data.data[ct]),re=e.data.data[yt]}const ie=await k(ne,ra.dry_weight_uom,null==(h=ma[R.data.data.code])?void 0:h.assay_uom);console.log(`[generateInvoice][parcel=${Lt[z]}::invoice type=${i}::comm=${R.data.data[ct]}] payableMetalConversion for commodity ${R.data.data.name}: ${JSON.stringify(ie)}`),ie.initialConversion=1===(null==(v=ie.initialConversion)?void 0:v.conversionFactor)?void 0:ie.initialConversion,ie.finalConversion=1===(null==(_=ie.finalConversion)?void 0:_.conversionFactor)?void 0:ie.finalConversion,va.push({commodity:R.data.data.name,analytical_assay:f(null==(g=ma[R.data.data.code])?void 0:g.analytical_assay,4),deduction_expression:L,payable_assay:f(x,4),assay_uom:null==($=ma[R.data.data.code])?void 0:$.assay_uom,payable_metal:f(ra.dry_weight*(null!=(b=null==(D=ie.initialConversion)?void 0:D.conversionFactor)?b:1)*(null!=x?x:1)*(null!=(N=null==(S=ie.finalConversion)?void 0:S.conversionFactor)?N:1)*("%"!==(null==(U=ma[R.data.data.code])?void 0:U.assay_uom)?1:.01),4),payable_metal_expression:`${f(ra.dry_weight,4)}${ra.dry_weight_uom}${ie.initialConversion?` * ${f(ie.initialConversion.conversionFactor,4)}${ie.initialConversion.conversionUom}`:""} * ${f(null!=x?x:1,4)}${"%"!==(null==(I=ma[R.data.data.code])?void 0:I.assay_uom)?`${null==(M=ma[R.data.data.code])?void 0:M.assay_uom}`:" / 100"}${ie.finalConversion?` * ${f(ie.finalConversion.conversionFactor,4)}${ie.finalConversion.conversionUom}`:""}`,payable_metal_uom:ne,qp:B,qp_start_date:C(Q),qp_end_date:C(Y),price_method:y,price_rate:f(Z,4),price_per_uom:ne,price:f(ra.dry_weight*(null!=(pe=null==(ee=ie.initialConversion)?void 0:ee.conversionFactor)?pe:1)*(null!=x?x:1)*(null!=(Ee=null==(be=ie.finalConversion)?void 0:be.conversionFactor)?Ee:1)*("%"!==(null==(gt=ma[R.data.data.code])?void 0:gt.assay_uom)?1:.01)*Z),treatment_charge:te?{rate:f(te.baseTreatmentCharge,4),discount:f((null!=($t=te.baseTreatmentCharge)?$t:0)-(null!=(wt=te.finalValue)?wt:0),4),final_rate:f(te.finalValue,4),per_uom:re,final_amount:f(ra.dry_weight*(null!=(Dt=te.finalValue)?Dt:1))}:void 0,final_total:f(ra.dry_weight*(null!=(Nt=null==(bt=ie.initialConversion)?void 0:bt.conversionFactor)?Nt:1)*(null!=x?x:1)*(null!=(Tt=null==(Ot=ie.finalConversion)?void 0:Ot.conversionFactor)?Tt:1)*("%"!==(null==(kt=ma[R.data.data.code])?void 0:kt.assay_uom)?1:.01)*Z-(te?1:0)*(ra.dry_weight*(null!=(Ft=null==te?void 0:te.finalValue)?Ft:1)))})}const q=await l.get(`/items/${rt}?filter[${He}]=${e}`,{params:{fields:[Qe,Ye,Xe,ze,it,lt,Ze]}});if(q.data.data.length>0){if(null===B)throw new Error(`Please fill in the field for Penalty Per UOM in contract ${Xt} for commodity ${R.data.data[ct]}`);const e=await l.get(`/items/${ft}/${B}`,{params:{fields:[yt]}});Qt(e.data.data,R.data.data[ct]);const t=e.data.data[yt],{penalty:a,expression:o,bracket:n}=await P(null==(jt=ma[R.data.data.code])?void 0:jt.analytical_assay,q.data.data,pa,t,R.data.data[ct]);console.log(`[generateInvoice][parcel=${Lt[z]}::invoice type=${i}::comm=${R.data.data[ct]}] evaluated penalty with an analytical assay=${null==(Vt=ma[R.data.data.code])?void 0:Vt.analytical_assay}, penaltyRate=${null==n?void 0:n.rate}, finalPenaltyRate=${a}, expression='${o}'`),_a.push({commodity:R.data.data.name,analytical_assay:f(null==(Bt=ma[R.data.data.code])?void 0:Bt.analytical_assay,4),deduction_expression:o,assay_uom:null==(Jt=ma[R.data.data.code])?void 0:Jt.assay_uom,penalty_rate:f(null==n?void 0:n.rate,4),penalty_per_uom:t,final_penalty_rate:f(a,4),final_penalty:f((null!=a?a:1)*ra.dry_weight)})}}console.log(`[generateInvoice][parcel=${Lt[z]}::invoice type=${i}] evaluated commodities=${JSON.stringify(va)}`),console.log(`[generateInvoice][parcel=${Lt[z]}::invoice type=${i}] evaluated penalties${JSON.stringify(_a)}`);const $a=va.reduce(((e,t)=>e+y(t.price)),0),wa=va.reduce(((e,t)=>{var a;return e+y(null==(a=t.treatment_charge)?void 0:a.final_amount)}),0),Da=_a.reduce(((e,t)=>e+y(t.final_penalty)),0);console.log(`[generateInvoice][parcel=${Lt[z]}::invoice type=${i}] TOTAL_REVENUE=${$a}, TOTAL_TREATMENT_CHARGE=${wa}, TOTAL_PENALTIES=${Da}`);let ba,Ea=0;const Pa=!!Lt[Z];Pa&&(Ea=Lt[Z].reduce(((e,t)=>e+t.amount),0),ba={adjustments:Lt[Z].map((e=>({description:e.description,amount:f(e.amount)}))),total_adjustments:f(Ea)});const Ca=aa[ge],Sa=$a-wa-Da+Ea,Aa=null!=Ca?Sa*Ca/100:void 0,Na=await l.get(`/items/${Et}/${Lt[q]}`,{params:{fields:[Pt]}});Yt(Na.data.data);const Oa=Lt[Q];let Ta;Oa&&(Ta=await l.get(`/items/${St}/${Oa}`,{params:{fields:[At]}}),function(e){if(console.log("[validateVessel]"),!e)throw new Error("Vessel for parcel not found");if(!e[At])throw new Error("No name defined for vessel of the selected parcel")}(Ta.data.data));let Ua=(await l.get(`/items/${Ut}?filter[${It}]=${r}`,{params:{fields:["id",Mt]}})).data.data.reduce(((e,t)=>e+(t[Mt]?1:0)),0)+1,Ia=r;const Ma=Ua.toString().padStart(2,"0"),ka=(Lt[z],Ia.toString().padStart(2,"0")),Fa={Counterparty:Na.data.data[Pt],Vessel:Ta?Ta.data.data[At]:"Vessel TBA","Shipment Date":Lt[H]?C(new Date(Lt[H])):Lt[K]?C(new Date(Lt[K])):"N/A","Arrival Date":Lt[W]?C(new Date(Lt[W])):Lt[G]?C(new Date(Lt[G])):"N/A",Status:Lt[H]?"Unfinalised":"Planned",Revision:"Valuation",Invoice:`${i}:Valuation`,Parcel:`${Lt[z]} (#${ka})`,"Invoice Due Date":C(e.dueDate),"Dry Weight":`${f(ra.dry_weight,4)} ${ra.dry_weight_uom}`,"Total Revenues USD":f($a),"Total Penalties USD":f(Da+wa),...await xt(va,{dryWeight:ra.dry_weight,dryWeightUom:ra.dry_weight_uom}),"Total Adjustments USD":Pa?ba.total_adjustments:"0.00","Parcel Value USD":f(Sa),"Parcel Payable Value(Below Line) USD":f(Aa),"Payments USD":"-","Due Total":"-",metadata:{invoiceTypeRanking:Rt[i]}};return console.log(`[generateInvoice][parcel=${Lt[z]}::invoice type=${i}] generated forecast invoice=${JSON.stringify(Fa)}`),Fa}catch(t){if(t instanceof qt)return void console.error(`[generateInvoice][parcel=${e.parcelId}::invoice type=${e.invoiceType}]Non-fatal error: ${t.message}`);throw t}}(e))))),n=function(e){const t=e.reduce(((e,t)=>(e[t.Parcel]||(e[t.Parcel]=[]),e[t.Parcel].push(t),e)),{});Object.keys(t).forEach((e=>{t[e].sort(((e,t)=>e.metadata.invoiceTypeRanking<t.metadata.invoiceTypeRanking?-1:e.metadata.invoiceTypeRanking>t.metadata.invoiceTypeRanking?1:0))})),console.log(`[evaluateDuePaymentsForCashflow] cashflowByParcel=${JSON.stringify(t)}`),Object.keys(t).forEach((e=>{t[e].forEach(((a,o)=>{if(!a["Parcel Payable Value(Below Line) USD"]||"-"===a["Parcel Payable Value(Below Line) USD"])throw new Error(`Parcel ${e} for invoice ${a.Invoice} does not have a Parcel Payable Value(Below Line) USD`);const n=y(a["Parcel Payable Value(Below Line) USD"]);if(isNaN(n))throw new Error(`Parcel ${e} for invoice ${a.Invoice} has an invalid Parcel Payable Value(Below Line) USD of ${a["Parcel Payable Value(Below Line) USD"]}`);if(0===o){a["Payments USD"]=a["Payments USD"]&&"-"!==a["Payments USD"]?a["Payments USD"]:"0.00";const e=y(a["Payments USD"]);a["Due Total"]=f(n-e)}else{if(!t[e][o-1]["Parcel Payable Value(Below Line) USD"]||"-"===t[e][o-1]["Parcel Payable Value(Below Line) USD"])throw new Error(`Parcel ${e} for invoice ${a.Invoice} does not have a Parcel Payable Value(Below Line) USD for the previous invoice`);const r=y(t[e][o-1]["Parcel Payable Value(Below Line) USD"]);if(isNaN(r))throw new Error(`Parcel ${e} for invoice ${a.Invoice} has an invalid Parcel Payable Value(Below Line) USD of ${t[e][o-1]["Parcel Payable Value(Below Line) USD"]} for the previous invoice`);a["Due Total"]=f(n-r),a["Payments USD"]&&"-"!==a["Payments USD"]||(a["Payments USD"]=t[e][o-1]["Payments USD"])}}))})),console.log(`[evaluateDuePaymentsForCashflow] cashflowByParcel=${JSON.stringify(t)}`);const a=Object.keys(t).flatMap((e=>t[e]));return console.log(`[evaluateDuePaymentsForCashflow] cashflowAsJsonWithDueTotal=${JSON.stringify(a)}`),a}(o.filter((e=>!!e))),d=n.map((e=>(delete e.metadata,e))),u=function(e){const t=[...new Set(e.flatMap((e=>Object.keys(e))))],a=e.map((e=>t.map((t=>e[t]||"")).join(",")));return[t.join(","),...a].join("\n")}(d);a("input",d),console.log(`[generateCashflow] cashflow response: ${JSON.stringify(d)}`),console.log(`[generateCashflow] cashflow as csv: ${u}`),i.value=!1}catch(e){r.value=e.message}finally{i.value=!1}},viewDoc:function(e){const t=null!=e?e:s.value.input;console.log(`[viewDoc] csvData=${t}`),function(e){const t=new Blob([e],{type:"text/csv"}),a=URL.createObjectURL(t),o=document.createElement("a");o.href=a,o.download="data.csv",document.body.appendChild(o),o.click(),document.body.removeChild(o)}(t)},failureReason:r};async function xt(e,t){console.log(`[mapOutCommoditiesForCashflow] commodities=${JSON.stringify(e)};;containedMetalParam=${JSON.stringify(t)}`);return(await Promise.all(e.map((async e=>{var a,o,n,r,i,l,s;const c=await k(e.payable_metal_uom,t.dryWeightUom,e.assay_uom);console.log(`[mapOutCommoditiesForCashflow] commodity=${e.commodity}, containedMetalUnitConversion=${JSON.stringify(c)}`);const d=(null!=(o=null==(a=c.initialConversion)?void 0:a.conversionFactor)?o:1)*(null!=(r=null==(n=c.finalConversion)?void 0:n.conversionFactor)?r:1),u=("%"===e.assay_uom?.01:1)*e.analytical_assay;return{[`${e.commodity} Payable Metal (${e.payable_metal_uom})`]:e.payable_metal,[`${e.commodity} Contained Metal (${e.payable_metal_uom})`]:f(t.dryWeight*u*d),[`${e.commodity} Revenue (USD)`]:e.price,[`${e.commodity} QP Month`]:Lt(new Date(e.qp_start_date)),[`${e.commodity} Price (USD/${e.price_per_uom})`]:e.price_rate,[`${e.commodity} TC (USD)`]:null==(i=e.treatment_charge)?void 0:i.final_amount,[`${e.commodity} TC (USD/${null==(l=e.treatment_charge)?void 0:l.per_uom})`]:null==(s=e.treatment_charge)?void 0:s.final_rate}})))).reduce(((e,t)=>({...e,...t})),{})}function Lt(e){return`${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][e.getMonth()]} ${e.getFullYear()}`}async function Wt(e,t,a,o,n,r=1){var i;if(console.log(`[getCommodityAvgPrice] commodity=${e}, commodityId=${t}, source=${a}, startDate=${o}, endDate=${n}, currency=${r}`),m(e))throw new Error(`Commodity ${e} is not defined for price calcualtion`);if(m(a))throw new Error(`Price method for commodity ${e} is not defined for price calcualtion`);if(m(o))throw new Error(`Start date is not defined for price calcualtion with Price Method #${a} has not been properly defined, please ensure that contract QP for commodity ${e} is properly defined`);if(m(n))throw new Error(`End date is not defined for price calcualtion with Price Method #${a} has not been properly defined, please ensure that contract QP for commodity ${e} is properly defined`);const c=await l.get(`/items/navarch_commodity_price?filter[_and][0][price_method][_eq]=${a}&filter[_and][0][currency][_eq]=${r}&filter[_and][1][date][_between][0]=${S(o)}&filter[_and][1][date][_between][1]=${S(n)}&sort=date`,{params:{fields:[Nt,Ot,Tt,"price_method"]}});if((null==(i=c.data)?void 0:i.data)&&Array.isArray(c.data.data)&&c.data.data.length>0){const t=c.data.data[c.data.data.length-1],r=new Date(t[Tt]);if(console.log(`[getCommodityAvgPrice] commodity prices=${JSON.stringify(c.data.data)}`),console.log(`[getCommodityAvgPrice] latest comm price=${JSON.stringify(t)}`),console.log(`[getCommodityAvgPrice] latest comm price date=${r} is after end date=${n}? ${r>=n}`),r>=n){const t=c.data.data.reduce(((t,o)=>{if(!o[Ot]&&!o[Nt])throw new Error(`Commodity ${e} for Price Method #${a} on the date of ${o[Tt]} does not have a price, please contact Navarch for assistance`);let n=Number(o[Ot]);if(isNaN(n)&&(n=Number(o[Nt])),isNaN(n))throw new Error(`The commodity price for ${e} of Price Method #${a} for the date of ${o[Tt]} is not a valid number, please contact Navarch for assistance`);return console.log(`[getCommodityAvgPrice] price=${n} and acc=${t} for commodity ${e} and date ${o[Tt]}`),t+n}),0)/c.data.data.length;return console.log(`[getCommodityAvgPrice] average price=${t} for commodity ${e} between ${S(o)} and ${S(n)}`),t}console.log(`[getCommodityAvgPrice] latest comm price date=${r} is before end date=${n}, getting forecast price`)}if(!s.value[F])throw new Error("Please save the Cashflow form first before generating the cashflow doc");const d=await l.get("/items/navarch_forecast_price",{params:{filter:{[jt]:{_eq:t},cashflow_forecast_id:{_eq:s.value[F]}},fields:[Vt,jt,Bt,Jt]}});console.log(`[getCommodityAvgPrice] forecast prices=${JSON.stringify(d.data.data)}`),function(e,t){if(!e||!Array.isArray(e)||0===e.length)throw new Error(`No forecast price found for ${t}, please ensure prices have been provided`)}(d.data.data,e);const u=d.data.data.find((e=>{const t=new Date(e[Bt]),a=new Date(e[Jt]);return t<=o&&a>=n}));if(!u)throw new Error(`No single forecast price found for commodity ${e} between ${S(o)} and ${S(n)}, please ensure there is only one price value for this range`);return u[Vt]}function Gt(e,t){var a,o,n;if(console.log("[validateCommodityData]"),!e)throw new Error("commodity data response is null");if(!e[ct])throw new Error(`Commodity name for commodity ${null!=(a=e[dt])?a:t} is undefined, please contact Navarch for assistance`);if(!e[dt])throw new Error(`Commodity code for commodity ${null!=(o=e[ct])?o:t} is not defined, please contact Navarch for assistance`);if(!e[F])throw new Error(`Commodity ID for commodity ${null!=(n=e[ct])?n:t} is not defined, please contact Navarch for assistance`)}function Ht(e,t){if(!e)throw new Error(`Price per UOM for commodity ${t} is not a valid`);if(!e[yt])throw new Error(`Price per UOM for commodity ${t} does not have a valid unit symbol, please contact Navarch for assistance`)}function Kt(e,t){if(!e)throw new Error(`Treatment charge per UOM for commodity ${t} is not a valid`);if(!e[yt])throw new Error(`Treatment charge per UOM for commodity ${t} does not have a valid unit symbol, please contact Navarch for assistance`)}function Qt(e,t){if(!e)throw new Error(`Penalty per UOM for commodity ${t} is not a valid`);if(!e[yt])throw new Error(`Penalty per UOM for commodity ${t} does not have a valid unit symbol, please contact Navarch for assistance`)}function Yt(e){if(console.log("[validateCounterparty]"),!e)throw new Error("Counterparty for parcel not found");if(!e[Pt])throw new Error("No codename defined for counterparty of the selected parcel")}}});const $={key:0},w={key:1};g.render=function(e,t,a,o,n,p){const h=r("v-button"),v=r("v-notice");return i(),l(s,null,[c(' <input :value="value" @input="handleChange($event.target.value)" /> '),c(" create a button only interface for Directus"),e.value?(i(),l("div",w,[d(h,{class:"margin-top-16px",onClick:t[1]||(t[1]=()=>e.viewDoc())},{default:u((()=>[m("View Cashflow ")])),_:1})])):(i(),l("div",$,[d(h,{class:"margin-top-16px",onClick:t[0]||(t[0]=()=>e.generateCashflow()),loading:e.isGeneraingDoc},{default:u((()=>[m("Generate Cashflow")])),_:1},8,["loading"]),e.failureReason?(i(),f(v,{key:0},{default:u((()=>[m(y(e.failureReason),1)])),_:1})):c("v-if",!0)]))],2112)},g.__file="src/interface.vue";var D=t({id:"navarch-docgen-cashflow",name:"Navarch Cashflow Generator Button",icon:"receipt_long",description:"This is my custom interface for Navarch's Cashflow Doc!",component:g,options:null,types:["json"],group:"standard"});export{D as default};
