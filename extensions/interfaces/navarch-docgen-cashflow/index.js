import{useApi as e,defineInterface as a}from"@directus/extensions-sdk";import{defineComponent as t,ref as o,inject as n,resolveComponent as r,openBlock as i,createElementBlock as l,Fragment as s,createCommentVNode as c,createVNode as d,withCtx as u,createTextVNode as m,createBlock as f,toDisplayString as y}from"vue";var p=(e=>(e.BRACKET="Brackets",e.MIN_DEDUCTION="Minimum Deduction",e.MAX_CAP="Maximum Cap",e))(p||{}),h=(e=>(e.PERCENTAGE="Percentage",e.FRACTIONAL="Fractional",e))(h||{}),v=(e=>(e.WET_WEIGHT="wet_weight",e.MOISTURE="moisture",e.DRY_WEIGHT="dry_weight",e))(v||{}),_=(e=>(e.METHOD="method",e.WET_WEIGHT_UOM="wet_weight_uom",e.MOISTURE_UOM="moisture_uom",e.DRY_WEIGHT_UOM="dry_weight_uom",e))(_||{}),g=t({props:{value:{type:Object,default:null}},emits:["input"],setup(a,{emit:t}){const r=o(""),i=o(!1),l=o(!1),s=e(),c=n("values",o({}));function d(e){if(console.log("[evaluateWeightData]"),0===e.length)return;const a=m(e,v.DRY_WEIGHT),t=m(e,v.WET_WEIGHT);return{method:u(e,_.METHOD),lots:e,dry_weight_uom:u(e,_.DRY_WEIGHT_UOM),wet_weight_uom:u(e,_.WET_WEIGHT_UOM),dry_weight:a,wet_weight:t,moisture:(t-a)/t*100}}function u(e,a){if(console.log("[getFirstValueAsSharedValue]"),0!==e.length)return console.log(`lots[0][${a.toString()}]=${e[0][a.toString()]}`),e[0][a.toString()]}function m(e,a){return console.log("[evaluateAggregateValue]"),e.reduce(((e,t)=>{var o;return e+(null!=(o=t[a.toString()])?o:0)}),0)}function f(e){return null==e}function y(e,a=2,t=!0){if(console.log("[formatNumber]"),isNaN(e)||null===e)return"-";const o=Math.round(e*Math.pow(10,a))/Math.pow(10,a),[n,r]=o.toString().split("."),i=n.replace(/\B(?=(\d{3})+(?!\d))/g,",");if(!r&&!t)return i;return`${i}.${(null!=r?r:"").padEnd(a,"0")}`}function g(e){if(console.log("[parseNumber]"),!e)return 0;const a=parseFloat(e.replace(/,/g,""));return console.log(`[parseNumber] number: ${e} to ${a}`),a}function $(e,a,t){var o,n,r;if(console.log("[findBracket]"),1===e.length){if(a>=(null!=(o=e[0].lower_threshold)?o:0)&&(null===e[0].upper_threshold||void 0===e[0].upper_threshold||a<e[0].upper_threshold))return e[0];throw new Error(`Evaluated monetary value $${a} does not fall within the only ${t.type} bracket with range ${null!=(n=e[0].lower_threshold)?n:0} - ${null!=(r=e[0].upper_threshold)?r:"âˆž"}`)}return e.find((e=>{var t,o;const n=a>(null!=(t=e.lower_threshold)?t:0)&&(null===e.upper_threshold||void 0===e.upper_threshold||a<e.upper_threshold)||e.lower_threshold_inclusive&&a===(null!=(o=e.lower_threshold)?o:0)||e.upper_threshold_inclusive&&a===e.upper_threshold;return console.log(`[findBracket] value=${a} for bracket: ${JSON.stringify(e)}? match=${!!n}`),n}))}function w(e,a){var t,o,n,r,i,l,s;console.log("[evaluateFinalValueFromBrackets]");const c=(e-(null!=(t=a.initial_adjustment)?t:0)*(null!=(o=a.initial_adjustment_conversion_factor)?o:1))*(null!=(n=a.rate)?n:0)*(a.rate_type===h.PERCENTAGE?.01:1)+(null!=(r=a.final_adjustment)?r:0)*(null!=(i=a.final_adjustment_conversion_factor)?i:1);switch(a.bracket_type){case p.MIN_DEDUCTION:if(null===a.comparator||void 0===a.comparator)throw new Error("Minimum deduction not found");const t=a.comparator*(null!=(l=a.comparator_conversion_factor)?l:1);return e-c<t?e-t:c;case p.MAX_CAP:if(null===a.comparator||void 0===a.comparator)throw new Error("Maximum cap not found");const o=a.comparator*(null!=(s=a.comparator_conversion_factor)?s:1);return c>o?o:c;case p.BRACKET:return c;default:throw new Error(`bracket type ${a.bracket_type} is not supported`)}}async function D(e,a,t,o){var n,r,i,l,s,c,d,u;if(console.log("[evaluatePayableAssay]"),!t||0===t.length)return{};const m=$(t,e,{commodityCode:o,type:"Payable Assay"});if(!m)throw new Error(`Bracket not found for value ${e}, please ensure the brackets for all commodities defined in the contract cover all range of possible values for payable assays`);let f,v,_=1;m.initial_adjustment_uom&&void 0!==m.initial_adjustment_uom&&null!==m.initial_adjustment_uom&&m.initial_adjustment_uom!==a&&(_=await M(m.initial_adjustment_uom,a),f=k(m.initial_adjustment_uom,a));let g,D=1;m.bracket_type===p.MAX_CAP?(v=null!=(n=m.maximum_cap)?n:0,void 0!==m.maximum_cap_uom&&null!==m.maximum_cap_uom&&m.maximum_cap_uom!==a&&(D=await M(m.maximum_cap_uom,a),g=k(m.maximum_cap_uom,a))):m.bracket_type===p.MIN_DEDUCTION&&(v=null!=(r=m.minimum_deduction)?r:0,void 0!==m.minimum_deduction_uom&&null!==m.minimum_deduction_uom&&m.minimum_deduction_uom!==a&&(D=await M(m.minimum_deduction_uom,a),g=k(m.minimum_deduction_uom,a)));const b=w(e,{bracket_type:m.bracket_type,rate:null!=(i=m.rate)?i:1,rate_type:null!=(l=m.rate_type)?l:h.FRACTIONAL,initial_adjustment:null!=(s=m.initial_adjustment)?s:0,initial_adjustment_conversion_factor:_,comparator:v,comparator_conversion_factor:D});let E="";const P=void 0!==m.initial_adjustment&&null!==m.initial_adjustment;if(m.bracket_type===p.BRACKET)E=`${P?"(":""}${y(e,4)}${null!=a?a:""}${P?` - ${y(m.initial_adjustment,4)}${null!=(c=m.initial_adjustment_uom)?c:`${null!=a?a:""}`}`:""}${P&&1!==_?` * ${y(_,4)}${f}`:""}${P?")":""} * ${y(m.rate,4)}${m.rate_type===h.PERCENTAGE?"/100":`/${y(1,4)}`}`;else if(m.bracket_type===p.MIN_DEDUCTION){E=b===e-v*D?`${y(e,4)}${null!=a?a:""} - ${y(v,4)}${null!=a?a:""}${1!==D?` * ${y(D,4)}${g}`:""}`:`${P?"(":""}${y(e,4)}${null!=a?a:""}${P?` - ${y(m.initial_adjustment,4)}${null!=(d=m.initial_adjustment_uom)?d:`${null!=a?a:""}`}`:""}${P&&1!==_?` * ${y(_,4)}${f}`:""}${P?")":""} * ${y(m.rate,4)}${m.rate_type===h.PERCENTAGE?"/100":`/${y(1,4)}`}`}else{if(m.bracket_type!==p.MAX_CAP)throw new Error(`[buildPayableAssayExpression] unknown bracket method: ${m.bracket_type}`);E=b===v*D?`${y(v,4)}${null!=a?a:""}${1!==D?` * ${y(D,4)}${g}`:""}`:`${P?"(":""}${y(e,4)}${null!=a?a:""}${P?` - ${y(m.initial_adjustment,4)}${null!=(u=m.initial_adjustment_uom)?u:`${null!=a?a:""}`}`:""}${P&&1!==_?` * ${y(_,4)}${f}`:""}${P?")":""} * ${y(m.rate,4)}${m.rate_type===h.PERCENTAGE?"/100":`/${y(1,4)}`}`}return{payableAssay:b,expression:E}}console.log("[main] formValues=",c);const b="above the lower threshold, plus",E="below the upper threshold, minus";function P(e,a,t,o,n){var r,i,l,s;if(console.log("[evaluateCharge]"),!t||!t.length)return;const c=$(t,e,{commodityCode:o,type:n});if(!c)throw new Error(`Bracket not found for value ${e}, please ensure the brackets for all commodities defined in the contract cover all range of possible values for ${n}`);let d=0,u=1;if(c.use_btc)u=0,d=0;else if(u=null!=(r=c.rate)?r:1,c.for_every_unit===b)d=null!=(i=c.lower_threshold)?i:0;else{if(c.for_every_unit!==E)throw new Error(`[evaluateCharge] unknown for_every_unit: ${c.for_every_unit}`);d=null!=(l=c.upper_threshold)?l:0}const m={bracket_type:p.BRACKET,rate:u,rate_type:h.FRACTIONAL,initial_adjustment:d,final_adjustment:null!=(s=c.base_treatment_charge)?s:0};return console.log(`[evaluateCharge] bracketForEvaluation: ${JSON.stringify(m)}`),{finalValue:w(e,m),baseTreatmentCharge:c.base_treatment_charge}}function C(e,a,t,o,n){var r,i,l;if(console.log("[evaluatePenalty]"),!a||!a.length)return{};const s=$(a,e,{commodityCode:n,type:"Penalty"});if(!s)throw new Error(`[evaluatePenalty] Bracket not found for value ${e}, please ensure the brackets for all commodities defined in the contract cover all range of possible values for penalty`);let c=0,d=1;if(s.no_penalty)d=0,c=0;else if(d=null!=(r=s.rate)?r:1,s.for_every_unit===b)c=null!=(i=s.lower_threshold)?i:0;else{if(s.for_every_unit!==E)throw new Error(`[evaluatePenalty] unknown for_every_unit: ${s.for_every_unit}`);c=null!=(l=s.upper_threshold)?l:0}const u={bracket_type:p.BRACKET,rate:d,rate_type:h.FRACTIONAL,initial_adjustment:c,final_adjustment:0};console.log(`[evaluatePenalty] bracketForEvaluation: ${JSON.stringify(u)}`);const m=w(e,u),f=null!=u.initial_adjustment;let v="";return v=s.rate&&0!==s.rate?`${f?"(":""}${y(e,4)}${f?` - ${y(c,4)})`:""} / ${y(1,4)} * ${null!=t?t:""} ${y(d,4)}/${null!=o?o:""}`:"No penalty",{penalty:m,expression:v,bracket:s}}function A(e){const a=e.getDate(),t=e.getMonth(),o=e.getFullYear();return`${a} ${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][t]} ${o}`}function S(e,a=!0){const t=e.getMonth()+1,o=e.getDate();return`${e.getFullYear()}${a?"-":" "}${t<10?"0":""}${t}${a?"-":" "}${o<10?"0":""}${o}`}function N(e,a,t=!1){const o=new Date(e.valueOf());let n=a-(t?1:0);for(;n>0;)o.setDate(o.getDate()-1),0!==o.getDay()&&6!==o.getDay()&&(n-=1);return o.getHours()>=12&&o.setDate(o.getDate()+1),o}function O(e,a,t=!1){const o=new Date(e.valueOf());let n=a-(t?1:0);for(;n>0;)o.setDate(o.getDate()+1),0!==o.getDay()&&6!==o.getDay()&&(n-=1);return o.getHours()>=12&&o.setDate(o.getDate()+1),o}function T(e,a){const t=new Date(e.valueOf());return t.setMonth(t.getMonth()+a,1),t}function I(e,a){const t=new Date(e.valueOf());return t.setMonth(t.getMonth()+a+1,0),t}async function U(e,a){if(e===a)return 1;const t=await s.get(`/items/${_a}?filter[${ga}]=${e}`,{params:{fields:[Ea]}});if(0===t.data.data.length||null===t.data.data[0][Ea]||void 0===t.data.data[0][Ea])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for source weight unit ${e}. Ensure that the symbol is correct and is a weight unit symbol`);const o=await s.get(`/items/${_a}?filter[${ga}]=${a}`,{params:{fields:[Ea]}});if(0===o.data.data.length||null===o.data.data[0][Ea]||void 0===o.data.data[0][Ea])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for the target weight unit ${a}. Ensure that the symbol is correct and is a weight unit symbol`);const n=parseFloat(t.data.data[0][Ea]);if(isNaN(n))throw new Error(`[getWeightUnitConversionValue] source weight unit ${e} conversion value=${n} is not a number`);const r=parseFloat(o.data.data[0][Ea]);if(isNaN(r))throw new Error(`[getWeightUnitConversionValue] target weight unit ${a} conversion value=${r} is not a number`);return n/r}async function M(e,a){if(null==e||null==a)return 1;if(e===a)return 1;const t=await s.get(`/items/${Pa}?filter[${Ca}]=${e}`,{params:{fields:[Aa]}});if(0===t.data.data.length||void 0===t.data.data[0][Aa]||null===t.data.data[0][Aa])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for source weight unit ${e}. Ensure that the symbol is correct and is a weight unit symbol`);const o=await s.get(`/items/${Pa}?filter[${Ca}]=${a}`,{params:{fields:[Aa]}});if(0===o.data.data.length||void 0===o.data.data[0][Aa]||null===o.data.data[0][Aa])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for the target weight unit ${a}. Ensure that the symbol is correct and is a weight unit symbol`);const n=parseFloat(t.data.data[0][Aa]);if(isNaN(n))throw new Error(`[getAssayUnitConversionValue] source weight unit ${e} conversion value=${n} is not a number`);console.log(`[getAssayUnitConversionValue] source unit conversion value=${n}`);const r=parseFloat(o.data.data[0][Aa]);if(isNaN(r))throw new Error(`[getAssayUnitConversionValue] target weight unit ${e} conversion value=${r} is not a number`);return console.log(`[getAssayUnitConversionValue] target unit conversion value=${r}`),console.log("[getAssayUnitConversionValue] returning "+n/r),n/r}function k(e,a){if(void 0===e||void 0===a||null===e||null===a)return;const t=e.split("/"),o=a.split("/");if(t.length>2||o.length>2)throw new Error(`[getConversionUnit] sourceUnit=${e} and targetUnit=${a} must be in the format of 'unit1/unit2', an extra '/' was found`);if(1===t.length&&1===o.length)return`${o[0]}/${t[0]}`;if(1===t.length){const e=o[0]===t[0]?"":`${o[1]}(${t[1]})`,a=o[1];return""===a?e:`${e}/${a}`}if(1===o.length){const e=t[1],a=t[0]===o[0]?"":`${t[1]}(${o[0]})`;return""===a?e:`${e}/${a}`}{const e=t[0]===o[0],a=t[1]===o[1],n=e||""===t[0],r=e||""===o[0],i=a||""===t[1],l=a||""===o[1],s=!i&&!r,c=!n&&!l,d=`${i?"":t[1]}${s?"(":""}${r?"":`${o[0]}`}${s?")":""}`,u=`${n?"":t[0]}${c?"(":""}${l?"":`${o[1]}`}${c?")":""}`;return""===u?d:`${d}/${u}`}}async function F(e,a,t){const o=await s.get(`/items/${_a}?filter[${$a}]=${a}`,{params:{fields:[ga]}});if(!o.data.data||!o.data.data[0]||!o.data.data[0][ga])throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] Dry weight uom not found for symbol ${a}`);const n=o.data.data[0][ga];if("%"===t){if(n===e)return{};const a=k(n,e);if(!a)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] no conversion unit found for dry weight unit ${n} and target weight unit ${e}`);return{finalConversion:{conversionFactor:await U(n,e),conversionUom:a}}}let r=t.split("/");if(1==r.length){const e=await async function(e){const a=await s.get(`/items/${Pa}`,{params:{fields:[Ca,Sa],filter:{[Sa]:{_nnull:!0},[Ca]:{_eq:e}}}});if(200!==a.status||!a.data||0===a.data.data.length)throw new Error("[getAssayUnitComposition] no assay units found with composition");return a.data.data[0][Sa]}(t);if(!e)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${t} does not have a composition`);r=e.split("/")}if(r.length>2||0===r.length)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${t} is not in the format of 'unit1/unit2'`);const i=r[0],l=r[1],c={};if(l!==n){const e=k(n,l);if(!e)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] no conversion unit found for dry weight unit ${n} and assay unit denominator unit ${l}`);c.initialConversion={conversionFactor:await U(n,l),conversionUom:e}}if(i!==e){const a=k(i,e);if(!a)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] no conversion unit found for target weight unit ${e} and assay unit numerator unit ${i}`);c.finalConversion={conversionFactor:await U(i,e),conversionUom:a}}return c}const V="id",j="foreign_key",B="lot_number",R="method",J="navarch_cashflow",x="navarch_parcel",q="contract",L="counterparty",W="assay_results",G="weight_result",H="actual_arrival_date",K="estimate_arrival_date",Q="bl_date",Y="estimated_shipment_date",X="vessel",z="origin",Z="destination",ee="shipment_code",ae="adjustments",te="parcel_finalisation_date",oe="navarch_assay_lot",ne="commodity",re="dry_weight",ie="dry_weight_uom",le="buyer_assay",se="seller_assay",ce="final_assay",de="assay_uom",ue="lot_number",me="navarch_weight_lot",fe="dry_weight",ye="wet_weight",pe="moisture",he="wet_weight_uom",ve="dry_weight_uom",_e="navarch_contract",ge="contract_currency",$e="name",we="navarch_contract_payment_information",De="related_contract",be="invoice_type",Ee="pay_percent",Pe="pa_days",Ce="pa_day_type",Ae="pa_ref_day",Se="pp_days",Ne="pp_day_type",Oe="pp_ref_day",Te="navarch_commodity_in_contract",Ie="contract",Ue="commodity",Me="primary_commodity",ke="payable_commodity",Fe="price_method",Ve="price_per_uom",je="treatment_charge_per_uom",Be="quotational_periods",Re="payable_assay_rates",Je="penalty_rates",xe="penalty_per_uom",qe="navarch_payable_assay_bracket",Le="initial_adjustment",We="initial_adjustment_uom",Ge="minimum_deduction",He="minimum_deduction_uom",Ke="maximum_cap",Qe="maximum_cap_uom",Ye="related_commodity_in_contract",Xe="bracket_type",ze="lower_threshold",Ze="lower_threshold_inclusive",ea="upper_threshold",aa="upper_threshold_inclusive",ta="rate",oa="rate_type",na="navarch_treatment_charge_bracket",ra="base_treatment_charge",ia="use_btc",la="for_every_unit",sa="related_contract_commodity_tc",ca="related_contract_commodity_rc",da="navarch_penalty_bracket",ua="no_penalty",ma="for_every_unit",fa="navarch_commodity",ya="name",pa="code",ha="navarch_currency",va="code",_a="navarch_unit",ga="symbol",$a="dry_symbol",wa="wet_symbol",Da="dry_unit",ba="wet_unit",Ea="conversionToGram",Pa="navarch_assay_unit",Ca="unit",Aa="conversion_to_ppb",Sa="composition",Na="navarch_counterparty",Oa="codename",Ta="name",Ia="navarch_vessel",Ua="name",Ma="price_pm",ka="average_price",Fa="date",Va="navarch_invoices",ja="parcel",Ba="invoice",Ra="invoice_date",Ja="amount_paid",xa="invoice_type",qa="navarch_forecast_price",La="commodity",Wa="price",Ga="start_date",Ha="end_date",Ka={Advance:0,"Second Advance":1,"Third Advance":2,"Fourth Advance":3,Provisional:4,"Second Provisional":5,"Third Provisional":6,"Fourth Provisional":7,Final:8};function Qa(e){const a=[...new Set(e.flatMap((e=>Object.keys(e))))],t=e.map((e=>a.map((a=>{const t=e[a]||"";return"string"==typeof t&&t.includes(",")?`"${t}"`:t})).join(",")));return[a.join(","),...t].join("\n")}function Ya(e){const a=new Blob([e],{type:"text/csv"}),t=URL.createObjectURL(a),o=document.createElement("a");o.href=t,o.download=`Cashflow-[${function(){const e=new Date,a=60*e.getTimezoneOffset()*1e3,t=e.getTime()-a,o=new Date(t),n=o.toISOString().slice(0,19),r=e.getTimezoneOffset()/60*-1;return`${n}GMT${r>0?"+":""}${r}`.replace(/:/g,"")}()}]-Valuation_Period-(${S(c.value.start_date,!1)}~${S(c.value.end_date,!1)}).csv`,document.body.appendChild(o),o.click(),document.body.removeChild(o)}class Xa extends Error{constructor(e){super(e),this.name="NonFatalError",Object.setPrototypeOf(this,Xa.prototype)}}return{isGeneraingDoc:i,invoiceUrl:c.value,generateCashflow:async function(){r.value="";try{i.value=!0;const e=await async function(){const e=new Date(c.value.start_date);if("Invalid Date"===e.toString())throw r.value="Start date is invalid",new Error("Start date is invalid");const a=new Date(c.value.end_date);if("Invalid Date"===a.toString())throw r.value="End date is invalid",new Error("End date is invalid");const t=await s.get(`/items/${_e}`,{params:{fields:[$e,V,"invoice_type"]}}),o={};await Promise.all(t.data.data.map((async t=>{var n,r,i,l,c;const d=await s.get(`/items/${we}`,{params:{filter:{[De]:{_eq:t[V]}},fields:[be,Pe,Ce,Ae]}}),u=await s.get(`/items/${x}`,{params:{filter:{[q]:{_eq:t[V]}},fields:[V,ee,H,K,Q,Y,te]}});for(const m of d.data.data){const d={days:m[Pe],day_type:m[Ce],ref_day:"Final"===m[xa]?"QP Month + n days":m[Ae]};if(!d)throw new Error(`Contract ${t[$e]} does not have a payment advice for invoice type ${m[xa]}`);let f,y="";for(const p of u.data.data){switch(d.ref_day){case"Arrival Date":y="Actual Arrival Date from the Parcel form",f=null!=(n=p[H])?n:p[K];break;case"B/L Date":y="B/L Date (or Estimated Shipment Date) from the Parcel form",f=null!=(r=p[Q])?r:p[Y];break;case"Invoice Date":y="Invoice Date (using the B/L Date or Estimated Shipment Date from the Parcel form)",f=null!=(i=p[Q])?i:p[Y];break;case"Estimated Shipment Date":y="Estimated Shipment Date from the Parcel form",f=p[Y];break;case"QP Month + n days":const e=await s.get(`items/${Te}`,{params:{filter:{[Ie]:{_eq:t[V]},[ke]:{_eq:!0}},fields:[Be]}});if(!Array.isArray(e.data.data)||0===e.data.data.length)throw new Error(`Contract ${t[$e]} does not have any payable commodities`);const a=e.data.data.map((e=>e[Be].find((e=>!!e.default)))),o=a.reduce(((e,a)=>a.qp_period>e.qp_period?a:e),a[0]);let u;switch(o.qp_code){case"MAMA":y="Actual Arrival Date (or Estimated Arrival Date) from the Parcel form",u=null!=(l=p[H])?l:p[K];break;case"MOSS":case"MOS":case"MOAS":y="B/L Date (or Estimated Shipment Date) from the Parcel form",u=null!=(c=p[Q])?c:p[Y];break;default:throw new Error(`Unsupported QP code ${o.qp_code}, currently only supports MAMA, MOS, MOSS, and MOAS`)}const m=I(new Date(u),o.qp_period);if(!m||"Invalid Date"===m.toString())throw new Error(`Invalid date for last date of QP month: ${m}, please ensure all fields for QP for contract ${t[$e]} and the ${y} in parcel ${p[ee]} are filled in`);f=m.toISOString();break;default:throw new Error(`Invalid reference day for payment advice: ${d.ref_day}; please contact Navarch for support`)}if(null==f)throw new Error(`Reference day for payment advice ${y} is empty in parcel ${p[ee]}`);const u=new Date(f),h=parseInt(d.days);let v;switch(d.day_type){case"Business Day(s)":v=O(u,h,!0);break;case"Calendar Day(s)":v=new Date(u.valueOf()),v.getHours()>=12?v.setDate(v.getDate()+h+1):v.setDate(v.getDate()+h);break;default:throw new Error(`Please provide a valid Day Type (Cashflow) for ${t[$e]}:Final Invoice Type`)}v>=e&&v<=a&&(o[p[V]]||(o[p[V]]=[]),o[p[V]].push({invoiceType:m[be],dueDate:v,parcelId:p[V],contractName:t[$e]}))}}})));const n=Object.keys(o),i=await s.get(`/items/${x}`,{params:{filter:{[V]:{_in:n}},fields:[V,q,L,W,G,H,K,Q,Y,X,z,Z,ee,ae,"parcel_finalised",te,W]}});if(!i.data.data||i.data.data.length!==n.length)throw new Error("Experiencing some network issues, please try again. If the issue persists, contact Navarch for support");const l={parcelData:i.data.data.reduce(((e,a)=>(e[a[V]]=a,e)),{}),contractNameByParcelId:n.reduce(((e,a)=>(e[a]=o[a][0].contractName,e)),{}),invoiceTypeParcel:n.flatMap((e=>o[e])),parcelIds:n};return console.log(`[getApplicableParcels] returnObject=${JSON.stringify(l)}`),l}(),a=await async function(e){const a=[],t=await s.get(`/items/${Va}`,{params:{filter:{[ja]:{_in:e.parcelIds},[Ba]:{_nnull:!0}},fields:[ja,xa,Ba,Ra,Ja]}});t.data.data.sort(((e,a)=>{const t=Ka[e[xa]]-Ka[a[xa]];return 0===t?new Date(a[Ra]).valueOf()-new Date(e[Ra]).valueOf():t}));for(const o of e.invoiceTypeParcel){const n=t.data.data.find((e=>e[ja]===o.parcelId&&e[xa]===o.invoiceType));n?a.push({parcelId:o.parcelId,invoiceType:o.invoiceType,contractName:e.contractNameByParcelId[o.parcelId],dueDate:o.dueDate,invoiceData:{...n[Ba],amount_paid:n[Ja]}}):a.push({parcelId:o.parcelId,invoiceType:o.invoiceType,contractName:e.contractNameByParcelId[o.parcelId],dueDate:o.dueDate,parcelData:e.parcelData[o.parcelId]})}return console.log(`[generateInvoiceParamForParcel] invoiceParams=${JSON.stringify(a)}`),a}(e);console.log(`[generateCashflow] form values=${JSON.stringify(c.value)}`);const o=await Promise.all(a.map((async e=>(console.log(`[generateCashflow] invoiceParam=${JSON.stringify(e)}`),await async function(e){var a,t,o,n,l,c,u,m,f,p,h,v,_,$,w,b,E,S,O,U,M,k,J,te,$e,Ea,Pa,Ca,Aa,Sa,Ma,ka,Fa,Ra,Ja,xa,qa,La,Wa,Ga,Ha,Qa,Ya,za;r.value="",i.value=!0;try{if(e.invoiceData){console.log(`[generateInvoice][invoice=${JSON.stringify(e.invoiceData.invoice_number)}::parcel=${e.invoiceData.parcel}] using existing invoice=${JSON.stringify(e.invoiceData)}`);const a=e.invoiceData,t=await s.get(`/items/${Na}`,{params:{filter:{[Ta]:{_eq:a.buyer}},fields:[Oa]}});it(t.data.data[0]);const o=await s.get(`/items/${x}`,{params:{filter:{[V]:{_eq:e.parcelId}},fields:[Q,H,K]}});console.log(`[generateInvoice][invoice=${JSON.stringify(e.invoiceData.invoice_number)}::parcel=${e.invoiceData.parcel}] parcel date data=${JSON.stringify(o.data.data)}`);const n=o.data.data[0];return{Counterparty:t.data.data[0][Oa],Vessel:"N/A"===a.vessel?"Vessel TBA":a.vessel,"Shipment Date":a.bl_date,"Arrival Date":n[H]?A(new Date(n[H])):n[K]?A(new Date(n[K])):"N/A",Status:o[Q]?"Unfinalised":"Planned",Revision:"Original",Invoice:`${a.invoice_type}:Original`,Parcel:a.parcel,"Invoice Due Date":A(e.dueDate),"Dry Weight":`${a.dry_weight} ${a.dry_weight_uom}`,"Total Revenues USD":a.total_revenue,"Total Penalties USD":a.total_deductions,...await Za(a.commodities,{dryWeight:g(a.dry_weight),dryWeightUom:a.dry_weight_uom}),"Total Adjustments USD":a.adjustments?a.adjustments.total_adjustments:"0.00","Parcel Value USD":a.invoice_value,"Parcel Payable Value(Below Line) USD":a.payable_amount,"Payments USD":a.amount_paid,"Due Total":a.balance_in_sellers_favor,metadata:{invoiceTypeRanking:Ka[a.invoice_type]}}}if(void 0===e.parcelData)throw new Xa(`Something went wrong, no parcel or invoice data for Invoice of parcel id ${e.parcelId.substring(0,5)} and invoice type ${e.invoiceType}`);const i=e.parcelId;if(!i)return void console.error(`[generateInvoice] A parcel id is not defined for invoice type ${e.invoiceType}`);const et=e.invoiceType,lt=e.parcelData,st=e.contractName;console.log(`[generateInvoice][parcel=${lt[ee]}::invoice type=${et}] parcel data=${JSON.stringify(lt)}`),function(e){if(!e)throw new Error("Parcel data not found, please ensure the selected parcel still exists");if(!e[ee])throw new Error("One of the parcels does not have a shipment code, please ensure that all parcels have a shipment code");if(!e[q])throw new Error(`The parcel ${e[ee]} does not have a contract, please ensure that the contract field for the parcel is not empty`);if(!e[L])throw new Error(`The parcel ${e[ee]} does not havea counterparty, please ensure that the counterparty field for the parcel is not empty`);if(!e[W])throw new Xa(`The parcel ${e[ee]} does not have assay results`);if(!e[G])throw new Xa(`The parcel ${e[ee]} does not have weight results`);if(!e[z])throw new Error(`The parcel ${e[ee]} does not havean origin port`);if(!e[Z])throw new Error(`The parcel ${e[ee]} does not havea destination port`)}(lt);const ct=lt[W],dt=lt[G],ut=lt[q];if(!ut)throw new Error(`Contract not found for parcel ${lt[ee]}`);const mt=await s.get(`/items/${we}`,{params:{filter:{[De]:{_eq:ut},[be]:{_eq:et}},fields:[be,Ee,Pe,Ce,Ae,Se,Ne,Oe]}});if(mt.data.data&&0===mt.data.data.length)throw new Error(`No invoice type found for the contract ${st}`);const ft=mt.data.data.find((e=>e[be]===et));if(!ft)throw new Error(`Cannot find payment information for ${et} in the contract ${st}, please ensure that data for it has been entered and saved`);const yt=await s.get(`/items/${me}?filter[${j}]=${dt}&sort[]=${B}`,{params:{fields:[V,fe,ye,R,pe,he,ve]}});console.log(`[generateInvoice][parcel=${lt[ee]}::invoice type=${et}] weight lots data=${JSON.stringify(yt.data.data)}`),function(e){if(!e||0===e.length)throw new Xa("No weight lots found for the selected parcel")}(yt.data.data);const pt=function(e){console.log("[evaluateWeights]");const a={};for(const t of e)a[t.method]||(console.log(`adding method ${t.method} to weightData object`),a[t.method]=[]),console.log(`adding lot ${t.id} to weightData.${t.method} array`),a[t.method.toString()].push(t);const t=[];for(const e of Object.keys(a)){if(!a[e]){console.log(`method=${e} does not exist in weightData object`);continue}console.log(`adding lots and other values to weights for method=${e}`);const o=d(a[e]);o&&t.push(o)}return t}(yt.data.data);let ht;if(ht||(ht=pt.find((e=>"Outturn"===e.method))),ht||(ht=pt.find((e=>"Inturn Final"===e.method))),ht||(ht=pt.find((e=>"Inturn"===e.method))),ht||(ht=pt.find((e=>"Estimated"===e.method))),ht||(ht=pt.find((e=>"Planned"===e.method))),!ht)throw new Error(`No weight lots with valid method found for parcel ${lt[ee]}`);if(void 0===ht.dry_weight||null===ht.dry_weight||void 0===ht.wet_weight||null===ht.wet_weight||void 0===ht.moisture||null===ht.moisture||void 0===ht.dry_weight_uom||null===ht.dry_weight_uom||void 0===ht.wet_weight_uom||null===ht.wet_weight_uom||void 0===ht.method||null===ht.method)throw new Error(`One of the fields for the latest weight lots data is undefined for parcel ${lt[ee]}`);const vt=await s.get(`/items/${_a}?filter[${$a}]=${ht.dry_weight_uom}`,{params:{fields:[Da]}}),_t=await s.get(`/items/${_a}?filter[${wa}]=${ht.wet_weight_uom}`,{params:{fields:[ba]}});if(!vt.data.data||!vt.data.data[0]||!vt.data.data[0][Da])throw new Error(`Dry weight uom not found for symbol ${ht.dry_weight_uom} for parcel ${lt[ee]}`);if(!_t.data.data||!_t.data.data[0]||!_t.data.data[0][ba])throw new Error(`Wet weight uom not found for symbol ${ht.wet_weight_uom} for parcel ${lt[ee]}`);const gt=await s.get(`/items/${oe}?filter[${j}]=${ct}&sort[]=${B}`,{params:{fields:[V,ne,R,re,ie,le,se,ce,ue,de]}});console.log(`[generateInvoice][parcel=${lt[ee]}::invoice type=${et}] assay lots data=${JSON.stringify(gt.data.data)}`),function(e){if(!e||0===e.length)throw new Xa("No assay lots found for the selected parcel")}(gt.data.data);const $t=function(e){var a;console.log("[evaluateAnalyticalAssay]");const t={};for(const a of e)t[a.method]||(t[a.method]={}),t[a.method][a.commodity]||(t[a.method][a.commodity]=[]),null!==a.lot_number?(1===t[a.method][a.commodity].length&&null===t[a.method][a.commodity][0].lot_number&&(t[a.method][a.commodity]=[]),t[a.method][a.commodity].push(a)):null===a.lot_number&&0===t[a.method][a.commodity].length&&t[a.method][a.commodity].push(a);console.log(`[evaluateAnalyticalAssay] group: ${JSON.stringify(t)}}`);const o={};for(const e in t){console.log(`[evaluateAnalyticalAssay] methodKey: ${e}, group[methodKey]: ${JSON.stringify(t[e])}`);for(const n in t[e]){console.log(`[evaluateAnalyticalAssay] commodityKey: ${n}, group[methodKey][commodityKey]: ${JSON.stringify(t[e][n])}`),o[e]=null!=(a=o[e])?a:{},o[e][n]={};const i=t[e][n].reduce(((e,a)=>e+a.dry_weight),0);if(console.log(`[evaluateAnalyticalAssay] totalDryWeight: ${i} from ${JSON.stringify(t[e][n])}`),0===i||isNaN(i))throw r.value=`Please provide dry weight for ${n} commodity in ${e} method, total dry weight cannot be ${i}`,new Error("[evaluateAnalyticalAssay] totalDryWeight is 0");console.log(`[evaluateAnalyticalAssay] totalDryWeight: ${i}`),o[e][n].analytical_assay=t[e][n].reduce(((a,t)=>{var o,i;const l=null!=(i=t.final_assay)?i:null!=(o=t.seller_assay)?o:t.buyer_assay;if(null==l)throw r.value=`Please provide Final, Seller or Buyer assay value for ${n} commodity in ${e} method`,new Error("[evaluateAnalyticalAssay] assay value is not defined for assay lot");const s=a+l*t.dry_weight;return console.log(`[evaluateAnalyticalAssay] evaluated analytical assay: ${s} for method=${e}, commodity=${n}; with values accumulator=${a}, assayValue=${l}, dryWeight=${t.dry_weight}`),s}),0)/i,console.log(`[evaluateAnalyticalAssay] analytical assay: ${o[e][n].analytical_assay}`),t[e][n].length>0&&(o[e][n][de]=t[e][n][0][de])}}return console.log(`[evaluateAnalyticalAssay] analyticalAssay: ${JSON.stringify(o)}`),o}(gt.data.data);let wt;if(wt||(wt=$t.Outturn),wt||(wt=$t["Inturn Final"]),wt||(wt=$t.Inturn),wt||(wt=$t.Estimated),wt||(wt=$t.Planned),!wt)throw new Error(`No assay lot data with a valid method found for parcel ${lt[ee]}`);console.log(`[generateInvoice][parcel=${lt[ee]}::invoice type=${et}] weight lots for invoice evaluation=${JSON.stringify(ht)}`),console.log(`[generateInvoice][parcel=${lt[ee]}::invoice type=${et}] assay lots for invoice evaluation=${JSON.stringify(wt)}`);const Dt=await s.get(`/items/${_e}/${ut}`,{params:{fields:[ge]}});!function(e){if(!e)throw new Error("Contract data not found, please ensure the selected contract still exists");if(!e[ge])throw new Error("The selected contract does not have a set currency, please ensure that the currency field for the contract is not empty")}(Dt.data.data);const bt=await s.get(`/items/${ha}/${Dt.data.data.contract_currency}`,{params:{fields:[va]}});!function(e){if(!e)throw new Error("Currency data not found, please ensure the selected currency still exists");if(!e[va])throw new Error("The selected currency in the contract is not valid")}(bt.data.data);const Et=bt.data.data.code,Pt=await s.get(`/items/${Te}?filter[${Ie}]=${ut}`,{params:{fields:["id",Ue,Me,ke,Fe,Be,Re,Je,xe,Ve,je]}});!function(e){if(!e||0===e.length)throw new Error("No commodity data found in selected contract for parcel");if(!e.every((e=>e[Ue])))throw new Error("The selected contract has an undefined commodity, please ensure that the 'Commodity' field for all commodites in the contract is not empty");if(!e.every((e=>!e[ke]||e[Ve])))throw new Error("The selected contract has an undefined base price Uom for commodity, please ensure that the 'Base Price Uom' field for all commodites in the contract is not empty")}(Pt.data.data),console.log(`[generateInvoice][parcel=${lt[ee]}::invoice type=${et}] contract commodity data=${JSON.stringify(Pt.data.data)}`);const Ct=[],At=[];let St="";for(const{id:e,commodity:r,primary_commodity:i,price_method:d,quotational_periods:g,price_per_uom:j,penalty_per_uom:B,treatment_charge_per_uom:R}of Pt.data.data){const x=await s.get(`/items/${fa}/${r}`,{params:{fields:[ya,pa,V]}});if(tt(x.data.data,r),!wt[x.data.data.code]){console.log(`[generateInvoice][parcel=${lt[ee]}::invoice type=${et}::comm=${x.data.data[ya]}] no analytical assay for commodity ${x.data.data.code} found, skipping...`);continue}if(i&&(St=x.data.data[ya]),null!==g){const r=g;console.log(`[generateInvoice][parcel=${lt[ee]}::invoice type=${et}::comm=${x.data.data[ya]}] qp=${JSON.stringify(r)}`);const i=Array.isArray(r)?r.find((e=>e.default)):null;if(!i)throw new Error(`No default quotational period found for commodity ${x.data.data.code}`);const C=r.filter((e=>!e.default)).map((e=>`${e.qp_period} ${e.qp_code}`)),B=[`${i.qp_period} ${i.qp_code}`,...C].join(", ");console.log(`[generateInvoice][parcel=${lt[ee]}::invoice type=${et}::comm=${x.data.data[ya]}] evaluate payable assay for ${x.data.data.code} with an analytical assay=${null==(a=wt[x.data.data.code])?void 0:a.analytical_assay}`);const q=await s.get(`/items/${qe}?filter[${Ye}]=${e}`,{params:{fields:[Xe,ze,Ze,ea,aa,ta,oa,Le,We,Ge,He,Ke,Qe]}}),{payableAssay:L,expression:W}=await D(null==(t=wt[x.data.data.code])?void 0:t.analytical_assay,null==(o=wt[x.data.data.code])?void 0:o.assay_uom,q.data.data,x.data.data[ya]);let G,X,z="";if("Final"!==et){const e={invoice_type:et,days:ft[Se],day_type:ft[Ne],ref_day:ft[Oe]};if(!e)throw new Error(`No provisional pricing found for invoice type ${et} for parcel ${lt[ee]}`);let a;switch(e.ref_day){case"Arrival Date":a=null!=(n=lt[H])?n:lt[K],z="Actual Arrival Date from the Parcel form";break;case"B/L Date":a=null!=(l=lt[Q])?l:lt[Y],z="B/L Date from the Parcel form";break;case"Invoice Date":a=null!=(c=lt[Q])?c:lt[Y],z="B/L Date (or Estimated Date) as Invoice Date";break;case"Estimated Shipment Date":a=lt[Y],z="Estimated Shipment Date from the Parcel form";break;default:throw new Error(`Invalid reference day for invoice pricing: ${e.ref_day}; please contact Navarch for support`)}if(null==a)throw new Error(`Reference day for invoice pricing ${z} is empty`);X=new Date(a);const t=parseInt(e.days),o=e.day_type;switch(o){case"Business Day(s)":G=N(X,t,!0);break;case"Calendar Day(s)":G=new Date(X.valueOf()),G.setDate(G.getDate()-t);break;default:throw new Error(`Invalid day type ${o} from contract ${st} for invoice type ${et}`)}}else{let e;switch(i.qp_code){case"MAMA":e=new Date(null!=(u=lt[H])?u:lt[K]),z="Actual Arrival Date";break;case"MOSS":case"MOS":case"MOAS":e=new Date(null!=(m=lt[Q])?m:lt[Y]),z="Estimated Shipment Date";break;default:throw new Error(`Unsupported QP code ${i.qp_code} in the contract ${st}, please ensure all commodity QP codes are MAMA, MOS, MOSS, or MOAS`)}if(null==e)throw new Error(`Invalid reference day for ${z} from contract ${st} for commodity ${x.data.data[ya]}`);G=T(e,i.qp_period),X=I(e,i.qp_period)}console.log(`[generateInvoice][parcel=${lt[ee]}::invoice type=${et}::comm=${x.data.data[ya]}] provisional pricing date range: ${G.toString()} - ${X.toString()}`);const Z=await at(x.data.data.code,x.data.data[V],d,G,X);let ae;const oe=await s.get(`/items/${na}?filter[${sa}]=${e}`,{params:{fields:[ze,Ze,ea,aa,ra,ia,la,ta]}});let ne,re;if(void 0!==oe.data.data&&null!==oe.data.data&&oe.data.data.length>0&&(ae=await P(Z,null==(f=wt[x.data.data.code])||f.assay_uom,oe.data.data,x.data.data[ya],"Treatment Charge")),ae){if(!R)throw new Error(`Charge Rate UOM is not defined for commodity ${x.data.data[ya]}`);const e=await s.get(`/items/${_a}/${R}`,{params:{fields:[ga]}});nt(e.data.data,x.data.data[ya]),ne=e.data.data[ga]}const ie=await s.get(`/items/${na}?filter[${ca}]=${e}`,{params:{fields:[ze,Ze,ea,aa,ra,ia,la,ta]}});if(void 0!==ie.data.data&&null!==ie.data.data&&ie.data.data.length>0&&(re=await P(Z,null==(p=wt[x.data.data.code])||p.assay_uom,ie.data.data,x.data.data[ya],"Refining Charge")),re){if(!R)throw new Error(`Charge Rate UOM is not defined for commodity ${x.data.data[ya]}`);const e=await s.get(`/items/${_a}/${R}`,{params:{fields:[ga]}});nt(e.data.data,x.data.data[ya]),ne=e.data.data[ga]}const le=await s.get(`/items/${_a}/${j}`,{params:{fields:[ga]}});ot(le.data.data,x.data.data[ya]);const se=le.data.data[ga],ce=await F(se,ht.dry_weight_uom,null==(h=wt[x.data.data.code])?void 0:h.assay_uom);console.log(`[generateInvoice][parcel=${lt[ee]}::invoice type=${et}::comm=${x.data.data[ya]}] payableMetalConversion for commodity ${x.data.data.name}: ${JSON.stringify(ce)}`),ce.initialConversion=1===(null==(v=ce.initialConversion)?void 0:v.conversionFactor)?void 0:ce.initialConversion,ce.finalConversion=1===(null==(_=ce.finalConversion)?void 0:_.conversionFactor)?void 0:ce.finalConversion,Ct.push({commodity:x.data.data.name,analytical_assay:y(null==($=wt[x.data.data.code])?void 0:$.analytical_assay,4),deduction_expression:W,payable_assay:y(L,4),assay_uom:null==(w=wt[x.data.data.code])?void 0:w.assay_uom,payable_metal:y(ht.dry_weight*(null!=(E=null==(b=ce.initialConversion)?void 0:b.conversionFactor)?E:1)*(null!=L?L:1)*(null!=(O=null==(S=ce.finalConversion)?void 0:S.conversionFactor)?O:1)*("%"!==(null==(U=wt[x.data.data.code])?void 0:U.assay_uom)?1:.01),4),payable_metal_expression:`${y(ht.dry_weight,4)}${ht.dry_weight_uom}${ce.initialConversion?` * ${y(ce.initialConversion.conversionFactor,4)}${ce.initialConversion.conversionUom}`:""} * ${y(null!=L?L:1,4)}${"%"!==(null==(M=wt[x.data.data.code])?void 0:M.assay_uom)?`${null==(k=wt[x.data.data.code])?void 0:k.assay_uom}`:" / 100"}${ce.finalConversion?` * ${y(ce.finalConversion.conversionFactor,4)}${ce.finalConversion.conversionUom}`:""}`,payable_metal_uom:se,qp:B,qp_start_date:A(G),qp_end_date:A(X),price_method:d,price_rate:y(Z,4),price_per_uom:se,price:y(ht.dry_weight*(null!=(te=null==(J=ce.initialConversion)?void 0:J.conversionFactor)?te:1)*(null!=L?L:1)*(null!=(Ea=null==($e=ce.finalConversion)?void 0:$e.conversionFactor)?Ea:1)*("%"!==(null==(Pa=wt[x.data.data.code])?void 0:Pa.assay_uom)?1:.01)*Z),treatment_charge:ae?{rate:y(ae.baseTreatmentCharge,4),discount:y((null!=(Ca=ae.baseTreatmentCharge)?Ca:0)-(null!=(Aa=ae.finalValue)?Aa:0),4),final_rate:y(ae.finalValue,4),per_uom:ne,final_amount:y(ht.dry_weight*(null!=(Sa=ae.finalValue)?Sa:1))}:void 0,refining_charge:re?{rate:y(re.baseTreatmentCharge,4),discount:y((null!=(Ma=re.baseTreatmentCharge)?Ma:0)-(null!=(ka=re.finalValue)?ka:0),4),final_rate:y(re.finalValue,4),per_uom:ne,final_amount:y(ht.dry_weight*(null!=(Fa=re.finalValue)?Fa:1))}:void 0,final_total:y(ht.dry_weight*(null!=(Ja=null==(Ra=ce.initialConversion)?void 0:Ra.conversionFactor)?Ja:1)*(null!=L?L:1)*(null!=(qa=null==(xa=ce.finalConversion)?void 0:xa.conversionFactor)?qa:1)*("%"!==(null==(La=wt[x.data.data.code])?void 0:La.assay_uom)?1:.01)*Z-(ae?1:0)*(ht.dry_weight*(null!=(Wa=null==ae?void 0:ae.finalValue)?Wa:1))-(re?1:0)*(ht.dry_weight*(null!=(Ga=null==re?void 0:re.finalValue)?Ga:1)))})}const q=await s.get(`/items/${da}?filter[${Ye}]=${e}`,{params:{fields:[ze,Ze,ea,aa,ua,ma,ta]}});if(q.data.data.length>0){if(null===B)throw new Error(`Please fill in the field for Penalty Per UOM in contract ${st} for commodity ${x.data.data[ya]}`);const e=await s.get(`/items/${_a}/${B}`,{params:{fields:[ga]}});rt(e.data.data,x.data.data[ya]);const a=e.data.data[ga],{penalty:t,expression:o,bracket:n}=await C(null==(Ha=wt[x.data.data.code])?void 0:Ha.analytical_assay,q.data.data,Et,a,x.data.data[ya]);console.log(`[generateInvoice][parcel=${lt[ee]}::invoice type=${et}::comm=${x.data.data[ya]}] evaluated penalty with an analytical assay=${null==(Qa=wt[x.data.data.code])?void 0:Qa.analytical_assay}, penaltyRate=${null==n?void 0:n.rate}, finalPenaltyRate=${t}, expression='${o}'`),At.push({commodity:x.data.data.name,analytical_assay:y(null==(Ya=wt[x.data.data.code])?void 0:Ya.analytical_assay,4),deduction_expression:o,assay_uom:null==(za=wt[x.data.data.code])?void 0:za.assay_uom,penalty_rate:y(null==n?void 0:n.rate,4),penalty_per_uom:a,final_penalty_rate:y(t,4),final_penalty:y((null!=t?t:1)*ht.dry_weight)})}}console.log(`[generateInvoice][parcel=${lt[ee]}::invoice type=${et}] evaluated commodities=${JSON.stringify(Ct)}`),console.log(`[generateInvoice][parcel=${lt[ee]}::invoice type=${et}] evaluated penalties${JSON.stringify(At)}`);const Nt=Ct.reduce(((e,a)=>e+g(a.price)),0),Ot=Ct.reduce(((e,a)=>{var t;return e+g(null==(t=a.treatment_charge)?void 0:t.final_amount)}),0),Tt=Ct.reduce(((e,a)=>{var t;return e+g(null==(t=a.refining_charge)?void 0:t.final_amount)}),0),It=At.reduce(((e,a)=>e+g(a.final_penalty)),0);console.log(`[generateInvoice][parcel=${lt[ee]}::invoice type=${et}] TOTAL_REVENUE=${Nt}, TOTAL_TREATMENT_CHARGE=${Ot}, TOTAL_REFINING_CHARGE=${Tt}, TOTAL_PENALTIES=${It}`);let Ut,Mt=0;const kt=!!lt[ae];kt&&(Mt=lt[ae].reduce(((e,a)=>e+a.amount),0),Ut={adjustments:lt[ae].map((e=>({description:e.description,amount:y(e.amount)}))),total_adjustments:y(Mt)});const Ft=ft[Ee],Vt=Nt-Ot-Tt-It+Mt,jt=null!=Ft?Vt*Ft/100:void 0,Bt=await s.get(`/items/${Na}/${lt[L]}`,{params:{fields:[Oa]}});it(Bt.data.data);const Rt=lt[X];let Jt;Rt&&(Jt=await s.get(`/items/${Ia}/${Rt}`,{params:{fields:[Ua]}}),function(e){if(console.log("[validateVessel]"),!e)throw new Error("Vessel for parcel not found");if(!e[Ua])throw new Error("No name defined for vessel of the selected parcel")}(Jt.data.data));let xt=(await s.get(`/items/${Va}?filter[${ja}]=${i}`,{params:{fields:["id",Ba]}})).data.data.reduce(((e,a)=>e+(a[Ba]?1:0)),0)+1,qt=i;const Lt=xt.toString().padStart(2,"0"),Wt=(lt[ee],qt.toString().padStart(2,"0")),Gt={Counterparty:Bt.data.data[Oa],Vessel:Jt?Jt.data.data[Ua]:"Vessel TBA","Shipment Date":lt[Q]?A(new Date(lt[Q])):lt[Y]?A(new Date(lt[Y])):"N/A","Arrival Date":lt[H]?A(new Date(lt[H])):lt[K]?A(new Date(lt[K])):"N/A",Status:lt[Q]?"Unfinalised":"Planned",Revision:"Valuation",Invoice:`${et}:Valuation`,Parcel:`${lt[ee]} (#${Wt})`,"Invoice Due Date":A(e.dueDate),"Dry Weight":`${y(ht.dry_weight,4)} ${ht.dry_weight_uom}`,"Total Revenues USD":y(Nt),"Total Penalties USD":y(It+Ot+Tt),...await Za(Ct,{dryWeight:ht.dry_weight,dryWeightUom:ht.dry_weight_uom}),"Total Adjustments USD":kt?Ut.total_adjustments:"0.00","Parcel Value USD":y(Vt),"Parcel Payable Value(Below Line) USD":y(jt),"Payments USD":"-","Due Total":"-",metadata:{invoiceTypeRanking:Ka[et]}};return console.log(`[generateInvoice][parcel=${lt[ee]}::invoice type=${et}] generated forecast invoice=${JSON.stringify(Gt)}`),Gt}catch(a){if(a instanceof Xa)return void console.error(`[generateInvoice][parcel=${e.parcelId}::invoice type=${e.invoiceType}]Non-fatal error: ${a.message}`);throw a}}(e))))),n=function(e){const a=e.reduce(((e,a)=>(e[a.Parcel]||(e[a.Parcel]=[]),e[a.Parcel].push(a),e)),{});Object.keys(a).forEach((e=>{a[e].sort(((e,a)=>e.metadata.invoiceTypeRanking<a.metadata.invoiceTypeRanking?-1:e.metadata.invoiceTypeRanking>a.metadata.invoiceTypeRanking?1:0))})),console.log(`[evaluateDuePaymentsForCashflow] cashflowByParcel=${JSON.stringify(a)}`),Object.keys(a).forEach((e=>{a[e].forEach(((t,o)=>{if(!t["Parcel Payable Value(Below Line) USD"]||"-"===t["Parcel Payable Value(Below Line) USD"])throw new Error(`Parcel ${e} for invoice ${t.Invoice} does not have a Parcel Payable Value(Below Line) USD`);const n=g(t["Parcel Payable Value(Below Line) USD"]);if(isNaN(n))throw new Error(`Parcel ${e} for invoice ${t.Invoice} has an invalid Parcel Payable Value(Below Line) USD of ${t["Parcel Payable Value(Below Line) USD"]}`);if(0===o){t["Payments USD"]=t["Payments USD"]&&"-"!==t["Payments USD"]?t["Payments USD"]:"0.00";const e=g(t["Payments USD"]);t["Due Total"]=y(n-e)}else{if(!a[e][o-1]["Parcel Payable Value(Below Line) USD"]||"-"===a[e][o-1]["Parcel Payable Value(Below Line) USD"])throw new Error(`Parcel ${e} for invoice ${t.Invoice} does not have a Parcel Payable Value(Below Line) USD for the previous invoice`);const r=g(a[e][o-1]["Parcel Payable Value(Below Line) USD"]);if(isNaN(r))throw new Error(`Parcel ${e} for invoice ${t.Invoice} has an invalid Parcel Payable Value(Below Line) USD of ${a[e][o-1]["Parcel Payable Value(Below Line) USD"]} for the previous invoice`);t["Due Total"]=y(n-r),t["Payments USD"]&&"-"!==t["Payments USD"]||(t["Payments USD"]=a[e][o-1]["Payments USD"])}}))})),console.log(`[evaluateDuePaymentsForCashflow] cashflowByParcel=${JSON.stringify(a)}`);const t=Object.keys(a).flatMap((e=>a[e]));return console.log(`[evaluateDuePaymentsForCashflow] cashflowAsJsonWithDueTotal=${JSON.stringify(t)}`),t}(o.filter((e=>!!e))),l=n.map((e=>(delete e.metadata,e))),u=Qa(l);t("input",l),console.log(`[generateCashflow] cashflow response: ${JSON.stringify(l)}`),console.log(`[generateCashflow] cashflow as csv: ${u}`),i.value=!1,za(u)}catch(e){r.value=e.message}finally{i.value=!1}},downloadDoc:za,copy:async function(){l.value=!0;const{id:e,user_created:a,date_created:t,user_updated:o,date_updated:n,cashflow:i,forecast_price:d,...u}=c.value,m=await s.get(`/items/${qa}`,{params:{filter:{[V]:d},fields:[La,Ga,Ha,Wa]}}),f=await s.post(`items/${qa}`,m.data.data);if(200!==f.status)return console.log(`[cashflow::copy] duplicate forecast prices response status: ${f.status}`),void(r.value=`Failed to duplicate forecast prices with status ${f.status}`);const y=f.data.data.map((e=>e.id));console.log(`[cashflow::copy] duplicated forecast prices id=${JSON.stringify(y)}`),console.log(`[cashflow::copy] requestBody=${JSON.stringify(u)}`);const p=await s.post("/items/"+J,{forecast_price:y,...u});if(200!==p.status)return console.log(`[cashflow::copy] copy response status: ${p.status}`),void(r.value=`Failed to duplicate cashflow with status ${p.status}`);l.value=!1,window.open(`/admin/content/${J}/${p.data.data.id}`)},isCopying:l,failureReason:r};function za(e){let a;a=f(e)?Qa(c.value.input):e,console.log(`[downloadDoc] csvData=${a}`),Ya(a)}async function Za(e,a){console.log(`[mapOutCommoditiesForCashflow] commodities=${JSON.stringify(e)};;containedMetalParam=${JSON.stringify(a)}`);return(await Promise.all(e.map((async e=>{var t,o,n,r,i,l,s;const c=await F(e.payable_metal_uom,a.dryWeightUom,e.assay_uom);console.log(`[mapOutCommoditiesForCashflow] commodity=${e.commodity}, containedMetalUnitConversion=${JSON.stringify(c)}`);const d=(null!=(o=null==(t=c.initialConversion)?void 0:t.conversionFactor)?o:1)*(null!=(r=null==(n=c.finalConversion)?void 0:n.conversionFactor)?r:1),u=("%"===e.assay_uom?.01:1)*e.analytical_assay;return{[`${e.commodity} Payable Metal (${e.payable_metal_uom})`]:e.payable_metal,[`${e.commodity} Contained Metal (${e.payable_metal_uom})`]:y(a.dryWeight*u*d),[`${e.commodity} Revenue (USD)`]:e.price,[`${e.commodity} QP Month`]:et(new Date(e.qp_start_date)),[`${e.commodity} Price (USD/${e.price_per_uom})`]:e.price_rate,[`${e.commodity} TC (USD)`]:null==(i=e.treatment_charge)?void 0:i.final_amount,[`${e.commodity} TC (USD/${null==(l=e.treatment_charge)?void 0:l.per_uom})`]:null==(s=e.treatment_charge)?void 0:s.final_rate}})))).reduce(((e,a)=>({...e,...a})),{})}function et(e){return`${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][e.getMonth()]} ${e.getFullYear()}`}async function at(e,a,t,o,n,r=1){var i;if(console.log(`[getCommodityAvgPrice] commodity=${e}, commodityId=${a}, source=${t}, startDate=${o}, endDate=${n}, currency=${r}`),f(e))throw new Error(`Commodity ${e} is not defined for price calcualtion`);if(f(t))throw new Error(`Price method for commodity ${e} is not defined for price calcualtion`);if(f(o))throw new Error(`Start date is not defined for price calcualtion with Price Method #${t} has not been properly defined, please ensure that contract QP for commodity ${e} is properly defined`);if(f(n))throw new Error(`End date is not defined for price calcualtion with Price Method #${t} has not been properly defined, please ensure that contract QP for commodity ${e} is properly defined`);const l=await s.get(`/items/navarch_commodity_price?filter[_and][0][price_method][_eq]=${t}&filter[_and][0][currency][_eq]=${r}&filter[_and][1][date][_between][0]=${S(o)}&filter[_and][1][date][_between][1]=${S(n)}&sort=date`,{params:{fields:[Ma,ka,Fa,"price_method"]}});if((null==(i=l.data)?void 0:i.data)&&Array.isArray(l.data.data)&&l.data.data.length>0){const a=l.data.data[l.data.data.length-1],r=new Date(a[Fa]);if(console.log(`[getCommodityAvgPrice] commodity prices=${JSON.stringify(l.data.data)}`),r>=n){const a=l.data.data.reduce(((a,o)=>{if(!o[ka]&&!o[Ma])throw new Error(`Commodity ${e} for Price Method #${t} on the date of ${o[Fa]} does not have a price, please contact Navarch for assistance`);let n;if(null!==o[ka]&&(n=Number(o[ka])),null===o[Ma])throw new Error(`The commodity price for ${e} of Price Method #${t} for the date of ${o[Fa]} is not a valid number, please contact Navarch for assistance`);return n=Number(o[Ma]),a+n}),0)/l.data.data.length;return console.log(`[getCommodityAvgPrice] average price=${a} for commodity ${e} between ${S(o)} and ${S(n)}`),a}console.log(`[getCommodityAvgPrice] latest comm price date=${r} is before end date=${n}, getting forecast price`)}if(!c.value[V])throw new Error("Please save the Cashflow form first before generating the cashflow doc");const d=await s.get(`/items/${qa}`,{params:{filter:{[La]:{_eq:a},cashflow_forecast_id:{_eq:c.value[V]}},fields:[Wa,La,Ga,Ha]}});!function(e,a){if(!e||!Array.isArray(e)||0===e.length)throw new Error(`No forecast price found for ${a}, please ensure prices have been provided`)}(d.data.data,e);const u=d.data.data.find((e=>{const a=new Date(e[Ga]),t=new Date(e[Ha]);return a<=o&&t>=n}));if(!u)throw new Error(`No single forecast price found for commodity ${e} between ${S(o)} and ${S(n)}, please ensure there is only one price value for this range`);return console.log(`[getCommodityAvgPrice] forecast price=${u[Wa]} for commodity ${e} between ${S(o)} and ${S(n)}`),u[Wa]}function tt(e,a){var t,o,n;if(console.log("[validateCommodityData]"),!e)throw new Error("commodity data response is null");if(!e[ya])throw new Error(`Commodity name for commodity ${null!=(t=e[pa])?t:a} is undefined, please contact Navarch for assistance`);if(!e[pa])throw new Error(`Commodity code for commodity ${null!=(o=e[ya])?o:a} is not defined, please contact Navarch for assistance`);if(!e[V])throw new Error(`Commodity ID for commodity ${null!=(n=e[ya])?n:a} is not defined, please contact Navarch for assistance`)}function ot(e,a){if(!e)throw new Error(`Price per UOM for commodity ${a} is not a valid`);if(!e[ga])throw new Error(`Price per UOM for commodity ${a} does not have a valid unit symbol, please contact Navarch for assistance`)}function nt(e,a){if(!e)throw new Error(`Charge per UOM for commodity ${a} is not a valid`);if(!e[ga])throw new Error(`Charge per UOM for commodity ${a} does not have a valid unit symbol, please contact Navarch for assistance`)}function rt(e,a){if(!e)throw new Error(`Penalty per UOM for commodity ${a} is not a valid`);if(!e[ga])throw new Error(`Penalty per UOM for commodity ${a} does not have a valid unit symbol, please contact Navarch for assistance`)}function it(e){if(console.log("[validateCounterparty]"),!e)throw new Error("Counterparty for parcel not found");if(!e[Oa])throw new Error("No codename defined for counterparty of the selected parcel")}}});const $={key:0},w={key:1};var D=[],b=[];!function(e,a){if(e&&"undefined"!=typeof document){var t,o=!0===a.prepend?"prepend":"append",n=!0===a.singleTag,r="string"==typeof a.container?document.querySelector(a.container):document.getElementsByTagName("head")[0];if(n){var i=D.indexOf(r);-1===i&&(i=D.push(r)-1,b[i]={}),t=b[i]&&b[i][o]?b[i][o]:b[i][o]=l()}else t=l();65279===e.charCodeAt(0)&&(e=e.substring(1)),t.styleSheet?t.styleSheet.cssText+=e:t.appendChild(document.createTextNode(e))}function l(){var e=document.createElement("style");if(e.setAttribute("type","text/css"),a.attributes)for(var t=Object.keys(a.attributes),n=0;n<t.length;n++)e.setAttribute(t[n],a.attributes[t[n]]);var i="prepend"===o?"afterbegin":"beforeend";return r.insertAdjacentElement(i,e),e}}(".margin-top-16px[data-v-64969d30] {\n  margin-top: 16px;\n}",{}),g.render=function(e,a,t,o,n,p){const h=r("v-button"),v=r("v-notice");return i(),l(s,null,[c(' <input :value="value" @input="handleChange($event.target.value)" /> '),c(" create a button only interface for Directus"),e.value?(i(),l("div",w,[d(h,{onClick:a[1]||(a[1]=()=>e.downloadDoc())},{default:u((()=>[m("Download Cashflow ")])),_:1})])):(i(),l("div",$,[d(h,{onClick:a[0]||(a[0]=()=>e.generateCashflow()),loading:e.isGeneraingDoc},{default:u((()=>[m("Generate Cashflow")])),_:1},8,["loading"]),e.failureReason?(i(),f(v,{key:0},{default:u((()=>[m(y(e.failureReason),1)])),_:1})):c("v-if",!0)])),d(h,{class:"margin-top-16px",onClick:a[2]||(a[2]=()=>e.copy()),loading:e.isCopying},{default:u((()=>[m("Copy")])),_:1},8,["loading"])],64)},g.__scopeId="data-v-64969d30",g.__file="src/interface.vue";var E=a({id:"navarch-docgen-cashflow",name:"Navarch Cashflow Generator Button",icon:"receipt_long",description:"This is my custom interface for Navarch's Cashflow Doc!",component:g,options:null,types:["json"],group:"standard"});export{E as default};
