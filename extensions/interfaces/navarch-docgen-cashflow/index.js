import{useApi as e,defineInterface as t}from"@directus/extensions-sdk";import{defineComponent as a,ref as o,inject as n,resolveComponent as i,openBlock as r,createElementBlock as l,Fragment as s,createCommentVNode as c,createVNode as d,withCtx as u,createTextVNode as f,createBlock as m,toDisplayString as p}from"vue";var y=(e=>(e.BRACKET="Bracket",e.MIN_DEDUCTION="Minimum Deduction",e.MAX_CAP="Maximum Cap",e))(y||{}),h=(e=>(e.PERCENTAGE="Percentage",e.FRACTIONAL="Fractional",e))(h||{}),v=(e=>(e.WET_WEIGHT="wet_weight",e.MOISTURE="moisture",e.DRY_WEIGHT="dry_weight",e))(v||{}),_=(e=>(e.METHOD="method",e.WET_WEIGHT_UOM="wet_weight_uom",e.MOISTURE_UOM="moisture_uom",e.DRY_WEIGHT_UOM="dry_weight_uom",e))(_||{}),g=a({props:{value:{type:Object,default:null}},emits:["input"],setup(t,{emit:a}){const i=o(""),r=o(!1),l=o(!1),s=e(),c=n("values",o({}));function d(e){if(console.log("[evaluateWeightData]"),0===e.length)return;const t=f(e,v.DRY_WEIGHT),a=f(e,v.WET_WEIGHT);return{method:u(e,_.METHOD),lots:e,dry_weight_uom:u(e,_.DRY_WEIGHT_UOM),wet_weight_uom:u(e,_.WET_WEIGHT_UOM),dry_weight:t,wet_weight:a,moisture:(a-t)/a*100}}function u(e,t){if(console.log("[getFirstValueAsSharedValue]"),0!==e.length)return console.log(`lots[0][${t.toString()}]=${e[0][t.toString()]}`),e[0][t.toString()]}function f(e,t){return console.log("[evaluateAggregateValue]"),e.reduce(((e,a)=>{var o;return e+parseFloat(null!=(o=a[t.toString()])?o:"0")}),0)}function m(e){return null==e}function p(e,t=2,a=!0){if(console.log("[formatNumber]"),isNaN(e)||null===e)return"-";const o=Math.round(e*Math.pow(10,t))/Math.pow(10,t),[n,i]=o.toString().split("."),r=n.replace(/\B(?=(\d{3})+(?!\d))/g,",");if(!i&&!a)return r;return`${r}.${(null!=i?i:"").padEnd(t,"0")}`}function g(e,t=2,a=!1){if(m(e)||isNaN(e))return null;const o=a&&e<0;return o&&(e*=-1),Math.round(e*Math.pow(10,t))/Math.pow(10,t)*(o?-1:1)}function $(e){if(console.log("[parseNumber]"),"number"==typeof e)return e;if(!e||"-"===e)return 0;const t=parseFloat(e.replace(/[^\d.-]/g,""));return console.log(`[parseNumber] number: ${e} to ${t}`),t}function w(e,t){return console.log("[findBracket]"),e.find((e=>{var a,o;const n=t>(null!=(a=e.lower_threshold)?a:0)&&(m(e.upper_threshold)||t<e.upper_threshold)||e.lower_threshold_inclusive&&t===(null!=(o=e.lower_threshold)?o:0)||e.upper_threshold_inclusive&&t===e.upper_threshold;return console.log(`[findBracket] value=${t} for bracket: ${JSON.stringify(e)}? match=${!!n}`),n}))}function D(e,t){var a,o,n,i,r,l,s,c,d,u,f;console.log("[evaluateFinalValueFromBrackets]");const m=(e-(null!=(a=t.initial_adjustment)?a:0)*(t.initial_adjustment_conversion_by_multiplication?null!=(o=t.initial_adjustment_conversion_factor)?o:1:1/(null!=(n=t.initial_adjustment_conversion_factor)?n:1)))*(null!=(i=t.rate)?i:0)*(t.rate_type===h.PERCENTAGE?.01:1)+(null!=(r=t.final_adjustment)?r:0)*(t.final_adjustment_conversion_factor?null!=(l=t.final_adjustment_conversion_factor)?l:1:1/(null!=(s=t.final_adjustment_conversion_factor)?s:1));switch(t.bracket_type){case y.MIN_DEDUCTION:if(null===t.comparator||void 0===t.comparator)throw new Error("Minimum deduction not found");const a=t.comparator*(t.comparator_conversion_by_multiplication?null!=(c=t.comparator_conversion_factor)?c:1:1/(null!=(d=t.comparator_conversion_factor)?d:1));return e-m<a?g(e-a,4):m;case y.MAX_CAP:if(null===t.comparator||void 0===t.comparator)throw new Error("Maximum cap not found");const o=t.comparator*(t.comparator_conversion_by_multiplication?null!=(u=t.comparator_conversion_factor)?u:1:1/(null!=(f=t.comparator_conversion_factor)?f:1));return g(m>o?o:m,4);case y.BRACKET:return g(m,4);default:throw new Error(`bracket type ${t.bracket_type} is not supported`)}}async function E(e,t,a,o){var n,i,r,l,s,c,d,u;if(console.log("[evaluatePayableAssay]"),!a||0===a.length)return{};const f=w(a,e);if(!f)throw new Error(`Unable to find the range for analytical assay value of ${e}, please ensure the payable assay rates for the commodity ${o} are defined in the contract cover all range of possible values`);let m,v,_=1,g=!0;if(f.initial_adjustment_uom&&void 0!==f.initial_adjustment_uom&&null!==f.initial_adjustment_uom&&f.initial_adjustment_uom!==t){const e=await B(f.initial_adjustment_uom,t);_=e.value,m=k(f.initial_adjustment_uom,t,e.isConvertByMultiplication),g=e.isConvertByMultiplication}let $,E=1,b=!0;if(f.bracket_type===y.MAX_CAP){if(v=null!=(n=f.maximum_cap)?n:0,void 0!==f.maximum_cap_uom&&null!==f.maximum_cap_uom&&f.maximum_cap_uom!==t){const e=await B(f.maximum_cap_uom,t);E=e.value,$=k(f.maximum_cap_uom,t,e.isConvertByMultiplication),b=e.isConvertByMultiplication}}else if(f.bracket_type===y.MIN_DEDUCTION&&(v=null!=(i=f.minimum_deduction)?i:0,void 0!==f.minimum_deduction_uom&&null!==f.minimum_deduction_uom&&f.minimum_deduction_uom!==t)){const e=await B(f.minimum_deduction_uom,t);E=e.value,$=k(f.minimum_deduction_uom,t,e.isConvertByMultiplication),b=e.isConvertByMultiplication}const C={bracket_type:f.bracket_type,rate:null!=(r=f.rate)?r:1,rate_type:null!=(l=f.rate_type)?l:h.FRACTIONAL,initial_adjustment:null!=(s=f.initial_adjustment)?s:0,initial_adjustment_conversion_factor:_,initial_adjustment_conversion_by_multiplication:g,comparator:v,comparator_conversion_factor:E,comparator_conversion_by_multiplication:b};console.log(`[evaluatePayableAssay] bracketForEvaluation: ${JSON.stringify(C)}`);const P=D(e,C);let S="";const A=void 0!==f.initial_adjustment&&null!==f.initial_adjustment;if(f.bracket_type===y.BRACKET)S=`${A?"(":""}${p(e,4)}${null!=t?t:""}${A?` - ${p(f.initial_adjustment,4)}${null!=(c=f.initial_adjustment_uom)?c:`${null!=t?t:""}`}`:""}${A&&1!==_?` ${g?"*":"/"} ${p(_,4)}${m}`:""}${A?")":""} * ${p(f.rate,4)}${f.rate_type===h.PERCENTAGE?"/100":`/${p(1,4)}`}`;else if(f.bracket_type===y.MIN_DEDUCTION){S=P===e-v*E?`${p(e,4)}${null!=t?t:""} - ${p(v,4)}${null!=t?t:""}${1!==E?` ${b?"*":"/"} ${p(E,4)}${$}`:""}`:`${A?"(":""}${p(e,4)}${null!=t?t:""}${A?` - ${p(f.initial_adjustment,4)}${null!=(d=f.initial_adjustment_uom)?d:`${null!=t?t:""}`}`:""}${A&&1!==_?` ${g?"*":"/"} ${p(_,4)}${m}`:""}${A?")":""} * ${p(f.rate,4)}${f.rate_type===h.PERCENTAGE?"/100":`/${p(1,4)}`}`}else{if(f.bracket_type!==y.MAX_CAP)throw new Error(`[buildPayableAssayExpression] unknown bracket method: ${f.bracket_type}`);S=P===v*E?`${p(v,4)}${null!=t?t:""}${1!==E?` ${b?"*":"/"} ${p(E,4)}${$}`:""}`:`${A?"(":""}${p(e,4)}${null!=t?t:""}${A?` - ${p(f.initial_adjustment,4)}${null!=(u=f.initial_adjustment_uom)?u:`${null!=t?t:""}`}`:""}${A&&1!==_?` ${g?"*":"/"} ${p(_,4)}${m}`:""}${A?")":""} * ${p(f.rate,4)}${f.rate_type===h.PERCENTAGE?"/100":`/${p(1,4)}`}`}return{payableAssay:P,expression:S}}console.log("[main] formValues=",c);const b="above the lower threshold, plus",C="below the upper threshold, minus";function P(e,t,a,o,n){var i,r,l,s,c,d,u;if(console.log("[evaluateCharge]"),!a||!a.length)return;const f=w(a,e);if(!f)throw new Error(`Unable to find the range for the price rate value of ${e}, please ensure the ${n} rates for commodity ${o} are defined in the contract cover all range of possible values`);let m=0,p=1;if(f.use_btc)p=0,m=0;else{const e=null!=(i=f.escalator_reference)?i:1;if(p=(null!=(r=f.rate)?r:1)/e,f.for_every_unit===b)m=null!=(l=f.lower_threshold)?l:0;else{if(f.for_every_unit!==C)throw new Error(`[evaluateCharge] unknown for_every_unit: ${f.for_every_unit}`);m=null!=(s=f.upper_threshold)?s:0}}const v={bracket_type:y.BRACKET,rate:p,rate_type:h.FRACTIONAL,initial_adjustment:m,final_adjustment:(null!=(c=f.base_treatment_charge)?c:0)+(null!=(d=f.base_charge_adjustment)?d:0)};return console.log(`[evaluateCharge] bracketForEvaluation: ${JSON.stringify(v)}`),{finalValue:D(e,v),baseTreatmentCharge:f.base_treatment_charge+(null!=(u=f.base_charge_adjustment)?u:0)}}function S(e,t,a,o,n){var i,r,l,s;if(console.log("[evaluatePenalty]"),!t||!t.length)return{};const c=w(t,e);if(!c)throw new Error(`Unable to find the range for the analytical assay value of ${e}, please ensure the penalty rates for commodity ${n} are defined in the contract cover all range of possible values`);let d=0,u=1;if(c.no_penalty)u=0,d=0;else{const e=null!=(i=c.escalator_reference)?i:1;if(u=(null!=(r=c.rate)?r:1)/e,c.for_every_unit===b)d=null!=(l=c.lower_threshold)?l:0;else{if(c.for_every_unit!==C)throw new Error(`[evaluatePenalty] unknown for_every_unit: ${c.for_every_unit}`);d=null!=(s=c.upper_threshold)?s:0}}const f={bracket_type:y.BRACKET,rate:u,rate_type:h.FRACTIONAL,initial_adjustment:d,final_adjustment:0};console.log(`[evaluatePenalty] bracketForEvaluation: ${JSON.stringify(f)}`);const m=D(e,f),v=null!=f.initial_adjustment;let _="";return _=c.rate&&0!==c.rate?`${v?"(":""}${p(e,4)}${v?` - ${p(d,4)})`:""} / ${p(1,4)} * ${null!=a?a:""} ${p(u,4)}/${null!=o?o:""}`:"No penalty",{penalty:m,expression:_,bracket:c}}function A(e){const t=e.getDate(),a=e.getMonth(),o=e.getFullYear();return`${t} ${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][a]} ${o}`}function N(e,t=!0){const a=e.getMonth()+1,o=e.getDate();return`${e.getFullYear()}${t?"-":" "}${a<10?"0":""}${a}${t?"-":" "}${o<10?"0":""}${o}`}function M(e){return 0===e.getDay()||6===e.getDay()}function O(e,t,a=!1){const o=new Date(e.valueOf());let n=t-(a?1:0),i=!0;for(;M(o);)o.setDate(o.getDate()+1),i&&(n-=1,i=!1);for(;n>0;)o.setDate(o.getDate()+1),M(o)||(n-=1);for(o.getHours()>=12&&o.setDate(o.getDate()+1);M(o);)o.setDate(o.getDate()+1);return o}function T(e,t){const a=new Date(e.valueOf());return a.setMonth(a.getMonth()+t,1),a}function I(e,t){const a=new Date(e.valueOf());return a.setMonth(a.getMonth()+t+1,0),a}async function U(e,t){var a,o;if(e===t)return{value:1,isConvertByMultiplication:!0};const n=await s.get(`/items/${Pt}?filter[${St}]=${e}`,{params:{fields:[Tt]}});if(0===n.data.data.length||null===n.data.data[0][Tt]||void 0===n.data.data[0][Tt])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for source weight unit ${e}. Ensure that the symbol is correct and is a weight unit symbol`);const i=await s.get(`/items/${Pt}?filter[${St}]=${t}`,{params:{fields:[Tt]}});if(0===i.data.data.length||null===i.data.data[0][Tt]||void 0===i.data.data[0][Tt])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for the target weight unit ${t}. Ensure that the symbol is correct and is a weight unit symbol`);const r=parseFloat(n.data.data[0][Tt]);if(isNaN(r))throw new Error(`[getWeightUnitConversionValue] source weight unit ${e} conversion value=${r} is not a number`);const l=parseFloat(i.data.data[0][Tt]);if(isNaN(l))throw new Error(`[getWeightUnitConversionValue] target weight unit ${t} conversion value=${l} is not a number`);return r<l?{value:null!=(a=g(l/r,4))?a:1,isConvertByMultiplication:!1}:{value:null!=(o=g(r/l,4))?o:1,isConvertByMultiplication:!0}}async function B(e,t){var a,o;if(null==e||null==t)return{value:1,isConvertByMultiplication:!0};if(e===t)return{value:1,isConvertByMultiplication:!0};const n=await s.get(`/items/${It}?filter[${Ut}]=${e}`,{params:{fields:[Bt]}});if(0===n.data.data.length||void 0===n.data.data[0][Bt]||null===n.data.data[0][Bt])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for source weight unit ${e}. Ensure that the symbol is correct and is a weight unit symbol`);const i=await s.get(`/items/${It}?filter[${Ut}]=${t}`,{params:{fields:[Bt]}});if(0===i.data.data.length||void 0===i.data.data[0][Bt]||null===i.data.data[0][Bt])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for the target weight unit ${t}. Ensure that the symbol is correct and is a weight unit symbol`);const r=parseFloat(n.data.data[0][Bt]);if(isNaN(r))throw new Error(`[getAssayUnitConversionValue] source weight unit ${e} conversion value=${r} is not a number`);console.log(`[getAssayUnitConversionValue] source unit conversion value=${r}`);const l=parseFloat(i.data.data[0][Bt]);if(isNaN(l))throw new Error(`[getAssayUnitConversionValue] target weight unit ${e} conversion value=${l} is not a number`);return console.log(`[getAssayUnitConversionValue] target unit conversion value=${l}`),console.log("[getAssayUnitConversionValue] returning "+r/l),r<l?{value:null!=(a=g(l/r,4))?a:1,isConvertByMultiplication:!1}:{value:null!=(o=g(r/l,4))?o:1,isConvertByMultiplication:!0}}function k(e,t,a){if(void 0===e||void 0===t||null===e||null===t)return;const o=e.split("/"),n=t.split("/");if(o.length>2||n.length>2)throw new Error(`[getConversionUnit] sourceUnit=${e} and targetUnit=${t} must be in the format of 'unit1/unit2', an extra '/' was found`);if(1===o.length&&1===n.length)return a?`${n[0]}/${o[0]}`:`${o[0]}/${n[0]}`;if(1===o.length){const e=n[0]===o[0]?"":`${n[1]}(${o[1]})`,t=n[1];return""===t?a?e:`/${e}`:a?`${e}/${t}`:`${t}/${e}`}if(1===n.length){const e=o[1],t=o[0]===n[0]?"":`${o[1]}(${n[0]})`;return""===t?a?e:`/${e}`:a?`${e}/${t}`:`${t}/${e}`}{const e=o[0]===n[0],t=o[1]===n[1],i=e||""===o[0],r=e||""===n[0],l=t||""===o[1],s=t||""===n[1],c=!l&&!r,d=!i&&!s,u=`${l?"":o[1]}${c?"(":""}${r?"":`${n[0]}`}${c?")":""}`,f=`${i?"":o[0]}${d?"(":""}${s?"":`${n[1]}`}${d?")":""}`;return""===f?a?u:`/${u}`:a?`${u}/${f}`:`${f}/${u}`}}async function j(e,t,a){const o=await s.get(`/items/${Pt}?filter[${At}]=${t}`,{params:{fields:[St]}});if(!o.data.data||!o.data.data[0]||!o.data.data[0][St])throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] Dry weight uom not found for symbol ${t}`);const n=o.data.data[0][St];if("%"===a){if(n===e)return{};const t=await U(n,e),a=k(n,e,t.isConvertByMultiplication);if(!a)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] no conversion unit found for dry weight unit ${n} and target weight unit ${e}`);return{finalConversion:{conversionFactor:t.value,conversionUom:a,isConvertByMultiplication:t.isConvertByMultiplication}}}let i=a.split("/");if(1==i.length){const e=await async function(e){const t=await s.get(`/items/${It}`,{params:{fields:[Ut,kt],filter:{[kt]:{_nnull:!0},[Ut]:{_eq:e}}}});if(200!==t.status||!t.data||0===t.data.data.length)throw new Error("[getAssayUnitComposition] no assay units found with composition");return t.data.data[0][kt]}(a);if(!e)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${a} does not have a composition`);i=e.split("/")}if(i.length>2||0===i.length)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${a} is not in the format of 'unit1/unit2'`);const r=i[0],l=i[1],c={};if(l!==n){const e=await U(n,l),t=k(n,l,e.isConvertByMultiplication);if(!t)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] no conversion unit found for dry weight unit ${n} and assay unit denominator unit ${l}`);c.initialConversion={conversionFactor:e.value,conversionUom:t,isConvertByMultiplication:e.isConvertByMultiplication}}if(r!==e){const t=await U(r,e),a=k(r,e,t.isConvertByMultiplication);if(!a)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] no conversion unit found for target weight unit ${e} and assay unit numerator unit ${r}`);c.finalConversion={conversionFactor:t.value,conversionUom:a,isConvertByMultiplication:t.isConvertByMultiplication}}return c}const F="id",V="foreign_key",R="lot_number",x="method",J="navarch_cashflow",q="navarch_parcel",W="contract",L="counterparty",G="assay_results",H="weight_result",Q="actual_arrival_date",K="estimate_arrival_date",Y="bl_date",X="invoice_due_date",z="estimated_shipment_date",Z="qp_selection",ee="vessel",te="origin",ae="destination",oe="shipment_code",ne="adjustments",ie="parcel_finalisation_date",re="navarch_assay_lot",le="commodity",se="dry_weight",ce="dry_weight_uom",de="buyer_assay",ue="seller_assay",fe="final_assay",me="assay_uom",pe="lot_number",ye="navarch_weight_lot",he="dry_weight",ve="wet_weight",_e="moisture",ge="wet_weight_uom",$e="dry_weight_uom",we="navarch_contract",De="contract_currency",Ee="name",be="navarch_contract_payment_information",Ce="related_contract",Pe="invoice_type",Se="pay_percent",Ae="pa_days",Ne="pa_day_type",Me="pa_ref_day",Oe="pp_days",Te="pp_day_type",Ie="pp_ref_day",Ue="navarch_commodity_in_contract",Be="contract",ke="commodity",je="primary_commodity",Fe="payable_commodity",Ve="price_method",Re="price_fix_to_use",xe="price_per_uom",Je="treatment_charge_per_uom",qe="refining_charge_rate_uom",We="quotational_periods",Le="payable_assay_rates",Ge="penalty_rates",He="penalty_per_uom",Qe="navarch_payable_assay_bracket",Ke="initial_adjustment",Ye="initial_adjustment_uom",Xe="minimum_deduction",ze="minimum_deduction_uom",Ze="maximum_cap",et="maximum_cap_uom",tt="related_commodity_in_contract",at="bracket_type",ot="lower_threshold",nt="lower_threshold_inclusive",it="upper_threshold",rt="upper_threshold_inclusive",lt="rate",st="rate_type",ct="navarch_treatment_charge_bracket",dt="base_treatment_charge",ut="base_charge_adjustment",ft="use_btc",mt="escalator_reference",pt="for_every_unit",yt="related_contract_commodity_tc",ht="related_contract_commodity_rc",vt="navarch_penalty_bracket",_t="no_penalty",gt="escalator_reference",$t="for_every_unit",wt="navarch_commodity",Dt="name",Et="code",bt="navarch_currency",Ct="code",Pt="navarch_unit",St="symbol",At="dry_symbol",Nt="wet_symbol",Mt="dry_unit",Ot="wet_unit",Tt="conversionToGram",It="navarch_assay_unit",Ut="unit",Bt="conversion_to_ppb",kt="composition",jt="navarch_counterparty",Ft="codename",Vt="name",Rt="navarch_vessel",xt="name",Jt="price_am",qt="price_pm",Wt="average_price",Lt="date",Gt="navarch_invoices",Ht="parcel",Qt="invoice",Kt="invoice_date",Yt="amount_paid",Xt="invoice_type",zt="end_date",Zt="start_date",ea="navarch_forecast_price",ta="commodity",aa="price",oa="start_date",na="end_date",ia={Advance:0,"Second Advance":1,"Third Advance":2,"Fourth Advance":3,Provisional:4,"Second Provisional":5,"Third Provisional":6,"Fourth Provisional":7,Final:8};function ra(e){const t=[...new Set(e.flatMap((e=>Object.keys(e))))],a=e.map((e=>t.map((t=>{const a=e[t]||"";return"string"==typeof a&&a.includes(",")?`"${a}"`:a})).join(",")));return[t.join(","),...a].join("\n")}function la(e){const t=new Blob([e],{type:"text/csv"}),a=URL.createObjectURL(t),o=document.createElement("a");o.href=a,o.download=`Cashflow-[${function(){const e=new Date,t=60*e.getTimezoneOffset()*1e3,a=e.getTime()-t,o=new Date(a),n=o.toISOString().slice(0,19),i=e.getTimezoneOffset()/60*-1;return`${n}GMT${i>0?"+":""}${i}`.replace(/:/g,"")}()}]-Valuation_Period-(${N(new Date(c.value.start_date),!1)}~${N(new Date(c.value.end_date),!1)}).csv`,document.body.appendChild(o),o.click(),document.body.removeChild(o)}class sa extends Error{constructor(e){super(e),this.name="NonFatalError",Object.setPrototypeOf(this,sa.prototype)}}return{isGeneraingDoc:r,invoiceUrl:c.value,generateCashflow:async function(){i.value="";try{r.value=!0;const e=await async function(){const e=new Date(c.value[Zt]);if("Invalid Date"===e.toString())throw i.value="Start date is invalid",new Error("Start date is invalid");const t=new Date(c.value[zt]);if("Invalid Date"===t.toString())throw i.value="End date is invalid",new Error("End date is invalid");const a=await s.get(`/items/${we}`,{params:{fields:[Ee,F,"invoice_type"]}}),o={};await Promise.all(a.data.data.map((async a=>{var n,i,r,l,c;const d=await s.get(`/items/${be}`,{params:{filter:{[Ce]:{_eq:a[F]}},fields:[Pe,Ae,Ne,Me]}}),u=await s.get(`/items/${q}`,{params:{filter:{[W]:{_eq:a[F]}},fields:[F,oe,Q,K,Y,z,ie,X]}}),f=d.data.data.map((e=>e[Pe])).sort(((e,t)=>ia[e]-ia[t]));for(const f of d.data.data){const d={days:f[Ae],day_type:f[Ne],ref_day:"Final"===f[Xt]?"QP Month + n days":f[Me]};if(!d)throw new Error(`Contract ${a[Ee]} does not have a payment advice for invoice type ${f[Xt]}`);let p,y="";for(const h of u.data.data){switch(d.ref_day){case"Arrival Date":y="Actual Arrival Date from the Parcel form",p=null!=(n=h[Q])?n:h[K];break;case"B/L Date":y="B/L Date (or Estimated Shipment Date) from the Parcel form",p=null!=(i=h[Y])?i:h[z];break;case"Invoice Date":y="Invoice Date (using the B/L Date or Estimated Shipment Date from the Parcel form)",p=null!=(r=h[Y])?r:h[z];break;case"Estimated Shipment Date":y="Estimated Shipment Date from the Parcel form",p=h[z];break;case"QP Month + n days":const e=await s.get(`items/${Ue}`,{params:{filter:{[Be]:{_eq:a[F]},[Fe]:{_eq:!0}},fields:[We]}});if(!Array.isArray(e.data.data)||0===e.data.data.length)throw new Error(`Contract ${a[Ee]} does not have any payable commodities`);const t=e.data.data.map((e=>e[We].find((e=>!!e.default)))),o=t.reduce(((e,t)=>t.qp_period>e.qp_period?t:e),t[0]);let u;switch(o.qp_code){case"MAMA":y="Actual Arrival Date (or Estimated Arrival Date) from the Parcel form",u=null!=(l=h[Q])?l:h[K];break;case"MOSS":case"MOS":case"MOAS":y="B/L Date (or Estimated Shipment Date) from the Parcel form",u=null!=(c=h[Y])?c:h[z];break;default:throw new Error(`Unsupported QP code ${o.qp_code}, currently only supports MAMA, MOS, MOSS, and MOAS`)}if(m(u))throw new Error(`Invalid reference date, please ensure the ${y} field(s) in parcel ${h[oe]} are filled in`);p=I(new Date(u),o.qp_period).toISOString();break;default:throw new Error(`Invalid reference day for payment advice: ${d.ref_day}; please contact Navarch for support`)}if(null==p)throw new Error(`Reference day for payment advice ${y} is empty in parcel ${h[oe]}`);const u=new Date(p),v=parseInt(d.days);let _;switch(d.day_type){case"Business Day(s)":_=O(u,v);break;case"Calendar Day(s)":_=new Date(u.valueOf()),_.getHours()>=12?_.setDate(_.getDate()+v+1):_.setDate(_.getDate()+v);break;default:throw new Error(`Please provide a valid Day Type (Cashflow) for ${a[Ee]}:Final Invoice Type`)}if(_>=e&&_<=t&&(o[h[F]]||(o[h[F]]=[]),o[h[F]].push({invoiceType:f[Pe],dueDate:_,parcelId:h[F],contractName:a[Ee]})),h[X]){const n=h[X][f[Pe]];if(n&&n.due_date){const i=n.inv_type,r=new Date(n.due_date);if("Invalid Date"===r.toString())throw new Error(`Invoice Due Date field in the parcel ${h[oe]} has an invalid due date for invoice type ${i}`);if(r>=e&&r<=t){o[h[F]]||(o[h[F]]=[]);const e={invoiceType:i,dueDate:r,parcelId:h[F],contractName:a[Ee]},t=o[h[F]].findIndex((e=>e.invoiceType===i));-1!==t?o[h[F]][t]=e:o[h[F]].push(e)}else if(o[h[F]]){const e=o[h[F]].findIndex((e=>e.invoiceType===i));-1!==e&&o[h[F]].splice(e,1)}}}}}Object.values(o).forEach((e=>{var t;if(0===e.length)return;const a=e.reduce(((e,t)=>e&&ia[t.invoiceType]<ia[e.invoiceType]?t:e),e[0]);if(!a)throw new Error(`Could not find the earliest invoice type for parcel with ID: ${null==(t=e[0])?void 0:t.parcelId}`);const n=f.findIndex((e=>e===a.invoiceType));if(-1===n)throw new Error(`Could not find the earliest invoice type in the list of possible invoice types for parcel with ID: ${a.parcelId}`);if(n>0){if(!o[a.parcelId])throw new Error(`Could not find the list of invoice types for parcel with ID: ${a.parcelId}`);o[a.parcelId].push({invoiceType:f[n-1],dueDate:new Date("0000"),parcelId:a.parcelId,contractName:a.contractName})}}))})));const n=Object.keys(o);let r;for(let e=0;e<n.length;e+=15){const t=n.slice(e,e+15),a=await s.get(`/items/${q}`,{params:{filter:{[F]:{_in:t}},fields:[F,W,L,G,H,Q,K,Y,z,Z,ee,te,ae,oe,ne,"parcel_finalised",ie,G]}});r?r.data.data=r.data.data.concat(a.data.data):r=a}if(!r.data.data||r.data.data.length!==n.length)throw new Error("Experiencing some network issues, please try again. If the issue persists, contact Navarch for support");const l={parcelData:r.data.data.reduce(((e,t)=>(e[t[F]]=t,e)),{}),contractNameByParcelId:n.reduce(((e,t)=>(e[t]=o[t][0].contractName,e)),{}),invoiceTypeParcel:n.flatMap((e=>o[e])),parcelIds:n};return console.log(`[getApplicableParcels] returnObject=${JSON.stringify(l)}`),l}(),t=await async function(e){const t=[];let a;for(let t=0;t<e.parcelIds.length;t+=15){const o=e.parcelIds.slice(t,t+15),n=await s.get(`/items/${Gt}`,{params:{filter:{[Ht]:{_in:o},[Qt]:{_nnull:!0}},fields:[Ht,Xt,Qt,Kt,Yt]}});a?a.data.data=a.data.data.concat(n.data.data):a=n}a.data.data.sort(((e,t)=>{const a=ia[e[Xt]]-ia[t[Xt]];return 0===a?new Date(t[Kt]).valueOf()-new Date(e[Kt]).valueOf():a}));for(const o of e.invoiceTypeParcel){const n=a.data.data.find((e=>e[Ht]===o.parcelId&&e[Xt]===o.invoiceType));n?t.push({parcelId:o.parcelId,invoiceType:o.invoiceType,contractName:e.contractNameByParcelId[o.parcelId],dueDate:o.dueDate,invoiceData:{...n[Qt],amount_paid:n[Yt]}}):t.push({parcelId:o.parcelId,invoiceType:o.invoiceType,contractName:e.contractNameByParcelId[o.parcelId],dueDate:o.dueDate,parcelData:e.parcelData[o.parcelId]})}return console.log(`[generateInvoiceParamForParcel] invoiceParams=${JSON.stringify(t)}`),t}(e);console.log(`[generateCashflow] form values=${JSON.stringify(c.value)}`);const o=await Promise.all(t.map((async e=>(console.log(`[generateCashflow] invoiceParam=${JSON.stringify(e)}`),await async function(e){var t,a,o,n,l,c,u,f,m,y,h,v,_,w,D,b,C,N,M,O,T,I,U,B,k,J,X,Z,ie,Ee,Tt,It,Ut,Bt,kt,Jt,qt,Wt;i.value="",r.value=!0;try{if(e.invoiceData){console.log(`[generateInvoice][invoice=${JSON.stringify(e.invoiceData.invoice_number)}::parcel=${e.invoiceData.parcel}] using existing invoice=${JSON.stringify(e.invoiceData)}`);const t=e.invoiceData,a=await s.get(`/items/${jt}`,{params:{filter:{[Vt]:{_eq:t.buyer}},fields:[Ft]}});ga(a.data.data[0]);const o=await s.get(`/items/${q}`,{params:{filter:{[F]:{_eq:e.parcelId}},fields:[Y,Q,K]}});console.log(`[generateInvoice][invoice=${JSON.stringify(e.invoiceData.invoice_number)}::parcel=${e.invoiceData.parcel}] parcel date data=${JSON.stringify(o.data.data)}`);const n=o.data.data[0];return{Parcel:t.parcel,Counterparty:a.data.data[0][Ft],Vessel:"N/A"===t.vessel?"Vessel TBA":t.vessel,"Shipment Date":t.bl_date,"Arrival Date":n[Q]?A(new Date(n[Q])):n[K]?A(new Date(n[K])):"N/A",Status:o[Y]?"Unfinalised":"Planned",Revision:"Original",Invoice:`${t.invoice_type}:Original`,"Invoice Due Date":A(e.dueDate),"Dry Weight":`${p(t.dry_weight,2)}`,...await fa(t.commodities,{dryWeight:t.dry_weight,dryWeightUom:t.dry_weight_uom}),"Total Revenues USD":p(t.total_revenue),"Total Penalties USD":p(t.total_deductions),"Total Adjustments USD":t.adjustments?p(t.adjustments.total_adjustments):"0.00","Parcel Value USD":p(t.invoice_value),"Parcel Payable Value USD":p(t.payable_amount),"Payments USD":t.amount_paid,"Due Total":p(t.balance_in_sellers_favor),metadata:{invoiceTypeRanking:ia[t.invoice_type]}}}if(void 0===e.parcelData)throw new sa(`Something went wrong, no parcel or invoice data for Invoice of parcel id ${e.parcelId.substring(0,5)} and invoice type ${e.invoiceType}`);const r=e.parcelId;if(!r)return void console.error(`[generateInvoice] A parcel id is not defined for invoice type ${e.invoiceType}`);const Lt=e.invoiceType,Kt=e.parcelData,Yt=e.contractName;console.log(`[generateInvoice][parcel=${Kt[oe]}::invoice type=${Lt}] parcel data=${JSON.stringify(Kt)}`),function(e){if(!e)throw new Error("Parcel data not found, please ensure the selected parcel still exists");if(!e[oe])throw new Error("One of the parcels does not have a shipment code, please ensure that all parcels have a shipment code");if(!e[W])throw new Error(`The parcel ${e[oe]} does not have a contract, please ensure that the contract field for the parcel is not empty`);if(!e[L])throw new Error(`The parcel ${e[oe]} does not havea counterparty, please ensure that the counterparty field for the parcel is not empty`);if(!e[G])throw new sa(`The parcel ${e[oe]} does not have assay results`);if(!e[H])throw new sa(`The parcel ${e[oe]} does not have weight results`);if(!e[te])throw new Error(`The parcel ${e[oe]} does not havean origin port`);if(!e[ae])throw new Error(`The parcel ${e[oe]} does not havea destination port`)}(Kt);const Xt=Kt[G],zt=Kt[H],Zt=Kt[W];if(!Zt)throw new Error(`Contract not found for parcel ${Kt[oe]}`);const ea=await s.get(`/items/${be}`,{params:{filter:{[Ce]:{_eq:Zt},[Pe]:{_eq:Lt}},fields:[Pe,Se,Ae,Ne,Me,Oe,Te,Ie]}});if(ea.data.data&&0===ea.data.data.length)throw new Error(`No invoice type found for the contract ${Yt}`);const ta=ea.data.data.find((e=>e[Pe]===Lt));if(!ta)throw new Error(`Cannot find payment information for ${Lt} in the contract ${Yt}, please ensure that data for it has been entered and saved`);const aa=await s.get(`/items/${ye}?filter[${V}]=${zt}&sort[]=${R}`,{params:{fields:[F,he,ve,x,_e,ge,$e]}});console.log(`[generateInvoice][parcel=${Kt[oe]}::invoice type=${Lt}] weight lots data=${JSON.stringify(aa.data.data)}`),function(e){if(!e||0===e.length)throw new sa("No weight lots found for the selected parcel")}(aa.data.data);const oa=function(e){console.log("[evaluateWeights]");const t={};for(const a of e)t[a.method]||(console.log(`adding method ${a.method} to weightData object`),t[a.method]=[]),console.log(`adding lot ${a.id} to weightData.${a.method} array`),t[a.method.toString()].push(a);const a=[];for(const e of Object.keys(t)){if(!t[e]){console.log(`method=${e} does not exist in weightData object`);continue}console.log(`adding lots and other values to weights for method=${e}`);const o=d(t[e]);o&&a.push(o)}return a}(aa.data.data);let na;if(na||(na=oa.find((e=>"Outturn"===e.method))),na||(na=oa.find((e=>"Inturn Final"===e.method))),na||(na=oa.find((e=>"Inturn"===e.method))),na||(na=oa.find((e=>"Estimated"===e.method))),na||(na=oa.find((e=>"Planned"===e.method))),!na)throw new Error(`No weight lots with valid method found for parcel ${Kt[oe]}`);if(void 0===na.dry_weight||null===na.dry_weight||void 0===na.wet_weight||null===na.wet_weight||void 0===na.moisture||null===na.moisture||void 0===na.dry_weight_uom||null===na.dry_weight_uom||void 0===na.wet_weight_uom||null===na.wet_weight_uom||void 0===na.method||null===na.method)throw new Error(`One of the fields for the latest weight lots data is undefined for parcel ${Kt[oe]}`);const ra=await s.get(`/items/${Pt}?filter[${At}]=${na.dry_weight_uom}`,{params:{fields:[Mt]}}),la=await s.get(`/items/${Pt}?filter[${Nt}]=${na.wet_weight_uom}`,{params:{fields:[Ot]}});if(!ra.data.data||!ra.data.data[0]||!ra.data.data[0][Mt])throw new Error(`Dry weight uom not found for symbol ${na.dry_weight_uom} for parcel ${Kt[oe]}`);if(!la.data.data||!la.data.data[0]||!la.data.data[0][Ot])throw new Error(`Wet weight uom not found for symbol ${na.wet_weight_uom} for parcel ${Kt[oe]}`);const ca=await s.get(`/items/${re}?filter[${V}]=${Xt}&sort[]=${R}`,{params:{fields:[F,le,x,se,ce,de,ue,fe,pe,me]}});console.log(`[generateInvoice][parcel=${Kt[oe]}::invoice type=${Lt}] assay lots data=${JSON.stringify(ca.data.data)}`),function(e){if(!e||0===e.length)throw new sa("No assay lots found for the selected parcel")}(ca.data.data);const ma=function(e){var t;console.log("[evaluateAnalyticalAssay]");const a={};for(const t of e)a[t.method]||(a[t.method]={}),a[t.method][t.commodity]||(a[t.method][t.commodity]=[]),null!==t.lot_number?(1===a[t.method][t.commodity].length&&null===a[t.method][t.commodity][0].lot_number&&(a[t.method][t.commodity]=[]),a[t.method][t.commodity].push(t)):null===t.lot_number&&0===a[t.method][t.commodity].length&&a[t.method][t.commodity].push(t);console.log(`[evaluateAnalyticalAssay] group: ${JSON.stringify(a)}}`);const o={};for(const e in a){console.log(`[evaluateAnalyticalAssay] methodKey: ${e}, group[methodKey]: ${JSON.stringify(a[e])}`);for(const n in a[e]){console.log(`[evaluateAnalyticalAssay] commodityKey: ${n}, group[methodKey][commodityKey]: ${JSON.stringify(a[e][n])}`),o[e]=null!=(t=o[e])?t:{},o[e][n]={};const r=a[e][n].reduce(((e,t)=>e+parseFloat(t.dry_weight)),0);if(console.log(`[evaluateAnalyticalAssay] totalDryWeight: ${r} from ${JSON.stringify(a[e][n])}`),0===r||isNaN(r))throw i.value=`Please provide dry weight for ${n} commodity in ${e} method, total dry weight cannot be ${r}`,new Error("[evaluateAnalyticalAssay] totalDryWeight is 0");console.log(`[evaluateAnalyticalAssay] totalDryWeight: ${r}`),o[e][n].analytical_assay=a[e][n].reduce(((t,a)=>{var o,r,l;const s=parseFloat(null!=(r=a.final_assay)?r:null!=(o=a.seller_assay)?o:a.buyer_assay);if(null==s)throw i.value=`Please provide Final, Seller or Buyer assay value for ${n} commodity in ${e} method`,new Error("[evaluateAnalyticalAssay] assay value is not defined for assay lot");const c=t+s*parseFloat(null!=(l=a.dry_weight)?l:"0");return console.log(`[evaluateAnalyticalAssay] evaluated analytical assay: ${c} for method=${e}, commodity=${n}; with values accumulator=${t}, assayValue=${s}, dryWeight=${a.dry_weight}`),c}),0)/r,console.log(`[evaluateAnalyticalAssay] analytical assay: ${o[e][n].analytical_assay}`),a[e][n].length>0&&(o[e][n][me]=a[e][n][0][me])}}return console.log(`[evaluateAnalyticalAssay] analyticalAssay: ${JSON.stringify(o)}`),o}(ca.data.data);let $a;if($a||($a=ma.Outturn),$a||($a=ma["Inturn Final"]),$a||($a=ma.Inturn),$a||($a=ma.Estimated),$a||($a=ma.Planned),!$a)throw new Error(`No assay lot data with a valid method found for parcel ${Kt[oe]}`);console.log(`[generateInvoice][parcel=${Kt[oe]}::invoice type=${Lt}] weight lots for invoice evaluation=${JSON.stringify(na)}`),console.log(`[generateInvoice][parcel=${Kt[oe]}::invoice type=${Lt}] assay lots for invoice evaluation=${JSON.stringify($a)}`);const wa=await s.get(`/items/${we}/${Zt}`,{params:{fields:[De]}});!function(e){if(!e)throw new Error("Contract data not found, please ensure the selected contract still exists");if(!e[De])throw new Error("The selected contract does not have a set currency, please ensure that the currency field for the contract is not empty")}(wa.data.data);const Da=await s.get(`/items/${bt}/${wa.data.data.contract_currency}`,{params:{fields:[Ct]}});!function(e){if(!e)throw new Error("Currency data not found, please ensure the selected currency still exists");if(!e[Ct])throw new Error("The selected currency in the contract is not valid")}(Da.data.data);const Ea=Da.data.data.code,ba=await s.get(`/items/${Ue}?filter[${Be}]=${Zt}`,{params:{fields:["id",ke,je,Fe,Ve,Re,We,Le,Ge,He,xe,Je,qe]}});!function(e){if(!e||0===e.length)throw new Error("No commodity data found in selected contract for parcel");if(!e.every((e=>e[ke])))throw new Error("The selected contract has an undefined commodity, please ensure that the 'Commodity' field for all commodites in the contract is not empty");if(!e.every((e=>!e[Fe]||e[xe])))throw new Error("The selected contract has an undefined base price Uom for commodity, please ensure that the 'Base Price Uom' field for all commodites in the contract is not empty")}(ba.data.data),console.log(`[generateInvoice][parcel=${Kt[oe]}::invoice type=${Lt}] contract commodity data=${JSON.stringify(ba.data.data)}`);const Ca=[],Pa=[];let Sa="";for(const{id:e,commodity:i,primary_commodity:r,price_method:d,price_fix_to_use:$,quotational_periods:V,price_per_uom:R,penalty_per_uom:x,treatment_charge_per_uom:q,refining_charge_rate_uom:W}of ba.data.data){const L=await s.get(`/items/${wt}/${i}`,{params:{fields:[Dt,Et,F]}});if(ya(L.data.data,i),!$a[L.data.data.code]){console.log(`[generateInvoice][parcel=${Kt[oe]}::invoice type=${Lt}::comm=${L.data.data[Dt]}] no analytical assay for commodity ${L.data.data.code} found, skipping...`);continue}if(r&&(Sa=L.data.data[Dt]),null!==V){const i=V;console.log(`[generateInvoice][parcel=${Kt[oe]}::invoice type=${Lt}::comm=${L.data.data[Dt]}] qp=${JSON.stringify(i)}`);const r=Array.isArray(i)?i.find((e=>e.default)):null;if(!r)throw new Error(`No default quotational period found for commodity ${L.data.data.code}`);const S=i.filter((e=>!e.default)).map((e=>`${e.qp_period} ${e.qp_code}`)),x=[`${r.qp_period} ${r.qp_code}`,...S].join(", ");console.log(`[generateInvoice][parcel=${Kt[oe]}::invoice type=${Lt}::comm=${L.data.data[Dt]}] evaluate payable assay for ${L.data.data.code} with an analytical assay=${null==(t=$a[L.data.data.code])?void 0:t.analytical_assay}`);const G=await s.get(`/items/${Qe}?filter[${tt}]=${e}`,{params:{fields:[at,ot,nt,it,rt,lt,st,Ke,Ye,Xe,ze,Ze,et]}}),{payableAssay:H,expression:Q}=await E(null==(a=$a[L.data.data.code])?void 0:a.analytical_assay,null==(o=$a[L.data.data.code])?void 0:o.assay_uom,G.data.data,L.data.data[Dt]);let K=null,Y=null,z=null;if("Final"!==Lt){const e=await da(L.data.data.code,L.data.data.name,Kt,d,(async()=>ua(r,Kt,Yt,L.data.data[Dt])));if(null===e)throw new Error(`Pricing dates not found for commodity ${L.data.data.code} for parcel ${Kt[oe]}`);if(null===e.provisionalPricingStartDate||!(e.provisionalPricingStartDate instanceof Date))throw new Error(`Invalid provisional pricing start date for commodity ${L.data.data.code} of invoice type ${Lt} in parcel ${Kt[oe]}`);if(K=e.provisionalPricingStartDate,null===e.provisionalPricingEndDate||!(e.provisionalPricingEndDate instanceof Date))throw new Error(`Invalid provisional pricing end date for commodity ${L.data.data.code} of invoice type ${Lt} in parcel ${Kt[oe]}`);Y=e.provisionalPricingEndDate,z=e.expectedNoOfBusinessDays}else{const e=await da(L.data.data.code,L.data.data.name,Kt,d,(async()=>ua(r,Kt,Yt,L.data.data[Dt])));if(null===e)throw new Error(`Pricing dates not found for commodity ${L.data.data.code} for parcel ${Kt[oe]}`);if(null===e.provisionalPricingStartDate||!(e.provisionalPricingStartDate instanceof Date))throw new Error(`Invalid provisional pricing start date for commodity ${L.data.data.code} of invoice type ${Lt} in parcel ${Kt[oe]}`);if(K=e.provisionalPricingStartDate,null===e.provisionalPricingEndDate||!(e.provisionalPricingEndDate instanceof Date))throw new Error(`Invalid provisional pricing end date for commodity ${L.data.data.code} of invoice type ${Lt} in parcel ${Kt[oe]}`);Y=e.provisionalPricingEndDate}console.log(`[generateInvoice][parcel=${Kt[oe]}::invoice type=${Lt}::comm=${L.data.data[Dt]}] provisional pricing date range: ${K.toString()} - ${Y.toString()}`);const ee=await pa(L.data.data.code,L.data.data[F],d,K,Y,z,$),te=ee.averagePrice;let ae;K=ee.startDate,Y=ee.endDate,console.log(`[generateInvoice] average price within period: ${te} with start date=${K} and end date=${Y}`);const ne=await s.get(`/items/${ct}?filter[${yt}]=${e}`,{params:{fields:[ot,nt,it,rt,dt,ut,ft,mt,pt,lt]}});let re,le;if(void 0!==ne.data.data&&null!==ne.data.data&&ne.data.data.length>0&&(ae=await P(te,null==(n=$a[L.data.data.code])||n.assay_uom,ne.data.data,L.data.data[Dt],"treatment charge")),ae){if(!q)throw new Error(`Treatment Charge Rate UOM is not defined for commodity ${L.data.data[Dt]}`);const e=await s.get(`/items/${Pt}/${q}`,{params:{fields:[St]}});va(e.data.data,L.data.data[Dt]),re=e.data.data[St]}const se=await s.get(`/items/${ct}?filter[${ht}]=${e}`,{params:{fields:[ot,nt,it,rt,dt,ut,ft,mt,pt,lt]}});let ce;if(void 0!==se.data.data&&null!==se.data.data&&se.data.data.length>0&&(le=await P(te,null==(l=$a[L.data.data.code])||l.assay_uom,se.data.data,L.data.data[Dt],"refining charge")),le){if(!W)throw new Error(`Refining Charge Rate UOM is not defined for commodity ${L.data.data[Dt]}`);const e=await s.get(`/items/${Pt}/${W}`,{params:{fields:[St]}});va(e.data.data,L.data.data[Dt]),ce=e.data.data[St]}const de=await s.get(`/items/${Pt}/${R}`,{params:{fields:[St]}});ha(de.data.data,L.data.data[Dt]);const ue=de.data.data[St],fe=await j(ue,na.dry_weight_uom,null==(c=$a[L.data.data.code])?void 0:c.assay_uom);console.log(`[generateInvoice][parcel=${Kt[oe]}::invoice type=${Lt}::comm=${L.data.data[Dt]}] payableMetalConversion for commodity ${L.data.data.name}: ${JSON.stringify(fe)}`),fe.initialConversion=1===(null==(u=fe.initialConversion)?void 0:u.conversionFactor)?void 0:fe.initialConversion,fe.finalConversion=1===(null==(f=fe.finalConversion)?void 0:f.conversionFactor)?void 0:fe.finalConversion;const me=(null==(m=fe.initialConversion)?void 0:m.isConvertByMultiplication)?null!=(h=null==(y=fe.initialConversion)?void 0:y.conversionFactor)?h:1:1/(null!=(_=null==(v=fe.initialConversion)?void 0:v.conversionFactor)?_:1),pe=(null==(w=fe.finalConversion)?void 0:w.isConvertByMultiplication)?null!=(b=null==(D=fe.finalConversion)?void 0:D.conversionFactor)?b:1:1/(null!=(N=null==(C=fe.finalConversion)?void 0:C.conversionFactor)?N:1),ye=null!=(O=g(na.dry_weight*me*(null!=H?H:1)*pe*("%"!==(null==(M=$a[L.data.data.code])?void 0:M.assay_uom)?1:.01),4))?O:1;console.log(`[generateInvoice] PAYABLE_METAL for commodity ${L.data.data.name}: ${ye}`);const he=ye*te;Ca.push({commodity:L.data.data.name,analytical_assay:p(null==(T=$a[L.data.data.code])?void 0:T.analytical_assay,4),deduction_expression:Q,payable_assay:p(H,4),assay_uom:null==(I=$a[L.data.data.code])?void 0:I.assay_uom,payable_metal:p(ye,4),payable_metal_expression:`${p(na.dry_weight,4)}${na.dry_weight_uom}${fe.initialConversion?` ${fe.initialConversion.isConvertByMultiplication?"*":"/"} ${p(fe.initialConversion.conversionFactor,4)}${fe.initialConversion.conversionUom}`:""} * ${p(null!=H?H:1,4)}${"%"!==(null==(U=$a[L.data.data.code])?void 0:U.assay_uom)?`${null==(B=$a[L.data.data.code])?void 0:B.assay_uom}`:" / 100"}${fe.finalConversion?` ${fe.finalConversion.isConvertByMultiplication?"*":"/"} ${p(fe.finalConversion.conversionFactor,4)}${fe.finalConversion.conversionUom}`:""}`,payable_metal_uom:ue,qp:x,qp_start_date:A(K),qp_end_date:A(Y),price_method:d,price_rate:p(te,4),price_per_uom:ue,price:p(he),treatment_charge:ae?{rate:p(ae.baseTreatmentCharge,4),discount:p((null!=(k=ae.baseTreatmentCharge)?k:0)-(null!=(J=ae.finalValue)?J:0),4),final_rate:p(ae.finalValue,4),per_uom:re,final_amount:p(g(na.dry_weight*(null!=(X=ae.finalValue)?X:1)*-1,2,!0))}:void 0,refining_charge:le?{rate:p(le.baseTreatmentCharge,4),discount:p((null!=(Z=le.baseTreatmentCharge)?Z:0)-(null!=(ie=le.finalValue)?ie:0),4),final_rate:p(le.finalValue,4),per_uom:ce,final_amount:p(g(ye*(null!=(Ee=le.finalValue)?Ee:1)*-1,2,!0))}:void 0,final_total:g(he-(ae?1:0)*(null!=(It=g(na.dry_weight*(null!=(Tt=null==ae?void 0:ae.finalValue)?Tt:1),2))?It:1)-(le?1:0)*(null!=(Bt=g(na.dry_weight*(null!=(Ut=null==le?void 0:le.finalValue)?Ut:1),2))?Bt:1))})}const G=await s.get(`/items/${vt}?filter[${tt}]=${e}`,{params:{fields:[ot,nt,it,rt,_t,gt,$t,lt]}});if(G.data.data.length>0){if(null===x)throw new Error(`Please fill in the field for Penalty Per UOM in contract ${Yt} for commodity ${L.data.data[Dt]}`);const e=await s.get(`/items/${Pt}/${x}`,{params:{fields:[St]}});_a(e.data.data,L.data.data[Dt]);const t=e.data.data[St],{penalty:a,expression:o,bracket:n}=await S(null==(kt=$a[L.data.data.code])?void 0:kt.analytical_assay,G.data.data,Ea,t,L.data.data[Dt]);console.log(`[generateInvoice][parcel=${Kt[oe]}::invoice type=${Lt}::comm=${L.data.data[Dt]}] evaluated penalty with an analytical assay=${null==(Jt=$a[L.data.data.code])?void 0:Jt.analytical_assay}, penaltyRate=${null==n?void 0:n.rate}, finalPenaltyRate=${a}, expression='${o}'`),Pa.push({commodity:L.data.data.name,analytical_assay:p(null==(qt=$a[L.data.data.code])?void 0:qt.analytical_assay,4),deduction_expression:o,assay_uom:null==(Wt=$a[L.data.data.code])?void 0:Wt.assay_uom,penalty_rate:p(null==n?void 0:n.rate,4),penalty_per_uom:t,final_penalty_rate:p(a,4),final_penalty:p((null!=a?a:1)*na.dry_weight)})}}console.log(`[generateInvoice][parcel=${Kt[oe]}::invoice type=${Lt}] evaluated commodities=${JSON.stringify(Ca)}`),console.log(`[generateInvoice][parcel=${Kt[oe]}::invoice type=${Lt}] evaluated penalties${JSON.stringify(Pa)}`);const Aa=Ca.reduce(((e,t)=>e+$(t.price)),0),Na=Ca.reduce(((e,t)=>{var a;return e+$(null==(a=t.treatment_charge)?void 0:a.final_amount)}),0),Ma=Ca.reduce(((e,t)=>{var a;return e+$(null==(a=t.refining_charge)?void 0:a.final_amount)}),0),Oa=Pa.reduce(((e,t)=>e+$(t.final_penalty)),0);console.log(`[generateInvoice][parcel=${Kt[oe]}::invoice type=${Lt}] TOTAL_REVENUE=${Aa}, TOTAL_TREATMENT_CHARGE=${Na}, TOTAL_REFINING_CHARGE=${Ma}, TOTAL_PENALTIES=${Oa}`);let Ta,Ia=0;const Ua=!!Kt[ne];Ua&&(Ia=Kt[ne].reduce(((e,t)=>e+t.amount),0),Ta={adjustments:Kt[ne].map((e=>({description:e.description,amount:p(e.amount)}))),total_adjustments:p(Ia)});const Ba=ta[Se],ka=Aa+Na+Ma+Oa+Ia,ja=null!=Ba?ka*Ba/100:void 0,Fa=await s.get(`/items/${jt}/${Kt[L]}`,{params:{fields:[Ft]}});ga(Fa.data.data);const Va=Kt[ee];let Ra;Va&&(Ra=await s.get(`/items/${Rt}/${Va}`,{params:{fields:[xt]}}),function(e){if(console.log("[validateVessel]"),!e)throw new Error("Vessel for parcel not found");if(!e[xt])throw new Error("No name defined for vessel of the selected parcel")}(Ra.data.data));let xa=(await s.get(`/items/${Gt}?filter[${Ht}]=${r}`,{params:{fields:["id",Qt]}})).data.data.reduce(((e,t)=>e+(t[Qt]?1:0)),0)+1,Ja=r;const qa=xa.toString().padStart(2,"0"),Wa=(Kt[oe],Ja.toString().padStart(2,"0")),La={Parcel:`${Kt[oe]} (#${Wa})`,Counterparty:Fa.data.data[Ft],Vessel:Ra?Ra.data.data[xt]:"Vessel TBA","Shipment Date":Kt[Y]?A(new Date(Kt[Y])):Kt[z]?A(new Date(Kt[z])):"N/A","Arrival Date":Kt[Q]?A(new Date(Kt[Q])):Kt[K]?A(new Date(Kt[K])):"N/A",Status:Kt[Y]?"Unfinalised":"Planned",Revision:"Valuation",Invoice:`${Lt}:Valuation`,"Invoice Due Date":A(e.dueDate),"Dry Weight":`${p(na.dry_weight,2)}`,...await fa(Ca,{dryWeight:na.dry_weight,dryWeightUom:na.dry_weight_uom}),"Total Revenues USD":p(Aa),"Total Penalties USD":p(Oa+Na+Ma),"Total Adjustments USD":Ua?Ta.total_adjustments:"0.00","Parcel Value USD":p(ka),"Parcel Payable Value USD":p(ja),"Payments USD":"-","Due Total":"-",metadata:{invoiceTypeRanking:ia[Lt]}};return console.log(`[generateInvoice][parcel=${Kt[oe]}::invoice type=${Lt}] generated forecast invoice=${JSON.stringify(La)}`),La}catch(t){if(t instanceof sa)return void console.error(`[generateInvoice][parcel=${e.parcelId}::invoice type=${e.invoiceType}]Non-fatal error: ${t.message}`);throw new Error(t.message+` (parcel ${e.parcelId}, invoice type ${e.invoiceType})`)}}(e))))),n=function(e){const t=e.reduce(((e,t)=>(e[t.Parcel]||(e[t.Parcel]=[]),e[t.Parcel].push(t),e)),{});Object.keys(t).forEach((e=>{t[e].sort(((e,t)=>e.metadata.invoiceTypeRanking<t.metadata.invoiceTypeRanking?-1:e.metadata.invoiceTypeRanking>t.metadata.invoiceTypeRanking?1:0))})),console.log(`[evaluateDuePaymentsForCashflow] cashflowByParcel=${JSON.stringify(t)}`),Object.keys(t).forEach((e=>{t[e].forEach(((a,o)=>{if(!a["Parcel Payable Value(Below Line) USD"]||"-"===a["Parcel Payable Value(Below Line) USD"])throw new Error(`Parcel ${e} for invoice ${a.Invoice} does not have a Parcel Payable Value(Below Line) USD`);const n=$(a["Parcel Payable Value(Below Line) USD"]);if(isNaN(n))throw new Error(`Parcel ${e} for invoice ${a.Invoice} has an invalid Parcel Payable Value(Below Line) USD of ${a["Parcel Payable Value(Below Line) USD"]}`);if(0===o){a["Payments USD"]=a["Payments USD"]&&"-"!==a["Payments USD"]?a["Payments USD"]:"0.00";const e=$(a["Payments USD"]);a["Due Total"]=p(n-e)}else{if(!t[e][o-1]["Parcel Payable Value(Below Line) USD"]||"-"===t[e][o-1]["Parcel Payable Value(Below Line) USD"])throw new Error(`Parcel ${e} for invoice ${a.Invoice} does not have a Parcel Payable Value(Below Line) USD for the previous invoice`);const i=$(t[e][o-1]["Parcel Payable Value(Below Line) USD"]);if(isNaN(i))throw new Error(`Parcel ${e} for invoice ${a.Invoice} has an invalid Parcel Payable Value(Below Line) USD of ${t[e][o-1]["Parcel Payable Value(Below Line) USD"]} for the previous invoice`);a["Due Total"]=p(n-i),a["Payments USD"]&&"-"!==a["Payments USD"]||(a["Payments USD"]=t[e][o-1]["Payments USD"])}}))})),console.log(`[evaluateDuePaymentsForCashflow] cashflowByParcel=${JSON.stringify(t)}`);const a=Object.keys(t).flatMap((e=>t[e]));return console.log(`[evaluateDuePaymentsForCashflow] cashflowAsJsonWithDueTotal=${JSON.stringify(a)}`),a}(o.filter((e=>!!e))),l=n.map((e=>(delete e.metadata,e))),u=new Date(c.value[Zt]),f=new Date(c.value[zt]),y=l.filter((e=>new Date(e["Invoice Due Date"])>=u&&new Date(e["Invoice Due Date"])<=f));a("input",y),console.log(`[generateCashflow] cashflow response: ${JSON.stringify(y)}`);const h=ra(y);console.log(`[generateCashflow] cashflow as csv: ${h}`),r.value=!1,ca(h)}catch(e){i.value=e.message}finally{r.value=!1}},downloadDoc:ca,copy:async function(){l.value=!0;const{id:e,user_created:t,date_created:a,user_updated:o,date_updated:n,cashflow:r,forecast_price:d,...u}=c.value,f=await s.get(`/items/${ea}`,{params:{filter:{[F]:{_in:d}},fields:[ta,oa,na,aa]}}),m=await s.post(`items/${ea}`,f.data.data);if(200!==m.status)return console.log(`[cashflow::copy] duplicate forecast prices response status: ${m.status}`),void(i.value=`Failed to duplicate forecast prices with status ${m.status}`);const p=m.data.data.map((e=>e.id));console.log(`[cashflow::copy] duplicated forecast prices id=${JSON.stringify(p)}`),console.log(`[cashflow::copy] requestBody=${JSON.stringify(u)}`);const y=await s.post("/items/"+J,{forecast_price:p,...u});if(200!==y.status)return console.log(`[cashflow::copy] copy response status: ${y.status}`),void(i.value=`Failed to duplicate cashflow with status ${y.status}`);l.value=!1,window.open(`/admin/content/${J}/${y.data.data.id}`)},isCopying:l,failureReason:i};function ca(e){let t;t=m(e)?ra(c.value.cashflow):e,console.log(`[downloadDoc] csvData=${t}`),la(t)}async function da(e,t,a,o,n,i=!1){if(null===n&&(m(a[Z])||m(a[Z][e])))throw new Error(`QP Selection is not set for commodity ${t} in the parcel ${a[oe]}, please ensure all contract commodities have a QP selection`);if(m(a[Z])||m(a[Z][e]))return await n();const r=await async function(e,t,a,o){var n,i;if(o&&!e.declared)return null;const r=null==e?void 0:e.qp_selected;if(!r)return null;const l=r.split(" "),s={qp_period:parseInt(l[0]),qp_code:l[1]};let c,d,u,f;switch(s.qp_code){case"MAMA":c=null!=(n=t[Q])?n:t[K],d="Actual/Estimated Arrival Date";break;case"MOSS":c=t[z],d="Estimated Shipment Date";break;case"MOS":case"MOAS":c=null!=(i=t[Y])?i:t[z],d="B/L Date (or Estimated Shipment Date)";break;default:throw new Error(`Unsupported QP code ${s.qp_code} in the contract commodities, please ensure all commodity QP codes are MAMA, MOS, MOSS, or MOAS`)}if(m(c))throw new Error(`Please fill in a date for the field '${d}' for the Parcel form, for QP: ${r}`);const p=new Date(c);if(u=T(p,s.qp_period),u.valueOf()>Date.now())return null;return f=I(p,s.qp_period),{provisionalPricingStartDate:u,provisionalPricingEndDate:f,expectedNoOfBusinessDays:null}}(a[Z][e],a,0,i);return r||await n()}async function ua(e,t,a,o){var n,i;let r,l,s,c;switch(e.qp_code){case"MAMA":c=null!=(n=t[Q])?n:t[K],r="Actual/Estimated Arrival Date";break;case"MOSS":case"MOS":case"MOAS":c=null!=(i=t[Y])?i:t[z],r="B/L Date (Estimated Shipment Date)";break;default:throw new Error(`Unsupported QP code ${e.qp_code} in the contract ${a}, please ensure all commodity QP codes are MAMA, MOS, MOSS, or MOAS`)}if(m(c))throw new Error(`No reference day provided for ${r} from contract ${a} for commodity ${o}`);const d=new Date(c);return l=T(d,e.qp_period),s=I(d,e.qp_period),{provisionalPricingStartDate:l,provisionalPricingEndDate:s,expectedNoOfBusinessDays:null}}async function fa(e,t){console.log(`[mapOutCommoditiesForCashflow] commodities=${JSON.stringify(e)};;containedMetalParam=${JSON.stringify(t)}`);return(await Promise.all(e.map((async e=>{var a,o,n,i,r,l,s,c,d,u;const f=await j(e.payable_metal_uom,t.dryWeightUom,e.assay_uom);console.log(`[mapOutCommoditiesForCashflow] commodity=${e.commodity}, containedMetalUnitConversion=${JSON.stringify(f)}`);const m=((null==(a=f.initialConversion)?void 0:a.isConvertByMultiplication)?null!=(n=null==(o=f.initialConversion)?void 0:o.conversionFactor)?n:1:1/(null!=(r=null==(i=f.initialConversion)?void 0:i.conversionFactor)?r:1))*((null==(l=f.finalConversion)?void 0:l.isConvertByMultiplication)?null!=(c=null==(s=f.finalConversion)?void 0:s.conversionFactor)?c:1:1/(null!=(u=null==(d=f.finalConversion)?void 0:d.conversionFactor)?u:1)),y=("%"===e.assay_uom?.01:1)*e.analytical_assay;return{[`${e.commodity} Payable Metal (${e.payable_metal_uom})`]:e.payable_metal,[`${e.commodity} Contained Metal (${e.payable_metal_uom})`]:p(t.dryWeight*y*m),[`${e.commodity} Revenue (USD)`]:e.price,[`${e.commodity} QP Month`]:ma(new Date(e.qp_start_date)),[`${e.commodity} Price (USD/${e.price_per_uom})`]:e.price_rate,...!!e.treatment_charge&&{[`${e.commodity} TC (USD)`]:e.treatment_charge.final_amount,[`${e.commodity} TC (USD/${e.treatment_charge.per_uom})`]:e.treatment_charge.final_rate},...!!e.refining_charge&&{[`${e.commodity} RC (USD)`]:e.refining_charge.final_amount,[`${e.commodity} RC (USD/${e.refining_charge.per_uom})`]:e.refining_charge.final_rate}}})))).reduce(((e,t)=>({...e,...t})),{})}function ma(e){return`${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][e.getMonth()]} ${e.getFullYear()}`}async function pa(e,t,a,o,n,i,r=null,l=1){var d;if(console.log(`[getCommodityAvgPrice] commodity=${e}, commodityId=${t}, source=${a}, startDate=${o}, endDate=${n}, currency=${l}`),m(e))throw new Error(`Commodity ${e} is not defined for price calcualtion`);if(m(a))throw new Error(`Price method for commodity ${e} is not defined for price calcualtion`);if(m(o))throw new Error(`Start date is not defined for price calcualtion with Price Method #${a} has not been properly defined, please ensure that contract QP for commodity ${e} is properly defined`);if(m(n))throw new Error(`End date is not defined for price calcualtion with Price Method #${a} has not been properly defined, please ensure that contract QP for commodity ${e} is properly defined`);const u=new Date(o.valueOf());null===i||isNaN(i)||u.setDate(u.getDate()-10);const f=await s.get(`/items/navarch_commodity_price?filter[_and][0][price_method][_eq]=${a}&filter[_and][0][currency][_eq]=${l}&filter[_and][1][date][_between][0]=${N(u)}&filter[_and][1][date][_between][1]=${N(n)}&sort[]=-${Lt}`,{params:{fields:[Jt,qt,Wt,Lt,"price_method"]}});if((null==(d=f.data)?void 0:d.data)&&Array.isArray(f.data.data)&&f.data.data.length>0){const t=f.data.data[f.data.data.length-1],l=new Date(t[Lt]);if(console.log(`[getCommodityAvgPrice] commodity prices=${JSON.stringify(f.data.data)}`),l>=n){if(null!=i&&f.data.data.length<i)throw new Error(`Not enough commodity prices found for commodity ${e} between ${N(o)} and ${N(n)}, please contact Navarch for support`);const t=null===i||isNaN(i)?f.data.data:f.data.data.slice(0,i),l=t.reduce(((t,o)=>{if(!o[Wt]&&!o[qt]&&!o[Jt])throw new Error(`Commodity ${e} for Price Method #${a} on the date of ${o[Lt]} does not have a price, please contact Navarch for assistance`);let n;if("PM"===r){if(null===o[qt])throw new Error(`The price data for the commodity ${e} does not have a Closing Price (PM) for the date of ${o[Lt]}, please choose another price fix or provide a Price PM for this date`);n=Number(o[qt])}else if("AM"===r){if(null===o[Jt])throw new Error(`The price data for the commodity ${e} does not have an Opening Price (AM) for the date of ${o[Lt]}, please choose another price fix or provide a Price AM for this date`);n=Number(o[Jt])}else if("Average"===r){if(null===o[Wt])throw new Error(`The price data for the commodity ${e} does not have an Average Price for the date of ${o[Lt]}, please choose another price fix or provide an Average Price for this date`);n=Number(o[Wt])}else if(null!==o[Wt])n=Number(o[Wt]);else if(null!==o[qt])n=Number(o[qt]);else{if(null===o[Jt])throw new Error(`The commodity price for ${e} of Price Method #${a} for the date of ${o[Lt]} is not a valid number, please contact Navarch for assistance`);n=Number(o[Jt])}return t+n}),0)/t.length;return console.log(`[getCommodityAvgPrice] average price=${l} for commodity ${e} between ${N(o)} (with over-adjusted start date of ${N(u)}) and ${N(n)}`),{averagePrice:l,startDate:new Date(t[t.length-1][Lt]),endDate:new Date(t[0][Lt])}}console.log(`[getCommodityAvgPrice] latest comm price date=${l} is before end date=${n}, getting forecast price`)}if(!c.value[F])throw new Error("Please save the Cashflow form first before generating the cashflow doc");const p=await s.get(`/items/${ea}`,{params:{filter:{[ta]:{_eq:t},cashflow_forecast_id:{_eq:c.value[F]}},fields:[aa,ta,oa,na]}});!function(e,t){if(!e||!Array.isArray(e)||0===e.length)throw new Error(`No forecast price found for ${t}, please ensure prices have been provided`)}(p.data.data,e);const y=p.data.data.find((e=>{const t=new Date(e[oa]),a=new Date(e[na]);return t<=o&&a>=n}));if(!y)throw new Error(`No single forecast price found for commodity ${e} between ${N(o)} and ${N(n)}, please ensure there is only one price value for this range`);return console.log(`[getCommodityAvgPrice] forecast price=${y[aa]} for commodity ${e} between ${N(o)} and ${N(n)}`),{averagePrice:y[aa],startDate:o,endDate:n}}function ya(e,t){var a,o,n;if(console.log("[validateCommodityData]"),!e)throw new Error("commodity data response is null");if(!e[Dt])throw new Error(`Commodity name for commodity ${null!=(a=e[Et])?a:t} is undefined, please contact Navarch for assistance`);if(!e[Et])throw new Error(`Commodity code for commodity ${null!=(o=e[Dt])?o:t} is not defined, please contact Navarch for assistance`);if(!e[F])throw new Error(`Commodity ID for commodity ${null!=(n=e[Dt])?n:t} is not defined, please contact Navarch for assistance`)}function ha(e,t){if(!e)throw new Error(`Price per UOM for commodity ${t} is not a valid`);if(!e[St])throw new Error(`Price per UOM for commodity ${t} does not have a valid unit symbol, please contact Navarch for assistance`)}function va(e,t){if(!e)throw new Error(`Charge per UOM for commodity ${t} is not a valid`);if(!e[St])throw new Error(`Charge per UOM for commodity ${t} does not have a valid unit symbol, please contact Navarch for assistance`)}function _a(e,t){if(!e)throw new Error(`Penalty per UOM for commodity ${t} is not a valid`);if(!e[St])throw new Error(`Penalty per UOM for commodity ${t} does not have a valid unit symbol, please contact Navarch for assistance`)}function ga(e){if(console.log("[validateCounterparty]"),!e)throw new Error("Counterparty for parcel not found");if(!e[Ft])throw new Error("No codename defined for counterparty of the selected parcel")}}});const $={key:0},w={key:1};var D=[],E=[];!function(e,t){if(e&&"undefined"!=typeof document){var a,o=!0===t.prepend?"prepend":"append",n=!0===t.singleTag,i="string"==typeof t.container?document.querySelector(t.container):document.getElementsByTagName("head")[0];if(n){var r=D.indexOf(i);-1===r&&(r=D.push(i)-1,E[r]={}),a=E[r]&&E[r][o]?E[r][o]:E[r][o]=l()}else a=l();65279===e.charCodeAt(0)&&(e=e.substring(1)),a.styleSheet?a.styleSheet.cssText+=e:a.appendChild(document.createTextNode(e))}function l(){var e=document.createElement("style");if(e.setAttribute("type","text/css"),t.attributes)for(var a=Object.keys(t.attributes),n=0;n<a.length;n++)e.setAttribute(a[n],t.attributes[a[n]]);var r="prepend"===o?"afterbegin":"beforeend";return i.insertAdjacentElement(r,e),e}}(".margin-top-16px[data-v-64969d30] {\n  margin-top: 16px;\n}",{}),g.render=function(e,t,a,o,n,y){const h=i("v-button"),v=i("v-notice");return r(),l(s,null,[c(' <input :value="value" @input="handleChange($event.target.value)" /> '),c(" create a button only interface for Directus"),e.value?(r(),l("div",w,[d(h,{onClick:t[1]||(t[1]=()=>e.downloadDoc())},{default:u((()=>[f("Download Cashflow ")])),_:1})])):(r(),l("div",$,[d(h,{onClick:t[0]||(t[0]=()=>e.generateCashflow()),loading:e.isGeneraingDoc},{default:u((()=>[f("Generate Cashflow")])),_:1},8,["loading"]),e.failureReason?(r(),m(v,{key:0},{default:u((()=>[f(p(e.failureReason),1)])),_:1})):c("v-if",!0)])),d(h,{class:"margin-top-16px",onClick:t[2]||(t[2]=()=>e.copy()),loading:e.isCopying},{default:u((()=>[f("Copy")])),_:1},8,["loading"])],64)},g.__scopeId="data-v-64969d30",g.__file="src/interface.vue";var b=t({id:"navarch-docgen-cashflow",name:"Navarch Cashflow Generator Button",icon:"receipt_long",description:"This is my custom interface for Navarch's Cashflow Doc!",component:g,options:null,types:["json"],group:"standard"});export{b as default};
