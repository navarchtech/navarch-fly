import{useApi as e,defineInterface as t}from"@directus/extensions-sdk";import{defineComponent as a,ref as o,inject as n,resolveComponent as r,openBlock as i,createElementBlock as l,Fragment as s,createCommentVNode as c,createVNode as d,withCtx as u,createTextVNode as m,createBlock as f,toDisplayString as p}from"vue";var h=(e=>(e.BRACKET="Brackets",e.MIN_DEDUCTION="Minimum Deduction",e.MAX_CAP="Maximum Cap",e))(h||{}),y=(e=>(e.PERCENTAGE="Percentage",e.FRACTIONAL="Fractional",e))(y||{}),_=(e=>(e.WET_WEIGHT="wet_weight",e.MOISTURE="moisture",e.DRY_WEIGHT="dry_weight",e))(_||{}),v=(e=>(e.METHOD="method",e.WET_WEIGHT_UOM="wet_weight_uom",e.MOISTURE_UOM="moisture_uom",e.DRY_WEIGHT_UOM="dry_weight_uom",e))(v||{}),w=a({props:{value:{type:Object,default:null}},emits:["input"],setup(t,{emit:a}){const r=o(""),i=o(!1),l=e(),s=n("values",o({}));function c(e){if(console.log("[evaluateWeightData]"),0===e.length)return;const t=u(e,_.DRY_WEIGHT),a=u(e,_.WET_WEIGHT);return{method:d(e,v.METHOD),lots:e,dry_weight_uom:d(e,v.DRY_WEIGHT_UOM),wet_weight_uom:d(e,v.WET_WEIGHT_UOM),dry_weight:t,wet_weight:a,moisture:(a-t)/a*100}}function d(e,t){if(console.log("[getFirstValueAsSharedValue]"),0!==e.length)return console.log(`lots[0][${t.toString()}]=${e[0][t.toString()]}`),e[0][t.toString()]}function u(e,t){return console.log("[evaluateAggregateValue]"),e.reduce(((e,a)=>{var o;return e+(null!=(o=a[t.toString()])?o:0)}),0)}function m(e){return null==e}function f(e,t=2,a=!0){if(console.log("[formatNumber]"),isNaN(e)||null===e)return"-";const o=Math.round(e*Math.pow(10,t))/Math.pow(10,t),[n,r]=o.toString().split("."),i=n.replace(/\B(?=(\d{3})+(?!\d))/g,",");if(!r&&!a)return i;return`${i}.${(null!=r?r:"").padEnd(t,"0")}`}function p(e){if(console.log("[parseNumber]"),!e)return 0;const t=parseFloat(e.replace(/,/g,""));return console.log(`[parseNumber] number: ${e} to ${t}`),t}function w(e,t){var a;if(console.log("[findBracket]"),1===e.length){if(t>=(null!=(a=e[0].lower_threshold)?a:0)&&(null===e[0].upper_threshold||void 0===e[0].upper_threshold||t<e[0].upper_threshold))return e[0];throw new Error(`[findBracket] value=${t} does not fall within the only bracket: ${JSON.stringify(e[0])}`)}return e.find((e=>{var a,o;const n=t>(null!=(a=e.lower_threshold)?a:0)&&(null===e.upper_threshold||void 0===e.upper_threshold||t<e.upper_threshold)||e.lower_threshold_inclusive&&t===(null!=(o=e.lower_threshold)?o:0)||e.upper_threshold_inclusive&&t===e.upper_threshold;return console.log(`[findBracket] value=${t} for bracket: ${JSON.stringify(e)}? match=${!!n}`),n}))}function $(e,t){var a,o,n,r,i,l,s;console.log("[evaluateFinalValueFromBrackets]");const c=(e-(null!=(a=t.initial_adjustment)?a:0)*(null!=(o=t.initial_adjustment_conversion_factor)?o:1))*(null!=(n=t.rate)?n:0)*(t.rate_type===y.PERCENTAGE?.01:1)+(null!=(r=t.final_adjustment)?r:0)*(null!=(i=t.final_adjustment_conversion_factor)?i:1);switch(t.bracket_type){case h.MIN_DEDUCTION:if(null===t.comparator||void 0===t.comparator)throw new Error("Minimum deduction not found");const a=t.comparator*(null!=(l=t.comparator_conversion_factor)?l:1);return e-c<a?e-a:c;case h.MAX_CAP:if(null===t.comparator||void 0===t.comparator)throw new Error("Maximum cap not found");const o=t.comparator*(null!=(s=t.comparator_conversion_factor)?s:1);return c>o?o:c;case h.BRACKET:return c;default:throw new Error(`bracket type ${t.bracket_type} is not supported`)}}async function g(e,t,a){var o,n,r,i,l,s,c,d;if(console.log("[evaluatePayableAssay]"),!a||0===a.length)return{};const u=w(a,e);if(!u)throw new Error(`Bracket not found for value ${e}, please ensure the brackets for all commodities defined in the contract cover all range of possible values for payable assays`);let m,p,_=1;u.initial_adjustment_uom&&void 0!==u.initial_adjustment_uom&&null!==u.initial_adjustment_uom&&u.initial_adjustment_uom!==t&&(_=await M(u.initial_adjustment_uom,t),m=U(u.initial_adjustment_uom,t));let v,g=1;u.bracket_type===h.MAX_CAP?(p=null!=(o=u.maximum_cap)?o:0,void 0!==u.maximum_cap_uom&&null!==u.maximum_cap_uom&&u.maximum_cap_uom!==t&&(g=await M(u.maximum_cap_uom,t),v=U(u.maximum_cap_uom,t))):u.bracket_type===h.MIN_DEDUCTION&&(p=null!=(n=u.minimum_deduction)?n:0,void 0!==u.minimum_deduction_uom&&null!==u.minimum_deduction_uom&&u.minimum_deduction_uom!==t&&(g=await M(u.minimum_deduction_uom,t),v=U(u.minimum_deduction_uom,t)));const E=$(e,{bracket_type:u.bracket_type,rate:null!=(r=u.rate)?r:1,rate_type:null!=(i=u.rate_type)?i:y.FRACTIONAL,initial_adjustment:null!=(l=u.initial_adjustment)?l:0,initial_adjustment_conversion_factor:_,comparator:p,comparator_conversion_factor:g});let D="";const b=void 0!==u.initial_adjustment&&null!==u.initial_adjustment;if(u.bracket_type===h.BRACKET)D=`${b?"(":""}${f(e,4)}${null!=t?t:""}${b?` - ${f(u.initial_adjustment,4)}${null!=(s=u.initial_adjustment_uom)?s:`${null!=t?t:""}`}`:""}${b&&1!==_?` * ${f(_,4)}${m}`:""}${b?")":""} * ${f(u.rate,4)}${u.rate_type===y.PERCENTAGE?"/100":`/${f(1,4)}`}`;else if(u.bracket_type===h.MIN_DEDUCTION){D=E===e-p*g?`${f(e,4)}${null!=t?t:""} - ${f(p,4)}${null!=t?t:""}${1!==g?` * ${f(g,4)}${v}`:""}`:`${b?"(":""}${f(e,4)}${null!=t?t:""}${b?` - ${f(u.initial_adjustment,4)}${null!=(c=u.initial_adjustment_uom)?c:`${null!=t?t:""}`}`:""}${b&&1!==_?` * ${f(_,4)}${m}`:""}${b?")":""} * ${f(u.rate,4)}${u.rate_type===y.PERCENTAGE?"/100":`/${f(1,4)}`}`}else{if(u.bracket_type!==h.MAX_CAP)throw new Error(`[buildPayableAssayExpression] unknown bracket method: ${u.bracket_type}`);D=E===p*g?`${f(p,4)}${null!=t?t:""}${1!==g?` * ${f(g,4)}${v}`:""}`:`${b?"(":""}${f(e,4)}${null!=t?t:""}${b?` - ${f(u.initial_adjustment,4)}${null!=(d=u.initial_adjustment_uom)?d:`${null!=t?t:""}`}`:""}${b&&1!==_?` * ${f(_,4)}${m}`:""}${b?")":""} * ${f(u.rate,4)}${u.rate_type===y.PERCENTAGE?"/100":`/${f(1,4)}`}`}return{payableAssay:E,expression:D}}console.log("[main] formValues=",s);const E="above the lower threshold, plus",D="below the upper threshold, minus";function b(e,t,a){var o,n,r,i;if(console.log("[evaluateTreatmentCharge]"),!a||!a.length)return;const l=w(a,e);if(!l)throw new Error(`Bracket not found for value ${e}, please ensure the brackets for all commodities defined in the contract cover all range of possible values for treatment charge`);let s=0,c=1;if(l.use_btc)c=0,s=0;else if(c=null!=(o=l.rate)?o:1,l.for_every_unit===E)s=null!=(n=l.lower_threshold)?n:0;else{if(l.for_every_unit!==D)throw new Error(`[evaluateTreatmentCharge] unknown for_every_unit: ${l.for_every_unit}`);s=null!=(r=l.upper_threshold)?r:0}const d={bracket_type:h.BRACKET,rate:c,rate_type:y.FRACTIONAL,initial_adjustment:s,final_adjustment:null!=(i=l.base_treatment_charge)?i:0};return console.log(`[evaluateTreatmentCharge] bracketForEvaluation: ${JSON.stringify(d)}`),{finalValue:$(e,d),baseTreatmentCharge:l.base_treatment_charge}}function C(e,t,a,o){var n,r,i;if(console.log("[evaluatePenalty]"),!t||!t.length)return{};const l=w(t,e);if(!l)throw new Error(`[evaluatePenalty] Bracket not found for value ${e}, please ensure the brackets for all commodities defined in the contract cover all range of possible values for penalty`);let s=0,c=1;if(l.no_penalty)c=0,s=0;else if(c=null!=(n=l.rate)?n:1,l.for_every_unit===E)s=null!=(r=l.lower_threshold)?r:0;else{if(l.for_every_unit!==D)throw new Error(`[evaluatePenalty] unknown for_every_unit: ${l.for_every_unit}`);s=null!=(i=l.upper_threshold)?i:0}const d={bracket_type:h.BRACKET,rate:c,rate_type:y.FRACTIONAL,initial_adjustment:s,final_adjustment:0};console.log(`[evaluatePenalty] bracketForEvaluation: ${JSON.stringify(d)}`);const u=$(e,d),m=null!=d.initial_adjustment;let p="";return p=l.rate&&0!==l.rate?`${m?"(":""}${f(e,4)}${m?` - ${f(s,4)})`:""} / ${f(1,4)} * ${null!=a?a:""} ${f(c,4)}/${null!=o?o:""}`:"No penalty",{penalty:u,expression:p,bracket:l}}function A(e){const t=e.getDate(),a=e.getMonth(),o=e.getFullYear();return`${t} ${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][a]} ${o}`}function N(e,t=!0){const a=e.getMonth()+1,o=e.getDate();return`${e.getFullYear()}${t?"-":" "}${a<10?"0":""}${a}${t?"-":" "}${o<10?"0":""}${o}`}function S(e,t,a=!1){const o=new Date(e.valueOf());let n=t-(a?1:0);for(;n>0;)o.setDate(o.getDate()-1),0!==o.getDay()&&6!==o.getDay()&&(n-=1);return o}function T(e,t,a=!1){const o=new Date(e.valueOf());let n=t-(a?1:0);for(;n>0;)o.setDate(o.getDate()+1),0!==o.getDay()&&6!==o.getDay()&&(n-=1);return o}function O(e,t){const a=new Date(e.valueOf());return a.setMonth(a.getMonth()+t,1),a}function I(e,t){const a=new Date(e.valueOf());return a.setMonth(a.getMonth()+t+1,0),a}async function P(e,t){if(e===t)return 1;const a=await l.get(`/items/${pt}?filter[${ht}]=${e}`,{params:{fields:[$t]}});if(0===a.data.data.length||null===a.data.data[0][$t]||void 0===a.data.data[0][$t])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for source weight unit ${e}. Ensure that the symbol is correct and is a weight unit symbol`);const o=await l.get(`/items/${pt}?filter[${ht}]=${t}`,{params:{fields:[$t]}});if(0===o.data.data.length||null===o.data.data[0][$t]||void 0===o.data.data[0][$t])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for the target weight unit ${t}. Ensure that the symbol is correct and is a weight unit symbol`);const n=parseFloat(a.data.data[0][$t]);if(isNaN(n))throw new Error(`[getWeightUnitConversionValue] source weight unit ${e} conversion value=${n} is not a number`);const r=parseFloat(o.data.data[0][$t]);if(isNaN(r))throw new Error(`[getWeightUnitConversionValue] target weight unit ${t} conversion value=${r} is not a number`);return n/r}async function M(e,t){if(null==e||null==t)return 1;if(e===t)return 1;const a=await l.get(`/items/${gt}?filter[${Et}]=${e}`,{params:{fields:[Dt]}});if(0===a.data.data.length||void 0===a.data.data[0][Dt]||null===a.data.data[0][Dt])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for source weight unit ${e}. Ensure that the symbol is correct and is a weight unit symbol`);const o=await l.get(`/items/${gt}?filter[${Et}]=${t}`,{params:{fields:[Dt]}});if(0===o.data.data.length||void 0===o.data.data[0][Dt]||null===o.data.data[0][Dt])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for the target weight unit ${t}. Ensure that the symbol is correct and is a weight unit symbol`);const n=parseFloat(a.data.data[0][Dt]);if(isNaN(n))throw new Error(`[getAssayUnitConversionValue] source weight unit ${e} conversion value=${n} is not a number`);console.log(`[getAssayUnitConversionValue] source unit conversion value=${n}`);const r=parseFloat(o.data.data[0][Dt]);if(isNaN(r))throw new Error(`[getAssayUnitConversionValue] target weight unit ${e} conversion value=${r} is not a number`);return console.log(`[getAssayUnitConversionValue] target unit conversion value=${r}`),console.log("[getAssayUnitConversionValue] returning "+n/r),n/r}function U(e,t){if(void 0===e||void 0===t||null===e||null===t)return;const a=e.split("/"),o=t.split("/");if(a.length>2||o.length>2)throw new Error(`[getConversionUnit] sourceUnit=${e} and targetUnit=${t} must be in the format of 'unit1/unit2', an extra '/' was found`);if(1===a.length&&1===o.length)return`${o[0]}/${a[0]}`;if(1===a.length){const e=o[0]===a[0]?"":`${o[1]}(${a[1]})`,t=o[1];return""===t?e:`${e}/${t}`}if(1===o.length){const e=a[1],t=a[0]===o[0]?"":`${a[1]}(${o[0]})`;return""===t?e:`${e}/${t}`}{const e=a[0]===o[0],t=a[1]===o[1],n=e||""===a[0],r=e||""===o[0],i=t||""===a[1],l=t||""===o[1],s=!i&&!r,c=!n&&!l,d=`${i?"":a[1]}${s?"(":""}${r?"":`${o[0]}`}${s?")":""}`,u=`${n?"":a[0]}${c?"(":""}${l?"":`${o[1]}`}${c?")":""}`;return""===u?d:`${d}/${u}`}}async function k(e,t,a){const o=await l.get(`/items/${pt}?filter[${yt}]=${t}`,{params:{fields:[ht]}});if(!o.data.data||!o.data.data[0]||!o.data.data[0][ht])throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] Dry weight uom not found for symbol ${t}`);const n=o.data.data[0][ht];if("%"===a){if(n===e)return{};const t=U(n,e);if(!t)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] no conversion unit found for dry weight unit ${n} and target weight unit ${e}`);return{finalConversion:{conversionFactor:await P(n,e),conversionUom:t}}}let r=a.split("/");if(1==r.length){const e=await async function(e){const t=await l.get(`/items/${gt}`,{params:{fields:[Et,bt],filter:{[bt]:{_nnull:!0},[Et]:{_eq:e}}}});if(200!==t.status||!t.data||0===t.data.data.length)throw new Error("[getAssayUnitComposition] no assay units found with composition");return t.data.data[0][bt]}(a);if(!e)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${a} does not have a composition`);r=e.split("/")}if(r.length>2||0===r.length)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${a} is not in the format of 'unit1/unit2'`);const i=r[0],s=r[1],c={};if(s!==n){const e=U(n,s);if(!e)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] no conversion unit found for dry weight unit ${n} and assay unit denominator unit ${s}`);c.initialConversion={conversionFactor:await P(n,s),conversionUom:e}}if(i!==e){const t=U(i,e);if(!t)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] no conversion unit found for target weight unit ${e} and assay unit numerator unit ${i}`);c.finalConversion={conversionFactor:await P(i,e),conversionUom:t}}return c}const F=864e5,j="id",V="foreign_key",R="lot_number",J="method",B="navarch_parcel",x="contract",q="counterparty",W="assay_results",G="weight_result",L="actual_arrival_date",H="estimate_arrival_date",K="bl_date",Q="estimated_shipment_date",Y="vessel",X="origin",z="destination",Z="shipment_code",ee="adjustments",te="parcel_finalisation_date",ae="navarch_assay_lot",oe="commodity",ne="dry_weight",re="final_assay",ie="assay_uom",le="lot_number",se="navarch_weight_lot",ce="dry_weight",de="wet_weight",ue="moisture",me="wet_weight_uom",fe="dry_weight_uom",pe="navarch_contract",he="contract_currency",ye="name",_e="navarch_contract_payment_information",ve="related_contract",we="invoice_type",$e="pay_percent",ge="pa_days",Ee="pa_day_type",De="pa_ref_day",be="pa_cashflow_days",Ce="pa_cashflow_day_type",Ae="pp_days",Ne="pp_day_type",Se="pp_ref_day",Te="navarch_commodity_in_contract",Oe="contract",Ie="commodity",Pe="primary_commodity",Me="price_method",Ue="price_per_uom",ke="treatment_charge_per_uom",Fe="quotational_periods",je="payable_assay_rates",Ve="treatment_charge_rates",Re="penalty_rates",Je="penalty_per_uom",Be="navarch_payable_assay_bracket",xe="initial_adjustment",qe="initial_adjustment_uom",We="minimum_deduction",Ge="minimum_deduction_uom",Le="maximum_cap",He="maximum_cap_uom",Ke="related_commodity_in_contract",Qe="bracket_type",Ye="lower_threshold",Xe="lower_threshold_inclusive",ze="upper_threshold",Ze="upper_threshold_inclusive",et="rate",tt="rate_type",at="navarch_treatment_charge_bracket",ot="base_treatment_charge",nt="use_btc",rt="for_every_unit",it="navarch_penalty_bracket",lt="no_penalty",st="for_every_unit",ct="navarch_commodity",dt="name",ut="code",mt="navarch_currency",ft="code",pt="navarch_unit",ht="symbol",yt="dry_symbol",_t="wet_symbol",vt="dry_unit",wt="wet_unit",$t="conversionToGram",gt="navarch_assay_unit",Et="unit",Dt="conversion_to_ppb",bt="composition",Ct="navarch_counterparty",At="codename",Nt="navarch_vessel",St="name",Tt="price_pm",Ot="average_price",It="date",Pt="navarch_invoices",Mt="parcel",Ut="invoice",kt="amount_paid",Ft="invoice_type",jt="commodity",Vt="price",Rt="start_date",Jt="end_date";class Bt extends Error{constructor(e){super(e),this.name="NonFatalError",Object.setPrototypeOf(this,Bt.prototype)}}return{isGeneraingDoc:i,invoiceUrl:s.value,generateCashflow:async function(){r.value="";try{i.value=!0;const e=await async function(){const e=new Date(s.value.start_date);if("Invalid Date"===e.toString())throw r.value="Start date is invalid",new Error("Start date is invalid");const t=new Date(s.value.end_date);if("Invalid Date"===t.toString())throw r.value="End date is invalid",new Error("End date is invalid");const a=await l.get(`/items/${pe}`,{params:{fields:[ye,j,"invoice_type"]}}),o={};await Promise.all(a.data.data.map((async a=>{var n,r,i,s,c;const d=await l.get(`/items/${_e}`,{params:{filter:{[ve]:{_eq:a[j]}},fields:[we,ge,Ee,De,be,Ce]}}),u=await l.get(`/items/${B}`,{params:{filter:{[x]:{_eq:a[j]}},fields:[j,Z,L,H,K,Q,te]}});for(const m of d.data.data){const d={days:"Final"===m[Ft]?m[be]:m[ge],day_type:"Final"===m[Ft]?m[Ce]:m[Ee],ref_day:"Final"===m[Ft]?"QP Month + n days":m[De]};if(!d)throw new Error(`Contract ${a[ye]} does not have a payment advice for invoice type ${m[Ft]}`);let f,p="";for(const h of u.data.data){switch(d.ref_day){case"Arrival Date":p="Actual Arrival Date from the Parcel form",f=null!=(n=h[L])?n:h[H];break;case"B/L Date":p="B/L Date (or Estimated Shipment Date) from the Parcel form",f=null!=(r=h[K])?r:h[Q];break;case"Invoice Date":p="Invoice Date (using the B/L Date or Estimated Shipment Date from the Parcel form)",f=null!=(i=h[K])?i:h[Q];break;case"Estimated Shipment Date":p="Estimated Shipment Date from the Parcel form",f=h[Q];break;case"QP Month + n days":const e=await l.get(`items/${Te}`,{params:{filter:{[Oe]:{_eq:a[j]},payable_commodity:{_eq:!0}},fields:[Fe]}});if(!Array.isArray(e.data.data)||0===e.data.data.length)throw new Error(`Contract ${a[ye]} does not have any payable commodities`);const t=e.data.data.map((e=>e[Fe].find((e=>!!e.default)))),o=t.reduce(((e,t)=>t.qp_period>e.qp_period?t:e),t[0]);switch(o.qp_code){case"MAMA":p="Actual Arrival Date from the Parcel form",f=null!=(s=h[L])?s:h[H];break;case"MOSS":case"MOS":case"MOAS":p="B/L Date (or Estimated Shipment Date) from the Parcel form",f=null!=(c=h[K])?c:h[Q];break;default:throw new Error(`Unsupported QP code ${o.qp_code}, currently only supports MAMA, MOS, MOSS, and MOAS`)}break;default:throw new Error(`Invalid reference day for payment advice: ${d.ref_day}; please contact Navarch for support`)}if(null==f)throw new Error(`Reference day for payment advice ${p} is empty in parcel ${h[Z]}`);const u=new Date(f),y=parseInt(d.days);let _;switch(d.day_type){case"Business Day(s)":_=T(u,y,!0);break;case"Calendar Day(s)":_=new Date(u.valueOf()),_.setDate(_.getDate()+y);break;default:throw new Error(`Please provide a valid Day Type (Cashflow) for ${a[ye]}:Final Invoice Type`)}_>=e&&_<=t&&(o[h[j]]||(o[h[j]]=[]),o[h[j]].push({invoiceType:m[we],dueDate:_,parcelId:h[j],contractName:a[ye]}))}}})));const n=Object.keys(o),i=await l.get(`/items/${B}`,{params:{filter:{[j]:{_in:n}},fields:[j,x,q,W,G,L,H,K,Q,Y,X,z,Z,ee,"parcel_finalised",te,W]}});if(!i.data.data||i.data.data.length!==n.length)throw new Error("Experiencing some network issues, please try again. If the issue persists, contact Navarch for support");const c={parcelData:i.data.data.reduce(((e,t)=>(e[t[j]]=t,e)),{}),contractNameByParcelId:n.reduce(((e,t)=>(e[t]=o[t][0].contractName,e)),{}),invoiceTypeParcel:n.flatMap((e=>o[e])),parcelIds:n};return console.log(`[getApplicableParcels] returnObject=${JSON.stringify(c)}`),c}(),t=await async function(e){const t=[],a=await l.get(`/items/${Pt}`,{params:{filter:{[Mt]:{_in:e.parcelIds},[Ut]:{_nnull:!0}},fields:[Mt,Ft,Ut,kt]}});for(const o of e.invoiceTypeParcel){const n=a.data.data.find((e=>e[Mt]===o.parcelId&&e[Ft]===o.invoiceType));n?t.push({parcelId:o.parcelId,invoiceType:o.invoiceType,contractName:e.contractNameByParcelId[o.parcelId],dueDate:o.dueDate,invoiceData:{...n[Ut],amount_paid:n[kt]}}):t.push({parcelId:o.parcelId,invoiceType:o.invoiceType,contractName:e.contractNameByParcelId[o.parcelId],dueDate:o.dueDate,parcelData:e.parcelData[o.parcelId]})}return console.log(`[generateInvoiceParamForParcel] invoiceParams=${JSON.stringify(t)}`),t}(e);console.log(`[generateCashflow] form values=${JSON.stringify(s.value)}`);const o=await Promise.all(t.map((async e=>(console.log(`[generateCashflow] invoiceParam=${JSON.stringify(e)}`),await async function(e){var t,a,o,n,s,d,u,m,h,y,_,v,w,$,E,D,N,T,P,M,U,F,te,ye,be,Ce,$t,gt,Et,Dt,bt,Tt,Ot,It,kt,Ft,jt,Vt,Rt;r.value="",i.value=!0;try{if(e.invoiceData){console.log(`[generateInvoice][invoice=${JSON.stringify(e.invoiceData.invoice_number)}::parcel=${e.invoiceData.parcel}] using existing invoice=${JSON.stringify(e.invoiceData)}`);const t=e.invoiceData,a=await l.get(`/items/${Ct}`,{params:{filter:{[j]:{_eq:t.buyer}},fields:[At]}});Qt(a.data.data[0]);const o=await l.get(`/items/${B}`,{params:{filter:{[j]:{_eq:e.parcelId}},fields:[K,L,H]}});console.log(`[generateInvoice][invoice=${JSON.stringify(e.invoiceData.invoice_number)}::parcel=${e.invoiceData.parcel}] parcel date data=${JSON.stringify(o.data.data)}`);const n=o.data.data[0];return{Counterparty:a.data.data[0][At],Vessel:"N/A"===t.vessel?"Vessel TBA":t.vessel,"Shipment Date":t.bl_date,"Arrival Date":n[L]?A(new Date(n[L])):n[H]?A(new Date(n[H])):"N/A",Status:o[K]?"Unfinalised":"Planned",Revision:"Original",Invoice:`${t.invoice_type}:Original`,Parcel:t.parcel,"Invoice Due Date":A(e.dueDate),"Dry Weight":t.dry_weight,"Total Revenues USD":t.total_revenue,"Total Penalties USD":t.total_deductions,...xt(t.commodities,Number(t.dry_weight)),"Total Adjustments USD":t.adjustments?t.adjustments.total_adjustments:"0.00","Parcel Value USD":t.invoice_value,"Parcel Payable Value(Below Line) USD":t.payable_amount,"Payments USD":t.amount_paid,"Due Total":t.balance_in_sellers_favor}}if(void 0===e.parcelData)throw new Bt(`Something went wrong, no parcel or invoice data for Invoice of parcel id ${e.parcelId.substring(0,5)} and invoice type ${e.invoiceType}`);const r=e.parcelId;if(!r)return void console.error(`[generateInvoice] A parcel id is not defined for invoice type ${e.invoiceType}`);const i=e.invoiceType,Jt=e.parcelData,qt=e.contractName;console.log(`[generateInvoice][parcel=${Jt[Z]}::invoice type=${i}] parcel data=${JSON.stringify(Jt)}`),function(e){if(!e)throw new Error("Parcel data not found, please ensure the selected parcel still exists");if(!e[Z])throw new Error("One of the parcels does not have a shipment code, please ensure that all parcels have a shipment code");if(!e[x])throw new Error(`The parcel ${e[Z]} does not have a contract, please ensure that the contract field for the parcel is not empty`);if(!e[q])throw new Error(`The parcel ${e[Z]} does not havea counterparty, please ensure that the counterparty field for the parcel is not empty`);if(!e[W])throw new Bt(`The parcel ${e[Z]} does not haveassay results`);if(!e[G])throw new Bt(`The parcel ${e[Z]} does not haveweight results`);if(!e[X])throw new Error(`The parcel ${e[Z]} does not havean origin port`);if(!e[z])throw new Error(`The parcel ${e[Z]} does not havea destination port`)}(Jt);const Yt=Jt[W],Xt=Jt[G],zt=Jt[x];if(!zt)throw new Error(`Contract not found for parcel ${Jt[Z]}`);const Zt=await l.get(`/items/${_e}`,{params:{filter:{[ve]:{_eq:zt},[we]:{_eq:i}},fields:[we,$e,ge,Ee,De,Ae,Ne,Se]}});if(Zt.data.data&&0===Zt.data.data.length)throw new Error(`No invoice type found for the contract ${qt}`);const ea=Zt.data.data.find((e=>e[we]===i));if(!ea)throw new Error(`Cannot find payment information for ${i} in the contract ${qt}, please ensure that data for it has been entered and saved`);const ta=await l.get(`/items/${se}?filter[${V}]=${Xt}&sort[]=${R}`,{params:{fields:[j,ce,de,J,ue,me,fe]}});console.log(`[generateInvoice][parcel=${Jt[Z]}::invoice type=${i}] weight lots data=${JSON.stringify(ta.data.data)}`),function(e){if(!e||0===e.length)throw new Bt("No weight lots found for the selected parcel")}(ta.data.data);const aa=function(e){console.log("[evaluateWeights]");const t={};for(const a of e)t[a.method]||(console.log(`adding method ${a.method} to weightData object`),t[a.method]=[]),console.log(`adding lot ${a.id} to weightData.${a.method} array`),t[a.method.toString()].push(a);const a=[];for(const e of Object.keys(t)){if(!t[e]){console.log(`method=${e} does not exist in weightData object`);continue}console.log(`adding lots and other values to weights for method=${e}`);const o=c(t[e]);o&&a.push(o)}return a}(ta.data.data);let oa;if(oa||(oa=aa.find((e=>"Outturn"===e.method))),oa||(oa=aa.find((e=>"Inturn Final"===e.method))),oa||(oa=aa.find((e=>"Inturn"===e.method))),oa||(oa=aa.find((e=>"Estimated"===e.method))),oa||(oa=aa.find((e=>"Planned"===e.method))),!oa)throw new Error(`No weight lots with valid method found for parcel ${Jt[Z]}`);if(void 0===oa.dry_weight||null===oa.dry_weight||void 0===oa.wet_weight||null===oa.wet_weight||void 0===oa.moisture||null===oa.moisture||void 0===oa.dry_weight_uom||null===oa.dry_weight_uom||void 0===oa.wet_weight_uom||null===oa.wet_weight_uom||void 0===oa.method||null===oa.method)throw new Error(`One of the fields for the latest weight lots data is undefined for parcel ${Jt[Z]}`);const na=await l.get(`/items/${pt}?filter[${yt}]=${oa.dry_weight_uom}`,{params:{fields:[vt]}}),ra=await l.get(`/items/${pt}?filter[${_t}]=${oa.wet_weight_uom}`,{params:{fields:[wt]}});if(!na.data.data||!na.data.data[0]||!na.data.data[0][vt])throw new Error(`Dry weight uom not found for symbol ${oa.dry_weight_uom} for parcel ${Jt[Z]}`);if(!ra.data.data||!ra.data.data[0]||!ra.data.data[0][wt])throw new Error(`Wet weight uom not found for symbol ${oa.wet_weight_uom} for parcel ${Jt[Z]}`);const ia=na.data.data[0][vt],la=(ia.indexOf("dry"),ra.data.data[0][wt]),sa=(la.indexOf("wet"),await l.get(`/items/${ae}?filter[${V}]=${Yt}&sort[]=${R}`,{params:{fields:[j,oe,J,ne,re,le,ie]}}));console.log(`[generateInvoice][parcel=${Jt[Z]}::invoice type=${i}] assay lots data=${JSON.stringify(sa.data.data)}`),function(e){if(!e||0===e.length)throw new Bt("No assay lots found for the selected parcel")}(sa.data.data);const ca=function(e){var t;console.log("[evaluateAnalyticalAssay]");const a={};for(const t of e)a[t.method]||(a[t.method]={}),a[t.method][t.commodity]||(a[t.method][t.commodity]=[]),null!==t.lot_number?(1===a[t.method][t.commodity].length&&null===a[t.method][t.commodity][0].lot_number&&(a[t.method][t.commodity]=[]),a[t.method][t.commodity].push(t)):null===t.lot_number&&0===a[t.method][t.commodity].length&&a[t.method][t.commodity].push(t);console.log(`[evaluateAnalyticalAssay] group: ${JSON.stringify(a)}}`);const o={};for(const e in a){console.log(`[evaluateAnalyticalAssay] methodKey: ${e}, group[methodKey]: ${JSON.stringify(a[e])}`);for(const n in a[e]){console.log(`[evaluateAnalyticalAssay] commodityKey: ${n}, group[methodKey][commodityKey]: ${JSON.stringify(a[e][n])}`),o[e]=null!=(t=o[e])?t:{},o[e][n]={};const r=a[e][n].reduce(((e,t)=>e+t[ne]),0);console.log(`[evaluateAnalyticalAssay] totalDryWeight: ${r} from ${JSON.stringify(a[e][n])}`),o[e][n].analytical_assay=a[e][n].reduce(((e,t)=>e+t[re]*t[ne]),0)/(0!==r?r:1),console.log(`[evaluateAnalyticalAssay] analytical assay: ${o[e][n].analytical_assay}`),a[e][n].length>0&&(o[e][n][ie]=a[e][n][0][ie])}}return console.log(`[evaluateAnalyticalAssay] analyticalAssay: ${JSON.stringify(o)}`),o}(sa.data.data);let da;if(da||(da=ca.Outturn),da||(da=ca["Inturn Final"]),da||(da=ca.Inturn),da||(da=ca.Estimated),da||(da=ca.Planned),!da)throw new Error(`No assay lot data with a valid method found for parcel ${Jt[Z]}`);console.log(`[generateInvoice][parcel=${Jt[Z]}::invoice type=${i}] weight lots for invoice evaluation=${JSON.stringify(oa)}`),console.log(`[generateInvoice][parcel=${Jt[Z]}::invoice type=${i}] assay lots for invoice evaluation=${JSON.stringify(da)}`);const ua=await l.get(`/items/${pe}/${zt}`,{params:{fields:[he]}});!function(e){if(!e)throw new Error("Contract data not found, please ensure the selected contract still exists");if(!e[he])throw new Error("The selected contract does not have a set currency, please ensure that the currency field for the contract is not empty")}(ua.data.data);const ma=await l.get(`/items/${mt}/${ua.data.data.contract_currency}`,{params:{fields:[ft]}});!function(e){if(!e)throw new Error("Currency data not found, please ensure the selected currency still exists");if(!e[ft])throw new Error("The selected currency in the contract is not valid")}(ma.data.data);const fa=ma.data.data.code,pa=await l.get(`/items/${Te}?filter[${Oe}]=${zt}`,{params:{fields:["id",Ie,Pe,Me,Fe,je,Ve,Re,Je,Ue,ke]}});!function(e){if(!e||0===e.length)throw new Error("No commodity data found in selected contract for parcel");if(!e.every((e=>e[Ie])))throw new Error("The selected contract has an undefined commodity, please ensure that the 'Commodity' field for all commodites in the contract is not empty");if(!e.every((e=>e[Ue])))throw new Error("The selected contract has an undefined base price Uom for commodity, please ensure that the 'Base Price Uom' field for all commodites in the contract is not empty")}(pa.data.data),console.log(`[generateInvoice][parcel=${Jt[Z]}::invoice type=${i}] contract commodity data=${JSON.stringify(pa.data.data)}`);const ha=[],ya=[];let _a="";for(const{id:e,commodity:r,primary_commodity:c,price_method:p,quotational_periods:V,price_per_uom:R,penalty_per_uom:J,treatment_charge_per_uom:B}of pa.data.data){const x=await l.get(`/items/${ct}/${r}`,{params:{fields:[dt,ut,j]}});if(Gt(x.data.data,r),!da[x.data.data.code]){console.log(`[generateInvoice][parcel=${Jt[Z]}::invoice type=${i}::comm=${x.data.data[dt]}] no analytical assay for commodity ${x.data.data.code} found, skipping...`);continue}if(c&&(_a=x.data.data[dt]),null!==V){const r=V;console.log(`[generateInvoice][parcel=${Jt[Z]}::invoice type=${i}::comm=${x.data.data[dt]}] qp=${JSON.stringify(r)}`);const c=Array.isArray(r)?r.find((e=>e.default)):null;if(!c)throw new Error(`No default quotational period found for commodity ${x.data.data.code}`);const C=r.filter((e=>!e.default)).map((e=>`${e.qp_period} ${e.qp_code}`)),J=[`${c.qp_period} ${c.qp_code}`,...C].join(", ");console.log(`[generateInvoice][parcel=${Jt[Z]}::invoice type=${i}::comm=${x.data.data[dt]}] evaluate payable assay for ${x.data.data.code} with an analytical assay=${null==(t=da[x.data.data.code])?void 0:t.analytical_assay}`);const q=await l.get(`/items/${Be}?filter[${Ke}]=${e}`,{params:{fields:[Qe,Ye,Xe,ze,Ze,et,tt,xe,qe,We,Ge,Le,He]}}),{payableAssay:W,expression:G}=await g(null==(a=da[x.data.data.code])?void 0:a.analytical_assay,null==(o=da[x.data.data.code])?void 0:o.assay_uom,q.data.data);let Y,X,z="";if("Final"!==i){const e={invoice_type:i,days:ea[Ae],day_type:ea[Ne],ref_day:ea[Se]};if(!e)throw new Error(`No provisional pricing found for invoice type ${i} for parcel ${Jt[Z]}`);let t;switch(e.ref_day){case"Arrival Date":t=null!=(n=Jt[L])?n:Jt[H],z="Actual Arrival Date from the Parcel form";break;case"B/L Date":t=null!=(s=Jt[K])?s:Jt[Q],z="B/L Date from the Parcel form";break;case"Invoice Date":t=null!=(d=Jt[K])?d:Jt[Q],z="B/L Date (or Estimated Date) as Invoice Date";break;case"Estimated Shipment Date":t=Jt[Q],z="Estimated Shipment Date from the Parcel form";break;default:throw new Error(`Invalid reference day for invoice pricing: ${e.ref_day}; please contact Navarch for support`)}if(null==t)throw new Error(`Reference day for invoice pricing ${z} is empty`);X=new Date(t);const a=parseInt(e.days),o=e.day_type;switch(o){case"Business Day(s)":Y=S(X,a,!0);break;case"Calendar Day(s)":Y=new Date(X.valueOf()),Y.setDate(Y.getDate()-a);break;default:throw new Error(`Invalid day type ${o} from contract ${qt} for invoice type ${i}`)}}else{let e;switch(c.qp_code){case"MAMA":e=new Date(null!=(u=Jt[L])?u:Jt[H]),z="Actual Arrival Date";break;case"MOSS":case"MOS":case"MOAS":e=new Date(null!=(m=Jt[K])?m:Jt[Q]),z="Estimated Shipment Date";break;default:throw new Error(`Unsupported QP code ${c.qp_code} in contract ${qt}, currently only supports MAMA, MOS, MOSS, and MOAS`)}if(null==e)throw new Error(`Invalid reference day for ${z} from contract ${qt} for commodity ${x.data.data[dt]}`);if(Y=O(e,c.qp_period),Y.valueOf()>Date.now())throw new Error(`Start date for provisional pricing ${Y} (${z}) from contract ${qt} for commodity ${x.data.data[dt]} based on default QP has not occurred yet`);if(X=I(e,c.qp_period),X.valueOf()>Date.now())throw new Error(`End date for provisional pricing ${X} (${z}) from contract ${qt} for commodity ${x.data.data[dt]} based on default QP has not occurred yet`)}console.log(`[generateInvoice][parcel=${Jt[Z]}::invoice type=${i}::comm=${x.data.data[dt]}] provisional pricing date range: ${Y.toString()} - ${X.toString()}`);const ee=await Wt(x.data.data.code,x.data.data[j],p,Y,X);let ae;const oe=await l.get(`/items/${at}?filter[${Ke}]=${e}`,{params:{fields:[Ye,Xe,ze,Ze,ot,nt,rt,et]}});void 0!==oe.data.data&&null!==oe.data.data&&oe.data.data.length>0&&(ae=await b(ee,null==(h=da[x.data.data.code])||h.assay_uom,oe.data.data));const ne=await l.get(`/items/${pt}/${R}`,{params:{fields:[ht]}});Lt(ne.data.data,x.data.data[dt]);const re=ne.data.data[ht];let ie;if(ae){if(!B)throw new Error(`Treatment Charge Rate UOM is not defined for commodity ${x.data.data[dt]}`);const e=await l.get(`/items/${pt}/${B}`,{params:{fields:[ht]}});Ht(e.data.data,x.data.data[dt]),ie=e.data.data[ht]}const le=await k(re,oa.dry_weight_uom,null==(y=da[x.data.data.code])?void 0:y.assay_uom);console.log(`[generateInvoice][parcel=${Jt[Z]}::invoice type=${i}::comm=${x.data.data[dt]}] payableMetalConversion for commodity ${x.data.data.name}: ${JSON.stringify(le)}`),le.initialConversion=1===(null==(_=le.initialConversion)?void 0:_.conversionFactor)?void 0:le.initialConversion,le.finalConversion=1===(null==(v=le.finalConversion)?void 0:v.conversionFactor)?void 0:le.finalConversion,ha.push({commodity:x.data.data.name,analytical_assay:f(null==(w=da[x.data.data.code])?void 0:w.analytical_assay,4),deduction_expression:G,payable_assay:f(W,4),assay_uom:null==($=da[x.data.data.code])?void 0:$.assay_uom,payable_metal:f(oa.dry_weight*(null!=(D=null==(E=le.initialConversion)?void 0:E.conversionFactor)?D:1)*(null!=W?W:1)*(null!=(T=null==(N=le.finalConversion)?void 0:N.conversionFactor)?T:1)*("%"!==(null==(P=da[x.data.data.code])?void 0:P.assay_uom)?1:.01),4),payable_metal_expression:`${f(oa.dry_weight,4)}${oa.dry_weight_uom}${le.initialConversion?` * ${f(le.initialConversion.conversionFactor,4)}${le.initialConversion.conversionUom}`:""} * ${f(null!=W?W:1,4)}${"%"!==(null==(M=da[x.data.data.code])?void 0:M.assay_uom)?`${null==(U=da[x.data.data.code])?void 0:U.assay_uom}`:" / 100"}${le.finalConversion?` * ${f(le.finalConversion.conversionFactor,4)}${le.finalConversion.conversionUom}`:""}`,payable_metal_uom:re,qp:J,qp_start_date:A(Y),qp_end_date:A(X),qp_date_range:`${A(Y)} - ${A(X)}`,price_method:p,price_rate:f(ee,4),price_per_uom:re,price:f(oa.dry_weight*(null!=(te=null==(F=le.initialConversion)?void 0:F.conversionFactor)?te:1)*(null!=W?W:1)*(null!=(be=null==(ye=le.finalConversion)?void 0:ye.conversionFactor)?be:1)*("%"!==(null==(Ce=da[x.data.data.code])?void 0:Ce.assay_uom)?1:.01)*ee),treatment_charge:ae?{rate:f(ae.baseTreatmentCharge,4),discount:f((null!=($t=ae.baseTreatmentCharge)?$t:0)-(null!=(gt=ae.finalValue)?gt:0),4),final_rate:f(ae.finalValue,4),per_uom:ie,final_amount:f(oa.dry_weight*(null!=(Et=ae.finalValue)?Et:1))}:void 0,final_total:f(oa.dry_weight*(null!=(bt=null==(Dt=le.initialConversion)?void 0:Dt.conversionFactor)?bt:1)*(null!=W?W:1)*(null!=(Ot=null==(Tt=le.finalConversion)?void 0:Tt.conversionFactor)?Ot:1)*("%"!==(null==(It=da[x.data.data.code])?void 0:It.assay_uom)?1:.01)*ee-(ae?1:0)*(oa.dry_weight*(null!=(kt=null==ae?void 0:ae.finalValue)?kt:1)))})}const q=await l.get(`/items/${it}?filter[${Ke}]=${e}`,{params:{fields:[Ye,Xe,ze,Ze,lt,st,et]}});if(q.data.data.length>0){if(null===J)throw new Error(`Please fill in the field for Penalty Per UOM in contract ${qt} for commodity ${x.data.data[dt]}`);const e=await l.get(`/items/${pt}/${J}`,{params:{fields:[ht]}});Kt(e.data.data,x.data.data[dt]);const t=e.data.data[ht],{penalty:a,expression:o,bracket:n}=await C(null==(Ft=da[x.data.data.code])?void 0:Ft.analytical_assay,q.data.data,fa,t);console.log(`[generateInvoice][parcel=${Jt[Z]}::invoice type=${i}::comm=${x.data.data[dt]}] evaluated penalty with an analytical assay=${null==(jt=da[x.data.data.code])?void 0:jt.analytical_assay}, penaltyRate=${null==n?void 0:n.rate}, finalPenaltyRate=${a}, expression='${o}'`),ya.push({commodity:x.data.data.name,analytical_assay:f(null==(Vt=da[x.data.data.code])?void 0:Vt.analytical_assay,4),deduction_expression:o,assay_uom:null==(Rt=da[x.data.data.code])?void 0:Rt.assay_uom,penalty_rate:f(null==n?void 0:n.rate,4),penalty_per_uom:t,final_penalty_rate:f(a,4),final_penalty:f((null!=a?a:1)*oa.dry_weight)})}}console.log(`[generateInvoice][parcel=${Jt[Z]}::invoice type=${i}] evaluated commodities=${JSON.stringify(ha)}`),console.log(`[generateInvoice][parcel=${Jt[Z]}::invoice type=${i}] evaluated penalties${JSON.stringify(ya)}`);const va=ha.reduce(((e,t)=>e+p(t.price)),0),wa=ha.reduce(((e,t)=>{var a;return e+p(null==(a=t.treatment_charge)?void 0:a.final_amount)}),0),$a=ya.reduce(((e,t)=>e+p(t.final_penalty)),0);console.log(`[generateInvoice][parcel=${Jt[Z]}::invoice type=${i}] TOTAL_REVENUE=${va}, TOTAL_TREATMENT_CHARGE=${wa}, TOTAL_PENALTIES=${$a}`);let ga,Ea=0;const Da=!!Jt[ee];Da&&(Ea=Jt[ee].reduce(((e,t)=>e+t.amount),0),ga={adjustments:Jt[ee].map((e=>({description:e.description,amount:f(e.amount)}))),total_adjustments:f(Ea)});const ba=ea[$e],Ca=va-wa-$a+Ea,Aa=null!=ba?Ca*ba/100:void 0,Na=await l.get(`/items/${Ct}/${Jt[q]}`,{params:{fields:[At]}});Qt(Na.data.data);const Sa=Jt[Y];let Ta;Sa&&(Ta=await l.get(`/items/${Nt}/${Sa}`,{params:{fields:[St]}}),function(e){if(console.log("[validateVessel]"),!e)throw new Error("Vessel for parcel not found");if(!e[St])throw new Error("No name defined for vessel of the selected parcel")}(Ta.data.data));let Oa=(await l.get(`/items/${Pt}?filter[${Mt}]=${r}`,{params:{fields:["id",Ut]}})).data.data.reduce(((e,t)=>e+(t[Ut]?1:0)),0)+1,Ia=r;const Pa=Oa.toString().padStart(2,"0"),Ma=(Jt[Z],Ia.toString().padStart(2,"0")),Ua={Counterparty:Na.data.data[At],Vessel:Ta?Ta.data.data[St]:"Vessel TBA","Shipment Date":Jt[K]?A(new Date(Jt[K])):Jt[Q]?A(new Date(Jt[Q])):"N/A","Arrival Date":Jt[L]?A(new Date(Jt[L])):Jt[H]?A(new Date(Jt[H])):"N/A",Status:Jt[K]?"Unfinalised":"Planned",Revision:"Valuation",Invoice:`${i}:Valuation`,Parcel:`${Jt[Z]} (#${Ma})`,"Invoice Due Date":A(e.dueDate),"Dry Weight":`${f(oa.dry_weight,4)} ${oa.dry_weight_uom}`,"Total Revenues USD":f(va),"Total Penalties USD":f($a+wa),...xt(ha,oa.dry_weight),"Total Adjustments USD":Da?ga.total_adjustments:"0.00","Parcel Value USD":f(Ca),"Parcel Payable Value(Below Line) USD":f(Aa),"Payments USD":"To Be Completed","Due Total":"To Be Completed"};return console.log(`[generateInvoice][parcel=${Jt[Z]}::invoice type=${i}] generated forecast invoice=${JSON.stringify(Ua)}`),Ua}catch(t){if(t instanceof Bt)return void console.error(`[generateInvoice][parcel=${e.parcelId}::invoice type=${e.invoiceType}]Non-fatal error: ${t.message}`);throw t}}(e)))));a("input",o),console.log(`[generateCashflow] cashflow response: ${JSON.stringify(o)}`),i.value=!1}catch(e){r.value=e.message}finally{i.value=!1}},viewDoc:function(e){const a=null!=e?e:t.value.doc_name;console.log(`[viewDoc] doc name: ${a}`);const o=`/display-doc?filepath=${encodeURIComponent(`/data/uploads/${a}.pdf`)}`;window.open(o)},failureReason:r};function xt(e,t){return e.map((e=>{var t,a,o;return{[`${e.commodity} Payable Metal (${e.payable_metal_uom})`]:e.payable_metal,[`${e.commodity} Revenue (USD)`]:e.price,[`${e.commodity} QP Month`]:qt(new Date(e.qp_start_date)),[`${e.commodity} Price (USD/${e.price_per_uom})`]:e.price_rate,[`${e.commodity} TC (USD)`]:null==(t=e.treatment_charge)?void 0:t.final_amount,[`${e.commodity} TC (USD/${null==(a=e.treatment_charge)?void 0:a.per_uom})`]:null==(o=e.treatment_charge)?void 0:o.final_rate}})).reduce(((e,t)=>({...e,...t})),{})}function qt(e){return`${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][e.getMonth()]} ${e.getFullYear()}`}async function Wt(e,t,a,o,n,r=1){if(m(e))throw new Error("Commodity is not defined for price calcualtion");if(m(a))throw new Error(`Price method for commodity ${e} is not defined for price calcualtion`);if(m(o))throw new Error(`Start date is not defined for price calcualtion with ${a} has not been properly defined, please ensure that contract QP is properly defined`);if(m(n))throw new Error(`End date is not defined for price calcualtion with ${a} has not been properly defined, please ensure that contract QP is properly defined`);const i=await l.get(`/items/navarch_commodity_price?filter[_and][0][price_method][_eq]=${a}&filter[_and][0][currency][_eq]=${r}&filter[_and][1][date][_between][0]=${N(o)}&filter[_and][1][date][_between][1]=${N(n)}&sort=date`,{params:{fields:[Tt,Ot,It,"price_method"]}});if(!i||!i.data||!i.data.data)throw new Error(`Failed to get commodity prices for commodity ${e} between ${N(o)} and ${N(n)}. This may be a network issue, try again later`);if(0===i.data.data.length)throw new Error(`No commodity prices found for commodity ${e} between ${N(o)} and ${N(n)}`);if(!s.value.id)throw new Error("Please save the Cashflow form first before generating the cashflow doc");const c=await l.get("/items/navarch_forecast_price",{params:{filter:{[jt]:t,cashflow_forecast_id:s.value[j]},fields:[Vt,jt,Rt,Jt]}});!function(e){if(!e||!Array.isArray(e)||0===e.length)throw new Error("No forecast price found, please ensure prices have been provided")}(c.data.data),function(e,t){const a=new Date(e[e.length-1][It]),o=new Date(t[0][Rt]),n=new Date(o.valueOf()-F);if(a<n)throw new Error(`There is a gap between the latest actual price date ${N(a)} and the earliest forecast date ${N(o)}, please provide a forecast value for the missing date`)}(i.data.data,c.data.data);const d=i.data.data.reduce(((e,t)=>{if(!t[Ot]&&!t[Tt])throw new Error(`Commodity for ${a} on the date of ${t[It]} does not have a price, please contact Navarch for assistance`);let o=Number(t[Ot]);if(isNaN(o)&&(o=Number(t[Tt])),isNaN(o))throw new Error(`The commodity price for Price Method #${a} for the date of ${t[It]} is not a valid number, please contact Navarch for assistance`);return e+o}),0),u=function(e,t){let a=0,o=new Date(e.getTime());for(;o<=t;)0!==o.getDay()&&6!==o.getDay()&&a++,o.setDate(o.getDate()+1);return a}(new Date(c.data.data[0][Rt]),new Date(c.data.data[0][Jt]));return(d+c.data.data[0][Vt]*u)/(i.data.data.length+u)}function Gt(e,t){var a,o,n;if(console.log("[validateCommodityData]"),!e)throw new Error("commodity data response is null");if(!e[dt])throw new Error(`Commodity name for commodity ${null!=(a=e[ut])?a:t} is undefined, please contact Navarch for assistance`);if(!e[ut])throw new Error(`Commodity code for commodity ${null!=(o=e[dt])?o:t} is not defined, please contact Navarch for assistance`);if(!e[j])throw new Error(`Commodity ID for commodity ${null!=(n=e[dt])?n:t} is not defined, please contact Navarch for assistance`)}function Lt(e,t){if(!e)throw new Error(`Price per UOM for commodity ${t} is not a valid`);if(!e[ht])throw new Error(`Price per UOM for commodity ${t} does not have a valid unit symbol, please contact Navarch for assistance`)}function Ht(e,t){if(!e)throw new Error(`Treatment charge per UOM for commodity ${t} is not a valid`);if(!e[ht])throw new Error(`Treatment charge per UOM for commodity ${t} does not have a valid unit symbol, please contact Navarch for assistance`)}function Kt(e,t){if(!e)throw new Error(`Penalty per UOM for commodity ${t} is not a valid`);if(!e[ht])throw new Error(`Penalty per UOM for commodity ${t} does not have a valid unit symbol, please contact Navarch for assistance`)}function Qt(e){if(console.log("[validateCounterparty]"),!e)throw new Error("Counterparty for parcel not found");if(!e[At])throw new Error("No codename defined for counterparty of the selected parcel")}}});const $={key:0},g={key:1};w.render=function(e,t,a,o,n,h){const y=r("v-button"),_=r("v-notice");return i(),l(s,null,[c(' <input :value="value" @input="handleChange($event.target.value)" /> '),c(" create a button only interface for Directus"),e.value?(i(),l("div",g,[d(y,{class:"margin-top-16px",onClick:t[1]||(t[1]=()=>e.viewDoc())},{default:u((()=>[m("View Cashflow ")])),_:1})])):(i(),l("div",$,[d(y,{class:"margin-top-16px",onClick:t[0]||(t[0]=()=>e.generateCashflow()),loading:e.isGeneraingDoc},{default:u((()=>[m("Generate Cashflow")])),_:1},8,["loading"]),e.failureReason?(i(),f(_,{key:0},{default:u((()=>[m(p(e.failureReason),1)])),_:1})):c("v-if",!0)]))],2112)},w.__file="src/interface.vue";var E=t({id:"navarch-docgen-cashflow",name:"Navarch Cashflow Generator Button",icon:"receipt_long",description:"This is my custom interface for Navarch's Cashflow Doc!",component:w,options:null,types:["json"],group:"standard"});export{E as default};
