import{useApi as e,defineInterface as t}from"@directus/extensions-sdk";import{defineComponent as a,ref as o,inject as n,resolveComponent as r,openBlock as i,createElementBlock as l,Fragment as s,createCommentVNode as d,createVNode as c,withCtx as u,createTextVNode as m,createBlock as f,toDisplayString as h}from"vue";var p=(e=>(e.BRACKET="Brackets",e.MIN_DEDUCTION="Minimum Deduction",e.MAX_CAP="Maximum Cap",e))(p||{}),_=(e=>(e.PERCENTAGE="Percentage",e.FRACTIONAL="Fractional",e))(_||{}),y=(e=>(e.WET_WEIGHT="wet_weight",e.MOISTURE="moisture",e.DRY_WEIGHT="dry_weight",e))(y||{}),v=(e=>(e.METHOD="method",e.WET_WEIGHT_UOM="wet_weight_uom",e.MOISTURE_UOM="moisture_uom",e.DRY_WEIGHT_UOM="dry_weight_uom",e))(v||{}),g=a({props:{value:{type:Object,default:null}},emits:["input"],setup(t,{emit:a}){const r=o(""),i=o(!1),l=e(),s=n("values",o({}));function d(e){if(console.log("[evaluateWeightData]"),0===e.length)return;const t=u(e,y.DRY_WEIGHT),a=u(e,y.WET_WEIGHT);return{method:c(e,v.METHOD),lots:e,dry_weight_uom:c(e,v.DRY_WEIGHT_UOM),wet_weight_uom:c(e,v.WET_WEIGHT_UOM),dry_weight:t,wet_weight:a,moisture:(a-t)/a*100}}function c(e,t){if(console.log("[getFirstValueAsSharedValue]"),0!==e.length)return console.log(`lots[0][${t.toString()}]=${e[0][t.toString()]}`),e[0][t.toString()]}function u(e,t){return console.log("[evaluateAggregateValue]"),e.reduce(((e,a)=>{var o;return e+(null!=(o=a[t.toString()])?o:0)}),0)}function m(e){return null==e}function f(e,t=2,a=!0){if(console.log("[formatNumber]"),isNaN(e)||null===e)return"-";const o=Math.round(e*Math.pow(10,t))/Math.pow(10,t),[n,r]=o.toString().split("."),i=n.replace(/\B(?=(\d{3})+(?!\d))/g,",");if(!r&&!a)return i;return`${i}.${(null!=r?r:"").padEnd(t,"0")}`}function h(e){if(console.log("[parseNumber]"),!e)return 0;const t=parseFloat(e.replace(/,/g,""));return console.log(`[parseNumber] number: ${e} to ${t}`),t}function g(e,t){var a;if(console.log("[findBracket]"),1===e.length){if(t>=(null!=(a=e[0].lower_threshold)?a:0)&&(null===e[0].upper_threshold||void 0===e[0].upper_threshold||t<e[0].upper_threshold))return e[0];throw new Error(`[findBracket] value=${t} does not fall within the only bracket: ${JSON.stringify(e[0])}`)}return e.find((e=>{var a,o;const n=t>(null!=(a=e.lower_threshold)?a:0)&&(null===e.upper_threshold||void 0===e.upper_threshold||t<e.upper_threshold)||e.lower_threshold_inclusive&&t===(null!=(o=e.lower_threshold)?o:0)||e.upper_threshold_inclusive&&t===e.upper_threshold;return console.log(`[findBracket] value=${t} for bracket: ${JSON.stringify(e)}? match=${!!n}`),n}))}function w(e,t){var a,o,n,r,i,l,s;console.log("[evaluateFinalValueFromBrackets]");const d=(e-(null!=(a=t.initial_adjustment)?a:0)*(null!=(o=t.initial_adjustment_conversion_factor)?o:1))*(null!=(n=t.rate)?n:0)*(t.rate_type===_.PERCENTAGE?.01:1)+(null!=(r=t.final_adjustment)?r:0)*(null!=(i=t.final_adjustment_conversion_factor)?i:1);switch(t.bracket_type){case p.MIN_DEDUCTION:if(null===t.comparator||void 0===t.comparator)throw new Error("Minimum deduction not found");const a=t.comparator*(null!=(l=t.comparator_conversion_factor)?l:1);return e-d<a?e-a:d;case p.MAX_CAP:if(null===t.comparator||void 0===t.comparator)throw new Error("Maximum cap not found");const o=t.comparator*(null!=(s=t.comparator_conversion_factor)?s:1);return d>o?o:d;case p.BRACKET:return d;default:throw new Error(`bracket type ${t.bracket_type} is not supported`)}}async function $(e,t,a){var o,n,r,i,l,s,d,c;if(console.log("[evaluatePayableAssay]"),!a||0===a.length)return{};const u=g(a,e);if(!u)throw new Error(`Bracket not found for value ${e}, please ensure the brackets for all commodities defined in the contract cover all range of possible values for payable assays`);let m,h,y=1;u.initial_adjustment_uom&&void 0!==u.initial_adjustment_uom&&null!==u.initial_adjustment_uom&&u.initial_adjustment_uom!==t&&(y=await M(u.initial_adjustment_uom,t),m=U(u.initial_adjustment_uom,t));let v,$=1;u.bracket_type===p.MAX_CAP?(h=null!=(o=u.maximum_cap)?o:0,void 0!==u.maximum_cap_uom&&null!==u.maximum_cap_uom&&u.maximum_cap_uom!==t&&($=await M(u.maximum_cap_uom,t),v=U(u.maximum_cap_uom,t))):u.bracket_type===p.MIN_DEDUCTION&&(h=null!=(n=u.minimum_deduction)?n:0,void 0!==u.minimum_deduction_uom&&null!==u.minimum_deduction_uom&&u.minimum_deduction_uom!==t&&($=await M(u.minimum_deduction_uom,t),v=U(u.minimum_deduction_uom,t)));const E=w(e,{bracket_type:u.bracket_type,rate:null!=(r=u.rate)?r:1,rate_type:null!=(i=u.rate_type)?i:_.FRACTIONAL,initial_adjustment:null!=(l=u.initial_adjustment)?l:0,initial_adjustment_conversion_factor:y,comparator:h,comparator_conversion_factor:$});let b="";const D=void 0!==u.initial_adjustment&&null!==u.initial_adjustment;if(u.bracket_type===p.BRACKET)b=`${D?"(":""}${f(e,4)}${null!=t?t:""}${D?` - ${f(u.initial_adjustment,4)}${null!=(s=u.initial_adjustment_uom)?s:`${null!=t?t:""}`}`:""}${D&&1!==y?` * ${f(y,4)}${m}`:""}${D?")":""} * ${f(u.rate,4)}${u.rate_type===_.PERCENTAGE?"/100":`/${f(1,4)}`}`;else if(u.bracket_type===p.MIN_DEDUCTION){b=E===e-h*$?`${f(e,4)}${null!=t?t:""} - ${f(h,4)}${null!=t?t:""}${1!==$?` * ${f($,4)}${v}`:""}`:`${D?"(":""}${f(e,4)}${null!=t?t:""}${D?` - ${f(u.initial_adjustment,4)}${null!=(d=u.initial_adjustment_uom)?d:`${null!=t?t:""}`}`:""}${D&&1!==y?` * ${f(y,4)}${m}`:""}${D?")":""} * ${f(u.rate,4)}${u.rate_type===_.PERCENTAGE?"/100":`/${f(1,4)}`}`}else{if(u.bracket_type!==p.MAX_CAP)throw new Error(`[buildPayableAssayExpression] unknown bracket method: ${u.bracket_type}`);b=E===h*$?`${f(h,4)}${null!=t?t:""}${1!==$?` * ${f($,4)}${v}`:""}`:`${D?"(":""}${f(e,4)}${null!=t?t:""}${D?` - ${f(u.initial_adjustment,4)}${null!=(c=u.initial_adjustment_uom)?c:`${null!=t?t:""}`}`:""}${D&&1!==y?` * ${f(y,4)}${m}`:""}${D?")":""} * ${f(u.rate,4)}${u.rate_type===_.PERCENTAGE?"/100":`/${f(1,4)}`}`}return{payableAssay:E,expression:b}}console.log("[main] formValues=",s);const E="above the lower threshold, plus",b="below the upper threshold, minus";function D(e,t,a){var o,n,r,i;if(console.log("[evaluateTreatmentCharge]"),!a||!a.length)return;const l=g(a,e);if(!l)throw new Error(`Bracket not found for value ${e}, please ensure the brackets for all commodities defined in the contract cover all range of possible values for treatment charge`);let s=0,d=1;if(l.use_btc)d=0,s=0;else if(d=null!=(o=l.rate)?o:1,l.for_every_unit===E)s=null!=(n=l.lower_threshold)?n:0;else{if(l.for_every_unit!==b)throw new Error(`[evaluateTreatmentCharge] unknown for_every_unit: ${l.for_every_unit}`);s=null!=(r=l.upper_threshold)?r:0}const c={bracket_type:p.BRACKET,rate:d,rate_type:_.FRACTIONAL,initial_adjustment:s,final_adjustment:null!=(i=l.base_treatment_charge)?i:0};return console.log(`[evaluateTreatmentCharge] bracketForEvaluation: ${JSON.stringify(c)}`),{finalValue:w(e,c),baseTreatmentCharge:l.base_treatment_charge}}function C(e,t,a,o){var n,r,i;if(console.log("[evaluatePenalty]"),!t||!t.length)return{};const l=g(t,e);if(!l)throw new Error(`[evaluatePenalty] Bracket not found for value ${e}, please ensure the brackets for all commodities defined in the contract cover all range of possible values for penalty`);let s=0,d=1;if(l.no_penalty)d=0,s=0;else if(d=null!=(n=l.rate)?n:1,l.for_every_unit===E)s=null!=(r=l.lower_threshold)?r:0;else{if(l.for_every_unit!==b)throw new Error(`[evaluatePenalty] unknown for_every_unit: ${l.for_every_unit}`);s=null!=(i=l.upper_threshold)?i:0}const c={bracket_type:p.BRACKET,rate:d,rate_type:_.FRACTIONAL,initial_adjustment:s,final_adjustment:0};console.log(`[evaluatePenalty] bracketForEvaluation: ${JSON.stringify(c)}`);const u=w(e,c),m=null!=c.initial_adjustment;let h="";return h=l.rate&&0!==l.rate?`${m?"(":""}${f(e,4)}${m?` - ${f(s,4)})`:""} / ${f(1,4)} * ${null!=a?a:""} ${f(d,4)}/${null!=o?o:""}`:"No penalty",{penalty:u,expression:h,bracket:l}}function A(e){const t=e.getDate(),a=e.getMonth(),o=e.getFullYear();return`${t} ${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][a]} ${o}`}function T(e,t=!0){const a=e.getMonth()+1,o=e.getDate();return`${e.getFullYear()}${t?"-":" "}${a<10?"0":""}${a}${t?"-":" "}${o<10?"0":""}${o}`}function N(e,t,a=!1){const o=new Date(e.valueOf());let n=t-(a?1:0);for(;n>0;)o.setDate(o.getDate()-1),0!==o.getDay()&&6!==o.getDay()&&(n-=1);return o}function S(e,t,a=!1){const o=new Date(e.valueOf());let n=t-(a?1:0);for(;n>0;)o.setDate(o.getDate()+1),0!==o.getDay()&&6!==o.getDay()&&(n-=1);return o}function I(e,t){const a=new Date(e.valueOf());return a.setMonth(a.getMonth()+t,1),a}function O(e,t){const a=new Date(e.valueOf());return a.setMonth(a.getMonth()+t+1,0),a}async function P(e,t){if(e===t)return 1;const a=await l.get(`/items/${ut}?filter[${mt}]=${e}`,{params:{fields:[yt]}});if(0===a.data.data.length||null===a.data.data[0][yt]||void 0===a.data.data[0][yt])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for source weight unit ${e}. Ensure that the symbol is correct and is a weight unit symbol`);const o=await l.get(`/items/${ut}?filter[${mt}]=${t}`,{params:{fields:[yt]}});if(0===o.data.data.length||null===o.data.data[0][yt]||void 0===o.data.data[0][yt])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for the target weight unit ${t}. Ensure that the symbol is correct and is a weight unit symbol`);const n=parseFloat(a.data.data[0][yt]);if(isNaN(n))throw new Error(`[getWeightUnitConversionValue] source weight unit ${e} conversion value=${n} is not a number`);const r=parseFloat(o.data.data[0][yt]);if(isNaN(r))throw new Error(`[getWeightUnitConversionValue] target weight unit ${t} conversion value=${r} is not a number`);return n/r}async function M(e,t){if(null==e||null==t)return 1;if(e===t)return 1;const a=await l.get(`/items/${vt}?filter[${gt}]=${e}`,{params:{fields:[wt]}});if(0===a.data.data.length||void 0===a.data.data[0][wt]||null===a.data.data[0][wt])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for source weight unit ${e}. Ensure that the symbol is correct and is a weight unit symbol`);const o=await l.get(`/items/${vt}?filter[${gt}]=${t}`,{params:{fields:[wt]}});if(0===o.data.data.length||void 0===o.data.data[0][wt]||null===o.data.data[0][wt])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for the target weight unit ${t}. Ensure that the symbol is correct and is a weight unit symbol`);const n=parseFloat(a.data.data[0][wt]);if(isNaN(n))throw new Error(`[getAssayUnitConversionValue] source weight unit ${e} conversion value=${n} is not a number`);console.log(`[getAssayUnitConversionValue] source unit conversion value=${n}`);const r=parseFloat(o.data.data[0][wt]);if(isNaN(r))throw new Error(`[getAssayUnitConversionValue] target weight unit ${e} conversion value=${r} is not a number`);return console.log(`[getAssayUnitConversionValue] target unit conversion value=${r}`),console.log("[getAssayUnitConversionValue] returning "+n/r),n/r}function U(e,t){if(void 0===e||void 0===t||null===e||null===t)return;const a=e.split("/"),o=t.split("/");if(a.length>2||o.length>2)throw new Error(`[getConversionUnit] sourceUnit=${e} and targetUnit=${t} must be in the format of 'unit1/unit2', an extra '/' was found`);if(1===a.length&&1===o.length)return`${o[0]}/${a[0]}`;if(1===a.length){const e=o[0]===a[0]?"":`${o[1]}(${a[1]})`,t=o[1];return""===t?e:`${e}/${t}`}if(1===o.length){const e=a[1],t=a[0]===o[0]?"":`${a[1]}(${o[0]})`;return""===t?e:`${e}/${t}`}{const e=a[0]===o[0],t=a[1]===o[1],n=e||""===a[0],r=e||""===o[0],i=t||""===a[1],l=t||""===o[1],s=!i&&!r,d=!n&&!l,c=`${i?"":a[1]}${s?"(":""}${r?"":`${o[0]}`}${s?")":""}`,u=`${n?"":a[0]}${d?"(":""}${l?"":`${o[1]}`}${d?")":""}`;return""===u?c:`${c}/${u}`}}async function k(e,t,a){const o=await l.get(`/items/${ut}?filter[${ft}]=${t}`,{params:{fields:[mt]}});if(!o.data.data||!o.data.data[0]||!o.data.data[0][mt])throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] Dry weight uom not found for symbol ${t}`);const n=o.data.data[0][mt];if("%"===a){if(n===e)return{};const t=U(n,e);if(!t)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] no conversion unit found for dry weight unit ${n} and target weight unit ${e}`);return{finalConversion:{conversionFactor:await P(n,e),conversionUom:t}}}let r=a.split("/");if(1==r.length){const e=await async function(e){const t=await l.get(`/items/${vt}`,{params:{fields:[gt,$t],filter:{[$t]:{_nnull:!0},[gt]:{_eq:e}}}});if(200!==t.status||!t.data||0===t.data.data.length)throw new Error("[getAssayUnitComposition] no assay units found with composition");return t.data.data[0][$t]}(a);if(!e)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${a} does not have a composition`);r=e.split("/")}if(r.length>2||0===r.length)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${a} is not in the format of 'unit1/unit2'`);const i=r[0],s=r[1],d={};if(s!==n){const e=U(n,s);if(!e)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] no conversion unit found for dry weight unit ${n} and assay unit denominator unit ${s}`);d.initialConversion={conversionFactor:await P(n,s),conversionUom:e}}if(i!==e){const t=U(i,e);if(!t)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] no conversion unit found for target weight unit ${e} and assay unit numerator unit ${i}`);d.finalConversion={conversionFactor:await P(i,e),conversionUom:t}}return d}const F="id",j="foreign_key",V="lot_number",R="method",B="navarch_parcel",x="contract",J="counterparty",q="assay_results",W="weight_result",G="actual_arrival_date",L="estimated_arrival_date",H="bl_date",K="estimated_shipment_date",Y="vessel",Q="origin",X="destination",z="shipment_code",Z="adjustments",ee="parcel_finalisation_date",te="navarch_assay_lot",ae="commodity",oe="dry_weight",ne="final_assay",re="assay_uom",ie="lot_number",le="navarch_weight_lot",se="dry_weight",de="wet_weight",ce="moisture",ue="wet_weight_uom",me="dry_weight_uom",fe="navarch_contract",he="contract_currency",pe="navarch_contract_payment_information",_e="related_contract",ye="invoice_type",ve="pay_percent",ge="pa_days",we="pa_day_type",$e="pa_ref_day",Ee="pa_final_inv_ref_day",be="pp_days",De="pp_day_type",Ce="pp_ref_day",Ae="navarch_commodity_in_contract",Te="contract",Ne="commodity",Se="primary_commodity",Ie="price_method",Oe="price_per_uom",Pe="treatment_charge_per_uom",Me="quotational_periods",Ue="payable_assay_rates",ke="treatment_charge_rates",Fe="penalty_rates",je="penalty_per_uom",Ve="navarch_payable_assay_bracket",Re="initial_adjustment",Be="initial_adjustment_uom",xe="minimum_deduction",Je="minimum_deduction_uom",qe="maximum_cap",We="maximum_cap_uom",Ge="related_commodity_in_contract",Le="bracket_type",He="lower_threshold",Ke="lower_threshold_inclusive",Ye="upper_threshold",Qe="upper_threshold_inclusive",Xe="rate",ze="rate_type",Ze="navarch_treatment_charge_bracket",et="base_treatment_charge",tt="use_btc",at="for_every_unit",ot="navarch_penalty_bracket",nt="no_penalty",rt="for_every_unit",it="navarch_commodity",lt="name",st="code",dt="navarch_currency",ct="code",ut="navarch_unit",mt="symbol",ft="dry_symbol",ht="wet_symbol",pt="dry_unit",_t="wet_unit",yt="conversionToGram",vt="navarch_assay_unit",gt="unit",wt="conversion_to_ppb",$t="composition",Et="navarch_counterparty",bt="codename",Dt="navarch_vessel",Ct="name",At="price_pm",Tt="average_price",Nt="date",St="navarch_invoices",It="parcel",Ot="invoice",Pt="amount_paid",Mt="invoice_type";return{isGeneraingDoc:i,invoiceUrl:s.value,generateCashflow:async function(){r.value="";try{i.value=!0;const e=await async function(){const e=new Date(s.value.start_date);if("Invalid Date"===e.toString())throw r.value="Start date is invalid",new Error("Start date is invalid");const t=new Date(s.value.end_date);if("Invalid Date"===t.toString())throw r.value="End date is invalid",new Error("End date is invalid");const a=await l.get(`/items/${fe}`,{params:{fields:["invoice_type"]}}),o={};await Promise.all(a.data.data.map((async a=>{var n,r,i;const s=await l.get(`/items/${pe}`,{params:{filter:{[_e]:{_eq:a[F]}},fields:[ye,ge,we,$e,Ee]}}),d=await l.get(`/items/${B}`,{params:{filter:{[x]:{_eq:a[F]}},fields:[F,G,L,H,K,ee]}});for(const a of s.data.data){const l={days:a[ge],day_type:a[we],ref_day:"Final"===a[Mt]?a[Ee]:a[$e]};if(!l)throw new Error(`Contract does not have a payment advice for invoice type ${a[Mt]}`);let s,c="";switch(l.ref_day){case"Arrival Date":c="Actual Arrival Date from the Parcel form",s=null!=(n=d.data.date[G])?n:d.data.date[L];break;case"B/L Date":c="B/L Date from the Parcel form",s=null!=(r=d.data.data[H])?r:d.data.data[K];break;case"Invoice Date":c="Invoice Date using the B/L Date from the Parcel form",s=null!=(i=d.data.data[H])?i:d.data.data[K];break;case"Estimated Shipment Date":c="Estimated Shipment Date from the Parcel form",s=d.data.data[K];break;default:throw new Error(`Invalid reference day for payment advice: ${l.ref_day}; please contact Navarch for support`)}if(null==s)throw new Error(`Reference day for payment advice ${c} is empty in parcel`);const u=new Date(s),m=parseInt(l.days),f=l.day_type;let h;switch(f){case"Business Day(s)":h=S(u,m,!0);break;case"Calendar Day(s)":h=new Date(u.valueOf()),h.setDate(h.getDate()+m);break;default:throw new Error(`[getApplicableParcels] Invalid day_type for payment advice ${f}`)}console.log(`[getApplicableParcels] payment advice due date: ${h.toString()}`),h>=e&&h<=t&&(o[d.data.data[F]]||(o[d.data.data[F]]=[]),o[d.data.data[F]].push({invoiceType:a.data.data[ye],dueDate:h,parcelId:d.data.data[F]}))}})));const n=Object.keys(o),i=await l.get(`/items/${B}`,{params:{filter:{[F]:{_in:n}},fields:[F,x,J,q,W,G,L,H,K,Y,Q,X,z,Z,"parcel_finalised",ee,q]}});if(i.data.data.length!==n.length)throw new Error("Experiencing some network issues, please try again");return{parcelData:i.data.data.reduce(((e,t)=>(e[t[F]]=t,e)),{}),invoiceTypeParcel:n.flatMap((e=>o[e])),parcelIds:n}}(),t=await async function(e){const t=[],a=await l.get(`/items/${St}`,{params:{filter:{[It]:{_in:e.parcelIds},[Ot]:{_nnull:!0}},fields:[It,Mt,Ot,Pt]}});for(const o of e.invoiceTypeParcel)if(a.data.data.find((e=>e[It]===o.parcelId&&e[Mt]===o.invoiceType))){const e=a.data.data.find((e=>e[It]===o.parcelId&&e[Mt]===o.invoiceType));t.push({parcelId:o.parcelId,invoiceType:o.invoiceType,dueDate:o.dueDate,invoiceData:{...e[Ot],amount_paid:e[Pt]}})}else t.push({parcelId:o.parcelId,invoiceType:o.invoiceType,dueDate:o.dueDate,parcelData:e.parcelData.find((e=>e[F]===o.parcelId))});return t}(e),o=await Promise.all(t.map((async e=>(console.log(`[generateCashflow] invoiceParam=${JSON.stringify(e)}`),await async function(e){var t,a,o,n,c,u,m,p,_,y,v,g,w,E,b,T,S,P,M,U,ee,yt,vt,gt,wt,$t,At,Tt,Nt,Pt,Mt,kt,Jt,qt,Wt,Gt,Lt,Ht,Kt;r.value="";try{if(i.value=!0,e.invoiceData){const t=e.invoiceData,a=await l.get(`/items/${Et}`,{params:{filter:{[F]:{_eq:t.buyer}},fields:[bt]}});xt(a.data.data[0]);const o=(await l.get(`/items/${B}`,{params:{filter:{[F]:{_eq:t.parcel}},fields:[G,L]}})).data.data[0];return{Counterparty:a.data.data[0][bt],Vessel:"N/A"===t.vessel?"Vessel TBA":t.vessel,"Shipment Date":t.bl_date,"Arrival Date":o[G]?A(new Date(o[G])):o[L]?A(new Date(o[L])):"N/A",Status:"To Be Completed",Revision:"Original",Invoice:`${t.invoice_type}:Original`,Parcel:t.parcel,"Invoice Due Date":A(e.dueDate),"Dry Weight":t.dry_weight,"Total Revenues USD":t.total_revenue,"Total Penalties USD":t.total_deductions,...Ut(t.commodities),"Total Adjustments USD":t.adjustments?t.adjustments.total_adjustments:"0.00","Parcel Value USD":t.invoice_value,"Parcel Payable Value(Below Line) USD":t.payable_amount,"Payments USD":t.amount_paid,"Due Total":t.balance_in_sellers_favor}}if(void 0===e.parcelData)throw new Error(`Something went wrong, no parcel or invoice data for Invoice of parcel id ${e.parcelId.substring(0,5)} and invoice type ${e.invoiceType}`);console.log("[generateInvoice] formValues=",s);const Yt=e.parcelId;if(!Yt)return r.value="Parcel not selected for invoice document generation",void(i.value=!1);const Qt=e.invoiceType,Xt=e.parcelData;console.log(`parcelDataForInvoice=${JSON.stringify(Xt)}`),function(e){if(!e)throw new Error("Parcel data not found, please ensure the selected parcel still exists");if(!e[x])throw new Error("The selected parcel does not have a contract, please ensure that the contract field for the parcel is not empty");if(!e[J])throw new Error("The selected parcel does not have a counterparty, please ensure that the counterparty field for the parcel is not empty");if(!e[q])throw new Error("The selected parcel does not have assay results");if(!e[W])throw new Error("The selected parcel does not have weight results");if(!e[Q])throw new Error("The selected parcel does not have an origin port");if(!e[X])throw new Error("The selected parcel does not have a destination port");if(!e[z])throw new Error("The selected parcel does not have a shipment code")}(Xt);const zt=Xt[q],Zt=Xt[W],ea=Xt[x],ta=await l.get(`/items/${pe}?filter[${_e}]=${ea}`,{params:{fields:[ye,ve,ge,we,$e,Ee,be,De,Ce]}});if(ta.data.data&&0===ta.data.data.length)return r.value="No invoice type found for the contract",void(i.value=!1);const aa=ta.data.data.find((e=>e[ye]===Qt));if(!aa)return r.value=`Cannot find payment information for ${Qt} in the contract, please ensure that data for it has been entered and saved`,void(i.value=!1);const oa=await l.get(`/items/${le}?filter[${j}]=${Zt}&sort[]=${V}`,{params:{fields:[F,se,de,R,ce,ue,me]}});console.log(`weightLotResponse.data.data=${JSON.stringify(oa.data.data)}`),function(e){if(!e||0===e.length)throw new Error("No weight lots found for the selected parcel")}(oa.data.data);const na=function(e){console.log("[evaluateWeights]");const t={};for(const a of e)t[a.method]||(console.log(`adding method ${a.method} to weightData object`),t[a.method]=[]),console.log(`adding lot ${a.id} to weightData.${a.method} array`),t[a.method.toString()].push(a);const a=[];for(const e of Object.keys(t)){if(!t[e]){console.log(`method=${e} does not exist in weightData object`);continue}console.log(`adding lots and other values to weights for method=${e}`);const o=d(t[e]);o&&a.push(o)}return a}(oa.data.data);let ra;if(ra||(ra=na.find((e=>"Outturn"===e.method))),ra||(ra=na.find((e=>"Inturn Final"===e.method))),ra||(ra=na.find((e=>"Inturn"===e.method))),ra||(ra=na.find((e=>"Estimated"===e.method))),ra||(ra=na.find((e=>"Planned"===e.method))),!ra)throw new Error("No weight lot data found for all weight methods. Please ensure weight lot data has been entered in the selected parcel.");if(void 0===ra.dry_weight||null===ra.dry_weight||void 0===ra.wet_weight||null===ra.wet_weight||void 0===ra.moisture||null===ra.moisture||void 0===ra.dry_weight_uom||null===ra.dry_weight_uom||void 0===ra.wet_weight_uom||null===ra.wet_weight_uom||void 0===ra.method||null===ra.method)throw new Error("One of the fields for weight lots is undefined");const ia=await l.get(`/items/${ut}?filter[${ft}]=${ra.dry_weight_uom}`,{params:{fields:[pt]}}),la=await l.get(`/items/${ut}?filter[${ht}]=${ra.wet_weight_uom}`,{params:{fields:[_t]}});if(!ia.data.data||!ia.data.data[0]||!ia.data.data[0][pt])throw new Error(`Dry weight uom not found for symbol ${ra.dry_weight_uom}`);if(!la.data.data||!la.data.data[0]||!la.data.data[0][_t])throw new Error(`Wet weight uom not found for symbol ${ra.wet_weight_uom}`);const sa=ia.data.data[0][pt],da=(sa.indexOf("dry"),la.data.data[0][_t]),ca=(da.indexOf("wet"),await l.get(`/items/${te}?filter[${j}]=${zt}&sort[]=${V}`,{params:{fields:[F,ae,R,oe,ne,ie,re]}}));console.log(`assayLotResponse.data.data=${JSON.stringify(ca.data.data)}`),function(e){if(!e||0===e.length)throw new Error("No assay lots found for the selected parcel")}(ca.data.data);const ua=function(e){var t;console.log("[evaluateAnalyticalAssay]");const a={};for(const t of e)a[t.method]||(a[t.method]={}),a[t.method][t.commodity]||(a[t.method][t.commodity]=[]),null!==t.lot_number?(1===a[t.method][t.commodity].length&&null===a[t.method][t.commodity][0].lot_number&&(a[t.method][t.commodity]=[]),a[t.method][t.commodity].push(t)):null===t.lot_number&&0===a[t.method][t.commodity].length&&a[t.method][t.commodity].push(t);console.log(`[evaluateAnalyticalAssay] group: ${JSON.stringify(a)}}`);const o={};for(const e in a){console.log(`[evaluateAnalyticalAssay] methodKey: ${e}, group[methodKey]: ${JSON.stringify(a[e])}`);for(const n in a[e]){console.log(`[evaluateAnalyticalAssay] commodityKey: ${n}, group[methodKey][commodityKey]: ${JSON.stringify(a[e][n])}`),o[e]=null!=(t=o[e])?t:{},o[e][n]={};const r=a[e][n].reduce(((e,t)=>e+t[oe]),0);console.log(`[evaluateAnalyticalAssay] totalDryWeight: ${r} from ${JSON.stringify(a[e][n])}`),o[e][n].analytical_assay=a[e][n].reduce(((e,t)=>e+t[ne]*t[oe]),0)/(0!==r?r:1),console.log(`[evaluateAnalyticalAssay] analytical assay: ${o[e][n].analytical_assay}`),a[e][n].length>0&&(o[e][n][re]=a[e][n][0][re])}}return console.log(`[evaluateAnalyticalAssay] analyticalAssay: ${JSON.stringify(o)}`),o}(ca.data.data);let ma;if(ma||(ma=ua.Outturn),ma||(ma=ua["Inturn Final"]),ma||(ma=ua.Inturn),ma||(ma=ua.Estimated),ma||(ma=ua.Planned),!ma)throw new Error("No assay lot data found for all assay methods. Please ensure assay lot data has been entered in the selected parcel.");console.log(`WEIGHT: ${JSON.stringify(ra)}`),console.log(`ASSAYS: ${JSON.stringify(ma)}`);const fa=await l.get(`/items/${fe}/${ea}`,{params:{fields:[he]}});!function(e){if(!e)throw new Error("Contract data not found, please ensure the selected contract still exists");if(!e[he])throw new Error("The selected contract does not have a set currency, please ensure that the currency field for the contract is not empty")}(fa.data.data);const ha=await l.get(`/items/${dt}/${fa.data.data.contract_currency}`,{params:{fields:[ct]}});!function(e){if(!e)throw new Error("Currency data not found, please ensure the selected currency still exists");if(!e[ct])throw new Error("The selected currency in the contract is not valid")}(ha.data.data);const pa=ha.data.data.code,_a=await l.get(`/items/${Ae}?filter[${Te}]=${ea}`,{params:{fields:["id",Ne,Se,Ie,Me,Ue,ke,Fe,je,Oe,Pe]}});!function(e){if(!e||0===e.length)throw new Error("No commodity data found in selected contract for parcel");if(!e.every((e=>e[Ne])))throw new Error("The selected contract has an undefined commodity, please ensure that the 'Commodity' field for all commodites in the contract is not empty");if(!e.every((e=>e[Oe])))throw new Error("The selected contract has an undefined base price Uom for commodity, please ensure that the 'Base Price Uom' field for all commodites in the contract is not empty")}(_a.data.data),console.log(`\tcommodityInContractResponse: ${JSON.stringify(_a.data.data)}`);const ya=[],va=[];let ga="";for(const{id:e,commodity:r,primary_commodity:i,price_method:s,quotational_periods:d,price_per_uom:h,penalty_per_uom:F,treatment_charge_per_uom:j}of _a.data.data){const V=await l.get(`/items/${it}/${r}`,{params:{fields:[lt,st]}});if(jt(V.data.data,r),!ma[V.data.data.code]){console.log(`[generateInvoice] no analytical assay for commodity ${V.data.data.code} found, skipping...`);continue}if(i&&(ga=V.data.data[lt]),null!==d){const r=d;console.log(`\tquotationalPeriods: ${JSON.stringify(r)}`);const i=Array.isArray(r)?r.find((e=>e.default)):null;if(!i)throw new Error(`No default quotational period found for commodity ${V.data.data.code}`);const C=r.filter((e=>!e.default)).map((e=>`${e.qp_period} ${e.qp_code}`)),F=[`${i.qp_period} ${i.qp_code}`,...C].join(", ");console.log(`[generateInvoice] evaluate payable assay for ${V.data.data.code} with an analytical assay=${null==(t=ma[V.data.data.code])?void 0:t.analytical_assay}`);const R=await l.get(`/items/${Ve}?filter[${Ge}]=${e}`,{params:{fields:[Le,He,Ke,Ye,Qe,Xe,ze,Re,Be,xe,Je,qe,We]}}),{payableAssay:B,expression:x}=await $(null==(a=ma[V.data.data.code])?void 0:a.analytical_assay,null==(o=ma[V.data.data.code])?void 0:o.assay_uom,R.data.data);let J,q,W="";if("Final"!==Qt){const e={invoice_type:Qt,days:aa[be],day_type:aa[De],ref_day:aa[Ce]};if(!e)throw new Error(`[generateInvoice] No provisional pricing found for invoice type ${Qt}`);let t;switch(e.ref_day){case"Arrival Date":t=null!=(n=Xt[G])?n:Xt[L],W="Actual Arrival Date from the Parcel form";break;case"B/L Date":t=null!=(c=Xt[H])?c:Xt[K],W="B/L Date from the Parcel form";break;case"Invoice Date":t=null!=(u=Xt[H])?u:Xt[K],W="B/L Date (or Estimated Date) as Invoice Date";break;case"Estimated Shipment Date":t=Xt[K],W="Estimated Shipment Date from the Parcel form";break;default:throw new Error(`Invalid reference day for invoice pricing: ${e.ref_day}; please contact Navarch for support`)}if(null==t)throw new Error(`Reference day for invoice pricing ${W} is empty`);q=new Date(t);const a=parseInt(e.days),o=e.day_type;switch(o){case"Business Day(s)":J=N(q,a,!0);break;case"Calendar Day(s)":J=new Date(q.valueOf()),J.setDate(J.getDate()-a);break;default:throw new Error(`[generateInvoice] Invalid day_type ${o}`)}}else{let e;switch(i.qp_code){case"MAMA":e=new Date(null!=(m=Xt[G])?m:Xt[L]),W="Actual Arrival Date";break;case"MOSS":case"MOS":case"MOAS":e=new Date(null!=(p=Xt[H])?p:Xt[K]),W="Estimated Shipment Date";break;default:throw new Error(`[generateInvoice] Unsupported QP code ${i.qp_code}, currently only supports MAMA, MOS, MOSS, and MOAS`)}if(null==e)throw new Error(`[generateInvoice] Invalid reference day for ${W} from ${i.qp_code}`);if(J=I(e,i.qp_period),J.valueOf()>Date.now())throw new Error(`[generateInvoice] Start date for provisional pricing ${J} (${W}) based on default QP has not occurred yet`);if(q=O(e,i.qp_period),q.valueOf()>Date.now())throw new Error(`[generateInvoice] End date for provisional pricing ${q} (${W}) based on default QP has not occurred yet`)}console.log(`[generateInvoice] provisional pricing date range: ${J.toString()} - ${q.toString()}`);const Y=await Ft(V.data.data.code,s,J,q);let Q;const X=await l.get(`/items/${Ze}?filter[${Ge}]=${e}`,{params:{fields:[He,Ke,Ye,Qe,et,tt,at,Xe]}});void 0!==X.data.data&&null!==X.data.data&&X.data.data.length>0&&(Q=await D(Y,null==(_=ma[V.data.data.code])||_.assay_uom,X.data.data));const z=await l.get(`/items/${ut}/${h}`,{params:{fields:[mt]}});Vt(z.data.data,V.data.data[lt]);const Z=z.data.data[mt];let te;if(Q){if(!j)throw new Error(`Treatment Charge Rate UOM is not defined for commodity ${V.data.data[lt]}`);const e=await l.get(`/items/${ut}/${j}`,{params:{fields:[mt]}});Rt(e.data.data,V.data.data[lt]),te=e.data.data[mt]}const ae=await k(Z,ra.dry_weight_uom,null==(y=ma[V.data.data.code])?void 0:y.assay_uom);console.log(`[generateInvoice] payableMetalConversion for commodity ${V.data.data.name}: ${JSON.stringify(ae)}`),ae.initialConversion=1===(null==(v=ae.initialConversion)?void 0:v.conversionFactor)?void 0:ae.initialConversion,ae.finalConversion=1===(null==(g=ae.finalConversion)?void 0:g.conversionFactor)?void 0:ae.finalConversion,ya.push({commodity:V.data.data.name,analytical_assay:f(null==(w=ma[V.data.data.code])?void 0:w.analytical_assay,4),deduction_expression:x,payable_assay:f(B,4),assay_uom:null==(E=ma[V.data.data.code])?void 0:E.assay_uom,payable_metal:f(ra.dry_weight*(null!=(T=null==(b=ae.initialConversion)?void 0:b.conversionFactor)?T:1)*(null!=B?B:1)*(null!=(P=null==(S=ae.finalConversion)?void 0:S.conversionFactor)?P:1)*("%"!==(null==(M=ma[V.data.data.code])?void 0:M.assay_uom)?1:.01),4),payable_metal_expression:`${f(ra.dry_weight,4)}${ra.dry_weight_uom}${ae.initialConversion?` * ${f(ae.initialConversion.conversionFactor,4)}${ae.initialConversion.conversionUom}`:""} * ${f(null!=B?B:1,4)}${"%"!==(null==(U=ma[V.data.data.code])?void 0:U.assay_uom)?`${null==(ee=ma[V.data.data.code])?void 0:ee.assay_uom}`:" / 100"}${ae.finalConversion?` * ${f(ae.finalConversion.conversionFactor,4)}${ae.finalConversion.conversionUom}`:""}`,payable_metal_uom:Z,qp:F,qp_start_date:A(J),qp_end_date:A(q),qp_date_range:`${A(J)} - ${A(q)}`,price_method:s,price_rate:f(Y,4),price_per_uom:Z,price:f(ra.dry_weight*(null!=(vt=null==(yt=ae.initialConversion)?void 0:yt.conversionFactor)?vt:1)*(null!=B?B:1)*(null!=(wt=null==(gt=ae.finalConversion)?void 0:gt.conversionFactor)?wt:1)*("%"!==(null==($t=ma[V.data.data.code])?void 0:$t.assay_uom)?1:.01)*Y),treatment_charge:Q?{rate:f(Q.baseTreatmentCharge,4),discount:f((null!=(At=Q.baseTreatmentCharge)?At:0)-(null!=(Tt=Q.finalValue)?Tt:0),4),final_rate:f(Q.finalValue,4),per_uom:te,final_amount:f(ra.dry_weight*(null!=(Nt=Q.finalValue)?Nt:1))}:void 0,final_total:f(ra.dry_weight*(null!=(Mt=null==(Pt=ae.initialConversion)?void 0:Pt.conversionFactor)?Mt:1)*(null!=B?B:1)*(null!=(Jt=null==(kt=ae.finalConversion)?void 0:kt.conversionFactor)?Jt:1)*("%"!==(null==(qt=ma[V.data.data.code])?void 0:qt.assay_uom)?1:.01)*Y-(Q?1:0)*(ra.dry_weight*(null!=(Wt=null==Q?void 0:Q.finalValue)?Wt:1)))})}const R=await l.get(`/items/${ot}?filter[${Ge}]=${e}`,{params:{fields:[He,Ke,Ye,Qe,nt,rt,Xe]}});if(R.data.data.length>0){if(null===F)throw new Error(`[generateInvoice] penalty_per_uom is null for ${V.data.data.code}`);const e=await l.get(`/items/${ut}/${F}`,{params:{fields:[mt]}});Bt(e.data.data,V.data.data[lt]);const t=e.data.data[mt],{penalty:a,expression:o,bracket:n}=await C(null==(Gt=ma[V.data.data.code])?void 0:Gt.analytical_assay,R.data.data,pa,t);console.log(`[generateInvoice] evaluate penalty for ${V.data.data.code} with an analytical assay=${null==(Lt=ma[V.data.data.code])?void 0:Lt.analytical_assay}, penaltyRate=${null==n?void 0:n.rate}, finalPenaltyRate=${a}, expression='${o}'`),va.push({commodity:V.data.data.name,analytical_assay:f(null==(Ht=ma[V.data.data.code])?void 0:Ht.analytical_assay,4),deduction_expression:o,assay_uom:null==(Kt=ma[V.data.data.code])?void 0:Kt.assay_uom,penalty_rate:f(null==n?void 0:n.rate,4),penalty_per_uom:t,final_penalty_rate:f(a,4),final_penalty:f((null!=a?a:1)*ra.dry_weight)})}}console.log(`[generateInvoice] COMMODITIES: ${JSON.stringify(ya)}`),console.log(`[generateInvoice] PENALTIES: ${JSON.stringify(va)}`);const wa=ya.reduce(((e,t)=>e+h(t.price)),0),$a=ya.reduce(((e,t)=>{var a;return e+h(null==(a=t.treatment_charge)?void 0:a.final_amount)}),0),Ea=va.reduce(((e,t)=>e+h(t.final_penalty)),0);console.log(`[generateInvoice] TOTAL_REVENUE=${wa}, TOTAL_TREATMENT_CHARGE=${$a}, TOTAL_PENALTIES=${Ea}`);let ba,Da=0;const Ca=!!Xt[Z];Ca&&(Da=Xt[Z].reduce(((e,t)=>e+t.amount),0),ba={adjustments:Xt[Z].map((e=>({description:e.description,amount:f(e.amount)}))),total_adjustments:f(Da)});const Aa=aa[ve],Ta=wa-$a-Ea+Da,Na=null!=Aa?Ta*Aa/100:void 0,Sa=await l.get(`/items/${Et}/${Xt[J]}`,{params:{fields:[bt]}});xt(Sa.data.data);const Ia=Xt[Y];let Oa;Ia&&(Oa=await l.get(`/items/${Dt}/${Ia}`,{params:{fields:[Ct]}}),function(e){if(console.log("[validateVessel]"),!e)throw new Error("Vessel for parcel not found");if(!e[Ct])throw new Error("No name defined for vessel of the selected parcel")}(Oa.data.data));let Pa=(await l.get(`/items/${St}?filter[${It}]=${Yt}`,{params:{fields:["id",Ot]}})).data.data.reduce(((e,t)=>e+(t[Ot]?1:0)),0)+1,Ma=Yt;const Ua=Pa.toString().padStart(2,"0"),ka=(Xt[z],Ma.toString().padStart(2,"0")),Fa={Counterparty:Sa.data.data[bt],Vessel:Oa?Oa.data.data[Ct]:"Vessel TBA","Shipment Date":Xt[H]?A(new Date(Xt[H])):Xt[K]?A(new Date(Xt[K])):"N/A","Arrival Date":Xt[G]?A(new Date(Xt[G])):Xt[L]?A(new Date(Xt[L])):"N/A",Status:"To Be Completed",Revision:"Valuation",Invoice:`${Qt}:Valuation`,Parcel:`${Xt[z]} (#${ka})`,"Invoice Due Date":A(e.dueDate),"Dry Weight":`${f(ra.dry_weight,4)} ${ra.dry_weight_uom}`,"Total Revenues USD":f(wa),"Total Penalties USD":f(Ea+$a),...Ut(ya),"Total Adjustments USD":Ca?ba.total_adjustments:"0.00","Parcel Value USD":f(Ta),"Parcel Payable Value(Below Line) USD":f(Na),"Payments USD":"To Be Completed","Due Total":"To Be Completed"};return console.log(`[generateInvoice] invoice request body: ${JSON.stringify(Fa)}`),Fa}catch(e){return i.value=!1,console.log(`generating invoice went wrong due to: ${e}`),void(r.value=e)}}(e)))));a("input",o),console.log(`[generateCashflow] cashflow response: ${o}`),i.value=!1}catch(e){r.value=e.message}finally{i.value=!1}},viewDoc:function(e){const a=null!=e?e:t.value.doc_name;console.log(`[viewDoc] doc name: ${a}`);const o=`/display-doc?filepath=${encodeURIComponent(`/data/uploads/${a}.pdf`)}`;window.open(o)},failureReason:r};function Ut(e){return e.map((e=>{var t,a;return{[`${e.commodity} Payable Metal (${e.payable_metal_uom})`]:e.payable_metal,[`${e.commodity} QP Month`]:kt(new Date(e.qp_start_date)),[`${e.commodity} Price (USD/${e.price_per_uom})`]:e.price_rate,[`${e.commodity} TC (USD)`]:null==(t=e.treatment_charge)?void 0:t.final_amount,[`${e.commodity} Price (USD/${null==(a=e.treatment_charge)?void 0:a.per_uom})`]:e.final_rate}})).reduce(((e,t)=>({...e,...t})),{})}function kt(e){return`${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][e.getMonth()]} ${e.getFullYear()}`}async function Ft(e,t,a,o,n=1){if(m(e))throw new Error("Commodity is not defined for price calcualtion");if(m(t))throw new Error(`Price method for commodity ${e} is not defined for price calcualtion`);if(m(a))throw new Error(`Start date is not defined for price calcualtion with ${t} has not been properly defined, please ensure that contract QP is properly defined`);if(m(o))throw new Error(`End date is not defined for price calcualtion with ${t} has not been properly defined, please ensure that contract QP is properly defined`);const r=await l.get(`/items/navarch_commodity_price?filter[_and][0][price_method][_eq]=${t}&filter[_and][0][currency][_eq]=${n}&filter[_and][1][date][_between][0]=${T(a)}&filter[_and][1][date][_between][1]=${T(o)}`,{params:{fields:[At,Tt,Nt,"price_method"]}});if(!r||!r.data||!r.data.data)throw new Error(`[getCommodityAvgPrice] Failed to get commodity prices for commodity ${e} between ${T(a)} and ${T(o)}`);if(0===r.data.data.length)throw new Error(`No commodity prices found for commodity ${e} between ${T(a)} and ${T(o)}`);return r.data.data.reduce(((e,a)=>{if(!a[Tt]&&!a[At])throw new Error(`Commodity for ${t} on the date of ${a[Nt]} does not have a price, please contact Navarch for assistance`);let o=Number(a[Tt]);if(isNaN(o)&&(o=Number(a[At])),isNaN(o))throw new Error(`The commodity price for Price Method #${t} for the date of ${a[Nt]} is not a valid number, please contact Navarch for assistance`);return e+o}),0)/r.data.data.length}function jt(e,t){var a,o;if(console.log("[validateCommodityData]"),!e)throw new Error("commodity data response is null");if(!e[lt])throw new Error(`Commodity name for commodity ${null!=(a=e[st])?a:t} is undefined, please contact Navarch for assistance`);if(!e[st])throw new Error(`Commodity code for commodity ${null!=(o=e[lt])?o:t} is not defined, please contact Navarch for assistance`)}function Vt(e,t){if(!e)throw new Error(`Price per UOM for commodity ${t} is not a valid`);if(!e[mt])throw new Error(`Price per UOM for commodity ${t} does not have a valid unit symbol, please contact Navarch for assistance`)}function Rt(e,t){if(!e)throw new Error(`Treatment charge per UOM for commodity ${t} is not a valid`);if(!e[mt])throw new Error(`Treatment charge per UOM for commodity ${t} does not have a valid unit symbol, please contact Navarch for assistance`)}function Bt(e,t){if(!e)throw new Error(`Penalty per UOM for commodity ${t} is not a valid`);if(!e[mt])throw new Error(`Penalty per UOM for commodity ${t} does not have a valid unit symbol, please contact Navarch for assistance`)}function xt(e){if(console.log("[validateCounterparty]"),!e)throw new Error("Counterparty for parcel not found");if(!e[bt])throw new Error("No codename defined for counterparty of the selected parcel")}}});const w={key:0},$={key:1};g.render=function(e,t,a,o,n,p){const _=r("v-button"),y=r("v-notice");return i(),l(s,null,[d(' <input :value="value" @input="handleChange($event.target.value)" /> '),d(" create a button only interface for Directus"),e.value?(i(),l("div",$,[c(_,{class:"margin-top-16px",onClick:t[1]||(t[1]=()=>e.viewDoc())},{default:u((()=>[m("View Cashflow ")])),_:1})])):(i(),l("div",w,[c(_,{class:"margin-top-16px",onClick:t[0]||(t[0]=()=>e.generateCashflow()),loading:e.isGeneraingDoc},{default:u((()=>[m("Generate Cashflow")])),_:1},8,["loading"]),e.failureReason?(i(),f(y,{key:0},{default:u((()=>[m(h(e.failureReason),1)])),_:1})):d("v-if",!0)]))],2112)},g.__file="src/interface.vue";var E=t({id:"navarch-docgen-cashflow",name:"Navarch Cashflow Generator Button",icon:"receipt_long",description:"This is my custom interface for Navarch's Cashflow Doc!",component:g,options:null,types:["json"],group:"standard"});export{E as default};
