import{useApi as e,defineInterface as a}from"@directus/extensions-sdk";import{defineComponent as t,ref as o,inject as n,resolveComponent as r,openBlock as i,createElementBlock as l,Fragment as s,createCommentVNode as c,createVNode as d,withCtx as u,createTextVNode as f,createBlock as m,toDisplayString as p}from"vue";var y=(e=>(e.BRACKET="Bracket",e.MIN_DEDUCTION="Minimum Deduction",e.MAX_CAP="Maximum Cap",e))(y||{}),h=(e=>(e.PERCENTAGE="Percentage",e.FRACTIONAL="Fractional",e))(h||{}),v=(e=>(e.WET_WEIGHT="wet_weight",e.MOISTURE="moisture",e.DRY_WEIGHT="dry_weight",e))(v||{}),_=(e=>(e.METHOD="method",e.WET_WEIGHT_UOM="wet_weight_uom",e.MOISTURE_UOM="moisture_uom",e.DRY_WEIGHT_UOM="dry_weight_uom",e))(_||{}),g=t({props:{value:{type:Object,default:null}},emits:["input"],setup(a,{emit:t}){const r=o(""),i=o(!1),l=o(!1),s=e(),c=n("values",o({}));function d(e){if(console.log("[evaluateWeightData]"),0===e.length)return;const a=f(e,v.DRY_WEIGHT),t=f(e,v.WET_WEIGHT);return{method:u(e,_.METHOD),lots:e,dry_weight_uom:u(e,_.DRY_WEIGHT_UOM),wet_weight_uom:u(e,_.WET_WEIGHT_UOM),dry_weight:a,wet_weight:t,moisture:(t-a)/t*100}}function u(e,a){if(console.log("[getFirstValueAsSharedValue]"),0!==e.length)return console.log(`lots[0][${a.toString()}]=${e[0][a.toString()]}`),e[0][a.toString()]}function f(e,a){return console.log("[evaluateAggregateValue]"),e.reduce(((e,t)=>{var o;return e+parseFloat(null!=(o=t[a.toString()])?o:"0")}),0)}function m(e){return null==e}function p(e,a=2,t=!0){if(console.log("[formatNumber]"),isNaN(e)||null===e)return"-";const o=Math.round(e*Math.pow(10,a))/Math.pow(10,a),[n,r]=o.toString().split("."),i=n.replace(/\B(?=(\d{3})+(?!\d))/g,",");if(!r&&!t)return i;return`${i}.${(null!=r?r:"").padEnd(a,"0")}`}function g(e,a=2,t=!1){if(m(e)||isNaN(e))return null;const o=t&&e<0;return o&&(e*=-1),Math.round(e*Math.pow(10,a))/Math.pow(10,a)*(o?-1:1)}function $(e){if(console.log("[parseNumber]"),"number"==typeof e)return e;if(!e||"-"===e)return 0;const a=parseFloat(e.replace(/[^\d.-]/g,""));return console.log(`[parseNumber] number: ${e} to ${a}`),a}function w(e,a){return console.log("[findBracket]"),e.find((e=>{var t,o;const n=a>(null!=(t=e.lower_threshold)?t:0)&&(m(e.upper_threshold)||a<e.upper_threshold)||e.lower_threshold_inclusive&&a===(null!=(o=e.lower_threshold)?o:0)||e.upper_threshold_inclusive&&a===e.upper_threshold;return console.log(`[findBracket] value=${a} for bracket: ${JSON.stringify(e)}? match=${!!n}`),n}))}function D(e,a){var t,o,n,r,i,l,s,c,d,u,f;console.log("[evaluateFinalValueFromBrackets]");const m=(e-(null!=(t=a.initial_adjustment)?t:0)*(a.initial_adjustment_conversion_by_multiplication?null!=(o=a.initial_adjustment_conversion_factor)?o:1:1/(null!=(n=a.initial_adjustment_conversion_factor)?n:1)))*(null!=(r=a.rate)?r:0)*(a.rate_type===h.PERCENTAGE?.01:1)+(null!=(i=a.final_adjustment)?i:0)*(a.final_adjustment_conversion_factor?null!=(l=a.final_adjustment_conversion_factor)?l:1:1/(null!=(s=a.final_adjustment_conversion_factor)?s:1));switch(a.bracket_type){case y.MIN_DEDUCTION:if(null===a.comparator||void 0===a.comparator)throw new Error("Minimum deduction not found");const t=a.comparator*(a.comparator_conversion_by_multiplication?null!=(c=a.comparator_conversion_factor)?c:1:1/(null!=(d=a.comparator_conversion_factor)?d:1));return e-m<t?g(e-t,4):m;case y.MAX_CAP:if(null===a.comparator||void 0===a.comparator)throw new Error("Maximum cap not found");const o=a.comparator*(a.comparator_conversion_by_multiplication?null!=(u=a.comparator_conversion_factor)?u:1:1/(null!=(f=a.comparator_conversion_factor)?f:1));return g(m>o?o:m,4);case y.BRACKET:return g(m,4);default:throw new Error(`bracket type ${a.bracket_type} is not supported`)}}async function b(e,a,t,o){var n,r,i,l,s,c,d,u;if(console.log("[evaluatePayableAssay]"),!t||0===t.length)return{};const f=w(t,e);if(!f)throw new Error(`Unable to find the range for analytical assay value of ${e}, please ensure the payable assay rates for the commodity ${o} are defined in the contract cover all range of possible values`);let m,v,_=1,g=!0;if(f.initial_adjustment_uom&&void 0!==f.initial_adjustment_uom&&null!==f.initial_adjustment_uom&&f.initial_adjustment_uom!==a){const e=await B(f.initial_adjustment_uom,a);_=e.value,m=k(f.initial_adjustment_uom,a,e.isConvertByMultiplication),g=e.isConvertByMultiplication}let $,b=1,E=!0;if(f.bracket_type===y.MAX_CAP){if(v=null!=(n=f.maximum_cap)?n:0,void 0!==f.maximum_cap_uom&&null!==f.maximum_cap_uom&&f.maximum_cap_uom!==a){const e=await B(f.maximum_cap_uom,a);b=e.value,$=k(f.maximum_cap_uom,a,e.isConvertByMultiplication),E=e.isConvertByMultiplication}}else if(f.bracket_type===y.MIN_DEDUCTION&&(v=null!=(r=f.minimum_deduction)?r:0,void 0!==f.minimum_deduction_uom&&null!==f.minimum_deduction_uom&&f.minimum_deduction_uom!==a)){const e=await B(f.minimum_deduction_uom,a);b=e.value,$=k(f.minimum_deduction_uom,a,e.isConvertByMultiplication),E=e.isConvertByMultiplication}const P={bracket_type:f.bracket_type,rate:null!=(i=f.rate)?i:1,rate_type:null!=(l=f.rate_type)?l:h.FRACTIONAL,initial_adjustment:null!=(s=f.initial_adjustment)?s:0,initial_adjustment_conversion_factor:_,initial_adjustment_conversion_by_multiplication:g,comparator:v,comparator_conversion_factor:b,comparator_conversion_by_multiplication:E};console.log(`[evaluatePayableAssay] bracketForEvaluation: ${JSON.stringify(P)}`);const C=D(e,P);let S="";const A=void 0!==f.initial_adjustment&&null!==f.initial_adjustment;if(f.bracket_type===y.BRACKET)S=`${A?"(":""}${p(e,4)}${null!=a?a:""}${A?` - ${p(f.initial_adjustment,4)}${null!=(c=f.initial_adjustment_uom)?c:`${null!=a?a:""}`}`:""}${A&&1!==_?` ${g?"*":"/"} ${p(_,4)}${m}`:""}${A?")":""} * ${p(f.rate,4)}${f.rate_type===h.PERCENTAGE?"/100":`/${p(1,4)}`}`;else if(f.bracket_type===y.MIN_DEDUCTION){S=C===e-v*b?`${p(e,4)}${null!=a?a:""} - ${p(v,4)}${null!=a?a:""}${1!==b?` ${E?"*":"/"} ${p(b,4)}${$}`:""}`:`${A?"(":""}${p(e,4)}${null!=a?a:""}${A?` - ${p(f.initial_adjustment,4)}${null!=(d=f.initial_adjustment_uom)?d:`${null!=a?a:""}`}`:""}${A&&1!==_?` ${g?"*":"/"} ${p(_,4)}${m}`:""}${A?")":""} * ${p(f.rate,4)}${f.rate_type===h.PERCENTAGE?"/100":`/${p(1,4)}`}`}else{if(f.bracket_type!==y.MAX_CAP)throw new Error(`[buildPayableAssayExpression] unknown bracket method: ${f.bracket_type}`);S=C===v*b?`${p(v,4)}${null!=a?a:""}${1!==b?` ${E?"*":"/"} ${p(b,4)}${$}`:""}`:`${A?"(":""}${p(e,4)}${null!=a?a:""}${A?` - ${p(f.initial_adjustment,4)}${null!=(u=f.initial_adjustment_uom)?u:`${null!=a?a:""}`}`:""}${A&&1!==_?` ${g?"*":"/"} ${p(_,4)}${m}`:""}${A?")":""} * ${p(f.rate,4)}${f.rate_type===h.PERCENTAGE?"/100":`/${p(1,4)}`}`}return{payableAssay:C,expression:S}}console.log("[main] formValues=",c);const E="above the lower threshold, plus",P="below the upper threshold, minus";function C(e,a,t,o,n){var r,i,l,s,c,d,u;if(console.log("[evaluateCharge]"),!t||!t.length)return;const f=w(t,e);if(!f)throw new Error(`Unable to find the range for the price rate value of ${e}, please ensure the ${n} rates for commodity ${o} are defined in the contract cover all range of possible values`);let m=0,p=1;if(f.use_btc)p=0,m=0;else{const e=null!=(r=f.escalator_reference)?r:1;if(p=(null!=(i=f.rate)?i:1)/e,f.for_every_unit===E)m=null!=(l=f.lower_threshold)?l:0;else{if(f.for_every_unit!==P)throw new Error(`[evaluateCharge] unknown for_every_unit: ${f.for_every_unit}`);m=null!=(s=f.upper_threshold)?s:0}}const v={bracket_type:y.BRACKET,rate:p,rate_type:h.FRACTIONAL,initial_adjustment:m,final_adjustment:(null!=(c=f.base_treatment_charge)?c:0)+(null!=(d=f.base_charge_adjustment)?d:0)};return console.log(`[evaluateCharge] bracketForEvaluation: ${JSON.stringify(v)}`),{finalValue:D(e,v),baseTreatmentCharge:f.base_treatment_charge+(null!=(u=f.base_charge_adjustment)?u:0)}}function S(e,a,t,o,n){var r,i,l,s;if(console.log("[evaluatePenalty]"),!a||!a.length)return{};const c=w(a,e);if(!c)throw new Error(`Unable to find the range for the analytical assay value of ${e}, please ensure the penalty rates for commodity ${n} are defined in the contract cover all range of possible values`);let d=0,u=1;if(c.no_penalty)u=0,d=0;else{const e=null!=(r=c.escalator_reference)?r:1;if(u=(null!=(i=c.rate)?i:1)/e,c.for_every_unit===E)d=null!=(l=c.lower_threshold)?l:0;else{if(c.for_every_unit!==P)throw new Error(`[evaluatePenalty] unknown for_every_unit: ${c.for_every_unit}`);d=null!=(s=c.upper_threshold)?s:0}}const f={bracket_type:y.BRACKET,rate:u,rate_type:h.FRACTIONAL,initial_adjustment:d,final_adjustment:0};console.log(`[evaluatePenalty] bracketForEvaluation: ${JSON.stringify(f)}`);const m=D(e,f),v=null!=f.initial_adjustment;let _="";return _=c.rate&&0!==c.rate?`${v?"(":""}${p(e,4)}${v?` - ${p(d,4)})`:""} / ${p(1,4)} * ${null!=t?t:""} ${p(u,4)}/${null!=o?o:""}`:"No penalty",{penalty:m,expression:_,bracket:c}}function A(e){const a=e.getDate(),t=e.getMonth(),o=e.getFullYear();return`${a} ${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][t]} ${o}`}function N(e,a=!0){const t=e.getMonth()+1,o=e.getDate();return`${e.getFullYear()}${a?"-":" "}${t<10?"0":""}${t}${a?"-":" "}${o<10?"0":""}${o}`}function M(e){return 0===e.getDay()||6===e.getDay()}function O(e,a,t=!1){const o=new Date(e.valueOf());let n=a-(t?1:0),r=!0;for(;M(o);)o.setDate(o.getDate()+1),r&&(n-=1,r=!1);for(;n>0;)o.setDate(o.getDate()+1),M(o)||(n-=1);for(o.getHours()>=12&&o.setDate(o.getDate()+1);M(o);)o.setDate(o.getDate()+1);return o}function T(e,a){const t=new Date(e.valueOf());return t.setMonth(t.getMonth()+a,1),t}function U(e,a){const t=new Date(e.valueOf());return t.setMonth(t.getMonth()+a+1,0),t}async function I(e,a){var t,o;if(e===a)return{value:1,isConvertByMultiplication:!0};const n=await s.get(`/items/${Pa}?filter[${Ca}]=${e}`,{params:{fields:[Oa]}});if(0===n.data.data.length||null===n.data.data[0][Oa]||void 0===n.data.data[0][Oa])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for source weight unit ${e}. Ensure that the symbol is correct and is a weight unit symbol`);const r=await s.get(`/items/${Pa}?filter[${Ca}]=${a}`,{params:{fields:[Oa]}});if(0===r.data.data.length||null===r.data.data[0][Oa]||void 0===r.data.data[0][Oa])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for the target weight unit ${a}. Ensure that the symbol is correct and is a weight unit symbol`);const i=parseFloat(n.data.data[0][Oa]);if(isNaN(i))throw new Error(`[getWeightUnitConversionValue] source weight unit ${e} conversion value=${i} is not a number`);const l=parseFloat(r.data.data[0][Oa]);if(isNaN(l))throw new Error(`[getWeightUnitConversionValue] target weight unit ${a} conversion value=${l} is not a number`);return i<l?{value:null!=(t=g(l/i,4))?t:1,isConvertByMultiplication:!1}:{value:null!=(o=g(i/l,4))?o:1,isConvertByMultiplication:!0}}async function B(e,a){var t,o;if(null==e||null==a)return{value:1,isConvertByMultiplication:!0};if(e===a)return{value:1,isConvertByMultiplication:!0};const n=await s.get(`/items/${Ta}?filter[${Ua}]=${e}`,{params:{fields:[Ia]}});if(0===n.data.data.length||void 0===n.data.data[0][Ia]||null===n.data.data[0][Ia])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for source weight unit ${e}. Ensure that the symbol is correct and is a weight unit symbol`);const r=await s.get(`/items/${Ta}?filter[${Ua}]=${a}`,{params:{fields:[Ia]}});if(0===r.data.data.length||void 0===r.data.data[0][Ia]||null===r.data.data[0][Ia])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for the target weight unit ${a}. Ensure that the symbol is correct and is a weight unit symbol`);const i=parseFloat(n.data.data[0][Ia]);if(isNaN(i))throw new Error(`[getAssayUnitConversionValue] source weight unit ${e} conversion value=${i} is not a number`);console.log(`[getAssayUnitConversionValue] source unit conversion value=${i}`);const l=parseFloat(r.data.data[0][Ia]);if(isNaN(l))throw new Error(`[getAssayUnitConversionValue] target weight unit ${e} conversion value=${l} is not a number`);return console.log(`[getAssayUnitConversionValue] target unit conversion value=${l}`),console.log("[getAssayUnitConversionValue] returning "+i/l),i<l?{value:null!=(t=g(l/i,4))?t:1,isConvertByMultiplication:!1}:{value:null!=(o=g(i/l,4))?o:1,isConvertByMultiplication:!0}}function k(e,a,t){if(void 0===e||void 0===a||null===e||null===a)return;const o=e.split("/"),n=a.split("/");if(o.length>2||n.length>2)throw new Error(`[getConversionUnit] sourceUnit=${e} and targetUnit=${a} must be in the format of 'unit1/unit2', an extra '/' was found`);if(1===o.length&&1===n.length)return t?`${n[0]}/${o[0]}`:`${o[0]}/${n[0]}`;if(1===o.length){const e=n[0]===o[0]?"":`${n[1]}(${o[1]})`,a=n[1];return""===a?t?e:`/${e}`:t?`${e}/${a}`:`${a}/${e}`}if(1===n.length){const e=o[1],a=o[0]===n[0]?"":`${o[1]}(${n[0]})`;return""===a?t?e:`/${e}`:t?`${e}/${a}`:`${a}/${e}`}{const e=o[0]===n[0],a=o[1]===n[1],r=e||""===o[0],i=e||""===n[0],l=a||""===o[1],s=a||""===n[1],c=!l&&!i,d=!r&&!s,u=`${l?"":o[1]}${c?"(":""}${i?"":`${n[0]}`}${c?")":""}`,f=`${r?"":o[0]}${d?"(":""}${s?"":`${n[1]}`}${d?")":""}`;return""===f?t?u:`/${u}`:t?`${u}/${f}`:`${f}/${u}`}}async function j(e,a,t){const o=await s.get(`/items/${Pa}?filter[${Sa}]=${a}`,{params:{fields:[Ca]}});if(!o.data.data||!o.data.data[0]||!o.data.data[0][Ca])throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] Dry weight uom not found for symbol ${a}`);const n=o.data.data[0][Ca];if("%"===t){if(n===e)return{};const a=await I(n,e),t=k(n,e,a.isConvertByMultiplication);if(!t)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] no conversion unit found for dry weight unit ${n} and target weight unit ${e}`);return{finalConversion:{conversionFactor:a.value,conversionUom:t,isConvertByMultiplication:a.isConvertByMultiplication}}}let r=t.split("/");if(1==r.length){const e=await async function(e){const a=await s.get(`/items/${Ta}`,{params:{fields:[Ua,Ba],filter:{[Ba]:{_nnull:!0},[Ua]:{_eq:e}}}});if(200!==a.status||!a.data||0===a.data.data.length)throw new Error("[getAssayUnitComposition] no assay units found with composition");return a.data.data[0][Ba]}(t);if(!e)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${t} does not have a composition`);r=e.split("/")}if(r.length>2||0===r.length)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${t} is not in the format of 'unit1/unit2'`);const i=r[0],l=r[1],c={};if(l!==n){const e=await I(n,l),a=k(n,l,e.isConvertByMultiplication);if(!a)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] no conversion unit found for dry weight unit ${n} and assay unit denominator unit ${l}`);c.initialConversion={conversionFactor:e.value,conversionUom:a,isConvertByMultiplication:e.isConvertByMultiplication}}if(i!==e){const a=await I(i,e),t=k(i,e,a.isConvertByMultiplication);if(!t)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] no conversion unit found for target weight unit ${e} and assay unit numerator unit ${i}`);c.finalConversion={conversionFactor:a.value,conversionUom:t,isConvertByMultiplication:a.isConvertByMultiplication}}return c}const F="id",V="foreign_key",R="lot_number",x="method",J="navarch_cashflow",q="navarch_parcel",L="contract",W="counterparty",G="assay_results",H="weight_result",Q="actual_arrival_date",K="estimate_arrival_date",Y="bl_date",X="estimated_shipment_date",z="qp_selection",Z="vessel",ee="origin",ae="destination",te="shipment_code",oe="adjustments",ne="parcel_finalisation_date",re="navarch_assay_lot",ie="commodity",le="dry_weight",se="dry_weight_uom",ce="buyer_assay",de="seller_assay",ue="final_assay",fe="assay_uom",me="lot_number",pe="navarch_weight_lot",ye="dry_weight",he="wet_weight",ve="moisture",_e="wet_weight_uom",ge="dry_weight_uom",$e="navarch_contract",we="contract_currency",De="name",be="navarch_contract_payment_information",Ee="related_contract",Pe="invoice_type",Ce="pay_percent",Se="pa_days",Ae="pa_day_type",Ne="pa_ref_day",Me="pp_days",Oe="pp_day_type",Te="pp_ref_day",Ue="navarch_commodity_in_contract",Ie="contract",Be="commodity",ke="primary_commodity",je="payable_commodity",Fe="price_method",Ve="price_fix_to_use",Re="price_per_uom",xe="treatment_charge_per_uom",Je="refining_charge_rate_uom",qe="quotational_periods",Le="payable_assay_rates",We="penalty_rates",Ge="penalty_per_uom",He="navarch_payable_assay_bracket",Qe="initial_adjustment",Ke="initial_adjustment_uom",Ye="minimum_deduction",Xe="minimum_deduction_uom",ze="maximum_cap",Ze="maximum_cap_uom",ea="related_commodity_in_contract",aa="bracket_type",ta="lower_threshold",oa="lower_threshold_inclusive",na="upper_threshold",ra="upper_threshold_inclusive",ia="rate",la="rate_type",sa="navarch_treatment_charge_bracket",ca="base_treatment_charge",da="base_charge_adjustment",ua="use_btc",fa="escalator_reference",ma="for_every_unit",pa="related_contract_commodity_tc",ya="related_contract_commodity_rc",ha="navarch_penalty_bracket",va="no_penalty",_a="escalator_reference",ga="for_every_unit",$a="navarch_commodity",wa="name",Da="code",ba="navarch_currency",Ea="code",Pa="navarch_unit",Ca="symbol",Sa="dry_symbol",Aa="wet_symbol",Na="dry_unit",Ma="wet_unit",Oa="conversionToGram",Ta="navarch_assay_unit",Ua="unit",Ia="conversion_to_ppb",Ba="composition",ka="navarch_counterparty",ja="codename",Fa="name",Va="navarch_vessel",Ra="name",xa="price_am",Ja="price_pm",qa="average_price",La="date",Wa="navarch_invoices",Ga="parcel",Ha="invoice",Qa="invoice_date",Ka="amount_paid",Ya="invoice_type",Xa="navarch_forecast_price",za="commodity",Za="price",et="start_date",at="end_date",tt={Advance:0,"Second Advance":1,"Third Advance":2,"Fourth Advance":3,Provisional:4,"Second Provisional":5,"Third Provisional":6,"Fourth Provisional":7,Final:8};function ot(e){const a=[...new Set(e.flatMap((e=>Object.keys(e))))],t=e.map((e=>a.map((a=>{const t=e[a]||"";return"string"==typeof t&&t.includes(",")?`"${t}"`:t})).join(",")));return[a.join(","),...t].join("\n")}function nt(e){const a=new Blob([e],{type:"text/csv"}),t=URL.createObjectURL(a),o=document.createElement("a");o.href=t,o.download=`Cashflow-[${function(){const e=new Date,a=60*e.getTimezoneOffset()*1e3,t=e.getTime()-a,o=new Date(t),n=o.toISOString().slice(0,19),r=e.getTimezoneOffset()/60*-1;return`${n}GMT${r>0?"+":""}${r}`.replace(/:/g,"")}()}]-Valuation_Period-(${N(new Date(c.value.start_date),!1)}~${N(new Date(c.value.end_date),!1)}).csv`,document.body.appendChild(o),o.click(),document.body.removeChild(o)}class rt extends Error{constructor(e){super(e),this.name="NonFatalError",Object.setPrototypeOf(this,rt.prototype)}}return{isGeneraingDoc:i,invoiceUrl:c.value,generateCashflow:async function(){r.value="";try{i.value=!0;const e=await async function(){const e=new Date(c.value.start_date);if("Invalid Date"===e.toString())throw r.value="Start date is invalid",new Error("Start date is invalid");const a=new Date(c.value.end_date);if("Invalid Date"===a.toString())throw r.value="End date is invalid",new Error("End date is invalid");const t=await s.get(`/items/${$e}`,{params:{fields:[De,F,"invoice_type"]}}),o={};await Promise.all(t.data.data.map((async t=>{var n,r,i,l,c;const d=await s.get(`/items/${be}`,{params:{filter:{[Ee]:{_eq:t[F]}},fields:[Pe,Se,Ae,Ne]}}),u=await s.get(`/items/${q}`,{params:{filter:{[L]:{_eq:t[F]}},fields:[F,te,Q,K,Y,X,ne]}});for(const f of d.data.data){const d={days:f[Se],day_type:f[Ae],ref_day:"Final"===f[Ya]?"QP Month + n days":f[Ne]};if(!d)throw new Error(`Contract ${t[De]} does not have a payment advice for invoice type ${f[Ya]}`);let p,y="";for(const h of u.data.data){switch(d.ref_day){case"Arrival Date":y="Actual Arrival Date from the Parcel form",p=null!=(n=h[Q])?n:h[K];break;case"B/L Date":y="B/L Date (or Estimated Shipment Date) from the Parcel form",p=null!=(r=h[Y])?r:h[X];break;case"Invoice Date":y="Invoice Date (using the B/L Date or Estimated Shipment Date from the Parcel form)",p=null!=(i=h[Y])?i:h[X];break;case"Estimated Shipment Date":y="Estimated Shipment Date from the Parcel form",p=h[X];break;case"QP Month + n days":const e=await s.get(`items/${Ue}`,{params:{filter:{[Ie]:{_eq:t[F]},[je]:{_eq:!0}},fields:[qe]}});if(!Array.isArray(e.data.data)||0===e.data.data.length)throw new Error(`Contract ${t[De]} does not have any payable commodities`);const a=e.data.data.map((e=>e[qe].find((e=>!!e.default)))),o=a.reduce(((e,a)=>a.qp_period>e.qp_period?a:e),a[0]);let u;switch(o.qp_code){case"MAMA":y="Actual Arrival Date (or Estimated Arrival Date) from the Parcel form",u=null!=(l=h[Q])?l:h[K];break;case"MOSS":case"MOS":case"MOAS":y="B/L Date (or Estimated Shipment Date) from the Parcel form",u=null!=(c=h[Y])?c:h[X];break;default:throw new Error(`Unsupported QP code ${o.qp_code}, currently only supports MAMA, MOS, MOSS, and MOAS`)}if(m(u))throw new Error(`Invalid reference date, please ensure the ${y} field(s) in parcel ${h[te]} are filled in`);p=U(new Date(u),o.qp_period).toISOString();break;default:throw new Error(`Invalid reference day for payment advice: ${d.ref_day}; please contact Navarch for support`)}if(null==p)throw new Error(`Reference day for payment advice ${y} is empty in parcel ${h[te]}`);const u=new Date(p),v=parseInt(d.days);let _;switch(d.day_type){case"Business Day(s)":_=O(u,v);break;case"Calendar Day(s)":_=new Date(u.valueOf()),_.getHours()>=12?_.setDate(_.getDate()+v+1):_.setDate(_.getDate()+v);break;default:throw new Error(`Please provide a valid Day Type (Cashflow) for ${t[De]}:Final Invoice Type`)}_>=e&&_<=a&&(o[h[F]]||(o[h[F]]=[]),o[h[F]].push({invoiceType:f[Pe],dueDate:_,parcelId:h[F],contractName:t[De]}))}}})));const n=Object.keys(o);let i;for(let e=0;e<n.length;e+=15){const a=n.slice(e,e+15),t=await s.get(`/items/${q}`,{params:{filter:{[F]:{_in:a}},fields:[F,L,W,G,H,Q,K,Y,X,z,Z,ee,ae,te,oe,"parcel_finalised",ne,G]}});i?i.data.data=i.data.data.concat(t.data.data):i=t}if(!i.data.data||i.data.data.length!==n.length)throw new Error("Experiencing some network issues, please try again. If the issue persists, contact Navarch for support");const l={parcelData:i.data.data.reduce(((e,a)=>(e[a[F]]=a,e)),{}),contractNameByParcelId:n.reduce(((e,a)=>(e[a]=o[a][0].contractName,e)),{}),invoiceTypeParcel:n.flatMap((e=>o[e])),parcelIds:n};return console.log(`[getApplicableParcels] returnObject=${JSON.stringify(l)}`),l}(),a=await async function(e){const a=[];let t;for(let a=0;a<e.parcelIds.length;a+=15){const o=e.parcelIds.slice(a,a+15),n=await s.get(`/items/${Wa}`,{params:{filter:{[Ga]:{_in:o},[Ha]:{_nnull:!0}},fields:[Ga,Ya,Ha,Qa,Ka]}});t?t.data.data=t.data.data.concat(n.data.data):t=n}t.data.data.sort(((e,a)=>{const t=tt[e[Ya]]-tt[a[Ya]];return 0===t?new Date(a[Qa]).valueOf()-new Date(e[Qa]).valueOf():t}));for(const o of e.invoiceTypeParcel){const n=t.data.data.find((e=>e[Ga]===o.parcelId&&e[Ya]===o.invoiceType));n?a.push({parcelId:o.parcelId,invoiceType:o.invoiceType,contractName:e.contractNameByParcelId[o.parcelId],dueDate:o.dueDate,invoiceData:{...n[Ha],amount_paid:n[Ka]}}):a.push({parcelId:o.parcelId,invoiceType:o.invoiceType,contractName:e.contractNameByParcelId[o.parcelId],dueDate:o.dueDate,parcelData:e.parcelData[o.parcelId]})}return console.log(`[generateInvoiceParamForParcel] invoiceParams=${JSON.stringify(a)}`),a}(e);console.log(`[generateCashflow] form values=${JSON.stringify(c.value)}`);const o=await Promise.all(a.map((async e=>(console.log(`[generateCashflow] invoiceParam=${JSON.stringify(e)}`),await async function(e){var a,t,o,n,l,c,u,f,m,y,h,v,_,w,D,E,P,N,M,O,T,U,I,B,k,J,z,ne,De,Oa,Ta,Ua,Ia,Ba,xa,Ja,qa,La;r.value="",i.value=!0;try{if(e.invoiceData){console.log(`[generateInvoice][invoice=${JSON.stringify(e.invoiceData.invoice_number)}::parcel=${e.invoiceData.parcel}] using existing invoice=${JSON.stringify(e.invoiceData)}`);const a=e.invoiceData,t=await s.get(`/items/${ka}`,{params:{filter:{[Fa]:{_eq:a.buyer}},fields:[ja]}});ht(t.data.data[0]);const o=await s.get(`/items/${q}`,{params:{filter:{[F]:{_eq:e.parcelId}},fields:[Y,Q,K]}});console.log(`[generateInvoice][invoice=${JSON.stringify(e.invoiceData.invoice_number)}::parcel=${e.invoiceData.parcel}] parcel date data=${JSON.stringify(o.data.data)}`);const n=o.data.data[0];return{Counterparty:t.data.data[0][ja],Vessel:"N/A"===a.vessel?"Vessel TBA":a.vessel,"Shipment Date":a.bl_date,"Arrival Date":n[Q]?A(new Date(n[Q])):n[K]?A(new Date(n[K])):"N/A",Status:o[Y]?"Unfinalised":"Planned",Revision:"Original",Invoice:`${a.invoice_type}:Original`,Parcel:a.parcel,"Invoice Due Date":A(e.dueDate),"Dry Weight":`${p(a.dry_weight,4)} ${a.dry_weight_uom}`,"Total Revenues USD":p(a.total_revenue),"Total Penalties USD":p(a.total_deductions),...await ct(a.commodities,{dryWeight:a.dry_weight,dryWeightUom:a.dry_weight_uom}),"Total Adjustments USD":a.adjustments?p(a.adjustments.total_adjustments):"0.00","Parcel Value USD":p(a.invoice_value),"Parcel Payable Value(Below Line) USD":p(a.payable_amount),"Payments USD":a.amount_paid,"Due Total":p(a.balance_in_sellers_favor),metadata:{invoiceTypeRanking:tt[a.invoice_type]}}}if(void 0===e.parcelData)throw new rt(`Something went wrong, no parcel or invoice data for Invoice of parcel id ${e.parcelId.substring(0,5)} and invoice type ${e.invoiceType}`);const i=e.parcelId;if(!i)return void console.error(`[generateInvoice] A parcel id is not defined for invoice type ${e.invoiceType}`);const Qa=e.invoiceType,Ka=e.parcelData,Ya=e.contractName;console.log(`[generateInvoice][parcel=${Ka[te]}::invoice type=${Qa}] parcel data=${JSON.stringify(Ka)}`),function(e){if(!e)throw new Error("Parcel data not found, please ensure the selected parcel still exists");if(!e[te])throw new Error("One of the parcels does not have a shipment code, please ensure that all parcels have a shipment code");if(!e[L])throw new Error(`The parcel ${e[te]} does not have a contract, please ensure that the contract field for the parcel is not empty`);if(!e[W])throw new Error(`The parcel ${e[te]} does not havea counterparty, please ensure that the counterparty field for the parcel is not empty`);if(!e[G])throw new rt(`The parcel ${e[te]} does not have assay results`);if(!e[H])throw new rt(`The parcel ${e[te]} does not have weight results`);if(!e[ee])throw new Error(`The parcel ${e[te]} does not havean origin port`);if(!e[ae])throw new Error(`The parcel ${e[te]} does not havea destination port`)}(Ka);const Xa=Ka[G],za=Ka[H],Za=Ka[L];if(!Za)throw new Error(`Contract not found for parcel ${Ka[te]}`);const et=await s.get(`/items/${be}`,{params:{filter:{[Ee]:{_eq:Za},[Pe]:{_eq:Qa}},fields:[Pe,Ce,Se,Ae,Ne,Me,Oe,Te]}});if(et.data.data&&0===et.data.data.length)throw new Error(`No invoice type found for the contract ${Ya}`);const at=et.data.data.find((e=>e[Pe]===Qa));if(!at)throw new Error(`Cannot find payment information for ${Qa} in the contract ${Ya}, please ensure that data for it has been entered and saved`);const ot=await s.get(`/items/${pe}?filter[${V}]=${za}&sort[]=${R}`,{params:{fields:[F,ye,he,x,ve,_e,ge]}});console.log(`[generateInvoice][parcel=${Ka[te]}::invoice type=${Qa}] weight lots data=${JSON.stringify(ot.data.data)}`),function(e){if(!e||0===e.length)throw new rt("No weight lots found for the selected parcel")}(ot.data.data);const nt=function(e){console.log("[evaluateWeights]");const a={};for(const t of e)a[t.method]||(console.log(`adding method ${t.method} to weightData object`),a[t.method]=[]),console.log(`adding lot ${t.id} to weightData.${t.method} array`),a[t.method.toString()].push(t);const t=[];for(const e of Object.keys(a)){if(!a[e]){console.log(`method=${e} does not exist in weightData object`);continue}console.log(`adding lots and other values to weights for method=${e}`);const o=d(a[e]);o&&t.push(o)}return t}(ot.data.data);let it;if(it||(it=nt.find((e=>"Outturn"===e.method))),it||(it=nt.find((e=>"Inturn Final"===e.method))),it||(it=nt.find((e=>"Inturn"===e.method))),it||(it=nt.find((e=>"Estimated"===e.method))),it||(it=nt.find((e=>"Planned"===e.method))),!it)throw new Error(`No weight lots with valid method found for parcel ${Ka[te]}`);if(void 0===it.dry_weight||null===it.dry_weight||void 0===it.wet_weight||null===it.wet_weight||void 0===it.moisture||null===it.moisture||void 0===it.dry_weight_uom||null===it.dry_weight_uom||void 0===it.wet_weight_uom||null===it.wet_weight_uom||void 0===it.method||null===it.method)throw new Error(`One of the fields for the latest weight lots data is undefined for parcel ${Ka[te]}`);const dt=await s.get(`/items/${Pa}?filter[${Sa}]=${it.dry_weight_uom}`,{params:{fields:[Na]}}),vt=await s.get(`/items/${Pa}?filter[${Aa}]=${it.wet_weight_uom}`,{params:{fields:[Ma]}});if(!dt.data.data||!dt.data.data[0]||!dt.data.data[0][Na])throw new Error(`Dry weight uom not found for symbol ${it.dry_weight_uom} for parcel ${Ka[te]}`);if(!vt.data.data||!vt.data.data[0]||!vt.data.data[0][Ma])throw new Error(`Wet weight uom not found for symbol ${it.wet_weight_uom} for parcel ${Ka[te]}`);const _t=await s.get(`/items/${re}?filter[${V}]=${Xa}&sort[]=${R}`,{params:{fields:[F,ie,x,le,se,ce,de,ue,me,fe]}});console.log(`[generateInvoice][parcel=${Ka[te]}::invoice type=${Qa}] assay lots data=${JSON.stringify(_t.data.data)}`),function(e){if(!e||0===e.length)throw new rt("No assay lots found for the selected parcel")}(_t.data.data);const gt=function(e){var a;console.log("[evaluateAnalyticalAssay]");const t={};for(const a of e)t[a.method]||(t[a.method]={}),t[a.method][a.commodity]||(t[a.method][a.commodity]=[]),null!==a.lot_number?(1===t[a.method][a.commodity].length&&null===t[a.method][a.commodity][0].lot_number&&(t[a.method][a.commodity]=[]),t[a.method][a.commodity].push(a)):null===a.lot_number&&0===t[a.method][a.commodity].length&&t[a.method][a.commodity].push(a);console.log(`[evaluateAnalyticalAssay] group: ${JSON.stringify(t)}}`);const o={};for(const e in t){console.log(`[evaluateAnalyticalAssay] methodKey: ${e}, group[methodKey]: ${JSON.stringify(t[e])}`);for(const n in t[e]){console.log(`[evaluateAnalyticalAssay] commodityKey: ${n}, group[methodKey][commodityKey]: ${JSON.stringify(t[e][n])}`),o[e]=null!=(a=o[e])?a:{},o[e][n]={};const i=t[e][n].reduce(((e,a)=>e+parseFloat(a.dry_weight)),0);if(console.log(`[evaluateAnalyticalAssay] totalDryWeight: ${i} from ${JSON.stringify(t[e][n])}`),0===i||isNaN(i))throw r.value=`Please provide dry weight for ${n} commodity in ${e} method, total dry weight cannot be ${i}`,new Error("[evaluateAnalyticalAssay] totalDryWeight is 0");console.log(`[evaluateAnalyticalAssay] totalDryWeight: ${i}`),o[e][n].analytical_assay=t[e][n].reduce(((a,t)=>{var o,i,l;const s=parseFloat(null!=(i=t.final_assay)?i:null!=(o=t.seller_assay)?o:t.buyer_assay);if(null==s)throw r.value=`Please provide Final, Seller or Buyer assay value for ${n} commodity in ${e} method`,new Error("[evaluateAnalyticalAssay] assay value is not defined for assay lot");const c=a+s*parseFloat(null!=(l=t.dry_weight)?l:"0");return console.log(`[evaluateAnalyticalAssay] evaluated analytical assay: ${c} for method=${e}, commodity=${n}; with values accumulator=${a}, assayValue=${s}, dryWeight=${t.dry_weight}`),c}),0)/i,console.log(`[evaluateAnalyticalAssay] analytical assay: ${o[e][n].analytical_assay}`),t[e][n].length>0&&(o[e][n][fe]=t[e][n][0][fe])}}return console.log(`[evaluateAnalyticalAssay] analyticalAssay: ${JSON.stringify(o)}`),o}(_t.data.data);let $t;if($t||($t=gt.Outturn),$t||($t=gt["Inturn Final"]),$t||($t=gt.Inturn),$t||($t=gt.Estimated),$t||($t=gt.Planned),!$t)throw new Error(`No assay lot data with a valid method found for parcel ${Ka[te]}`);console.log(`[generateInvoice][parcel=${Ka[te]}::invoice type=${Qa}] weight lots for invoice evaluation=${JSON.stringify(it)}`),console.log(`[generateInvoice][parcel=${Ka[te]}::invoice type=${Qa}] assay lots for invoice evaluation=${JSON.stringify($t)}`);const wt=await s.get(`/items/${$e}/${Za}`,{params:{fields:[we]}});!function(e){if(!e)throw new Error("Contract data not found, please ensure the selected contract still exists");if(!e[we])throw new Error("The selected contract does not have a set currency, please ensure that the currency field for the contract is not empty")}(wt.data.data);const Dt=await s.get(`/items/${ba}/${wt.data.data.contract_currency}`,{params:{fields:[Ea]}});!function(e){if(!e)throw new Error("Currency data not found, please ensure the selected currency still exists");if(!e[Ea])throw new Error("The selected currency in the contract is not valid")}(Dt.data.data);const bt=Dt.data.data.code,Et=await s.get(`/items/${Ue}?filter[${Ie}]=${Za}`,{params:{fields:["id",Be,ke,je,Fe,Ve,qe,Le,We,Ge,Re,xe,Je]}});!function(e){if(!e||0===e.length)throw new Error("No commodity data found in selected contract for parcel");if(!e.every((e=>e[Be])))throw new Error("The selected contract has an undefined commodity, please ensure that the 'Commodity' field for all commodites in the contract is not empty");if(!e.every((e=>!e[je]||e[Re])))throw new Error("The selected contract has an undefined base price Uom for commodity, please ensure that the 'Base Price Uom' field for all commodites in the contract is not empty")}(Et.data.data),console.log(`[generateInvoice][parcel=${Ka[te]}::invoice type=${Qa}] contract commodity data=${JSON.stringify(Et.data.data)}`);const Pt=[],Ct=[];let St="";for(const{id:e,commodity:r,primary_commodity:i,price_method:d,price_fix_to_use:$,quotational_periods:V,price_per_uom:R,penalty_per_uom:x,treatment_charge_per_uom:q,refining_charge_rate_uom:L}of Et.data.data){const W=await s.get(`/items/${$a}/${r}`,{params:{fields:[wa,Da,F]}});if(ft(W.data.data,r),!$t[W.data.data.code]){console.log(`[generateInvoice][parcel=${Ka[te]}::invoice type=${Qa}::comm=${W.data.data[wa]}] no analytical assay for commodity ${W.data.data.code} found, skipping...`);continue}if(i&&(St=W.data.data[wa]),null!==V){const r=V;console.log(`[generateInvoice][parcel=${Ka[te]}::invoice type=${Qa}::comm=${W.data.data[wa]}] qp=${JSON.stringify(r)}`);const i=Array.isArray(r)?r.find((e=>e.default)):null;if(!i)throw new Error(`No default quotational period found for commodity ${W.data.data.code}`);const S=r.filter((e=>!e.default)).map((e=>`${e.qp_period} ${e.qp_code}`)),x=[`${i.qp_period} ${i.qp_code}`,...S].join(", ");console.log(`[generateInvoice][parcel=${Ka[te]}::invoice type=${Qa}::comm=${W.data.data[wa]}] evaluate payable assay for ${W.data.data.code} with an analytical assay=${null==(a=$t[W.data.data.code])?void 0:a.analytical_assay}`);const G=await s.get(`/items/${He}?filter[${ea}]=${e}`,{params:{fields:[aa,ta,oa,na,ra,ia,la,Qe,Ke,Ye,Xe,ze,Ze]}}),{payableAssay:H,expression:Q}=await b(null==(t=$t[W.data.data.code])?void 0:t.analytical_assay,null==(o=$t[W.data.data.code])?void 0:o.assay_uom,G.data.data,W.data.data[wa]);let K=null,Y=null,X=null;if("Final"!==Qa){const e=await lt(W.data.data.code,W.data.data.name,Ka,d,(async()=>st(i,Ka,Ya,W.data.data[wa])));if(null===e)throw new Error(`Pricing dates not found for commodity ${W.data.data.code} for parcel ${Ka[te]}`);if(null===e.provisionalPricingStartDate||!(e.provisionalPricingStartDate instanceof Date))throw new Error(`Invalid provisional pricing start date for commodity ${W.data.data.code} of invoice type ${Qa} in parcel ${Ka[te]}`);if(K=e.provisionalPricingStartDate,null===e.provisionalPricingEndDate||!(e.provisionalPricingEndDate instanceof Date))throw new Error(`Invalid provisional pricing end date for commodity ${W.data.data.code} of invoice type ${Qa} in parcel ${Ka[te]}`);Y=e.provisionalPricingEndDate,X=e.expectedNoOfBusinessDays}else{const e=await lt(W.data.data.code,W.data.data.name,Ka,d,(async()=>st(i,Ka,Ya,W.data.data[wa])));if(null===e)throw new Error(`Pricing dates not found for commodity ${W.data.data.code} for parcel ${Ka[te]}`);if(null===e.provisionalPricingStartDate||!(e.provisionalPricingStartDate instanceof Date))throw new Error(`Invalid provisional pricing start date for commodity ${W.data.data.code} of invoice type ${Qa} in parcel ${Ka[te]}`);if(K=e.provisionalPricingStartDate,null===e.provisionalPricingEndDate||!(e.provisionalPricingEndDate instanceof Date))throw new Error(`Invalid provisional pricing end date for commodity ${W.data.data.code} of invoice type ${Qa} in parcel ${Ka[te]}`);Y=e.provisionalPricingEndDate}console.log(`[generateInvoice][parcel=${Ka[te]}::invoice type=${Qa}::comm=${W.data.data[wa]}] provisional pricing date range: ${K.toString()} - ${Y.toString()}`);const Z=await ut(W.data.data.code,W.data.data[F],d,K,Y,X,$),ee=Z.averagePrice;let ae;K=Z.startDate,Y=Z.endDate,console.log(`[generateInvoice] average price within period: ${ee} with start date=${K} and end date=${Y}`);const oe=await s.get(`/items/${sa}?filter[${pa}]=${e}`,{params:{fields:[ta,oa,na,ra,ca,da,ua,fa,ma,ia]}});let re,ie;if(void 0!==oe.data.data&&null!==oe.data.data&&oe.data.data.length>0&&(ae=await C(ee,null==(n=$t[W.data.data.code])||n.assay_uom,oe.data.data,W.data.data[wa],"treatment charge")),ae){if(!q)throw new Error(`Treatment Charge Rate UOM is not defined for commodity ${W.data.data[wa]}`);const e=await s.get(`/items/${Pa}/${q}`,{params:{fields:[Ca]}});pt(e.data.data,W.data.data[wa]),re=e.data.data[Ca]}const le=await s.get(`/items/${sa}?filter[${ya}]=${e}`,{params:{fields:[ta,oa,na,ra,ca,da,ua,fa,ma,ia]}});let se;if(void 0!==le.data.data&&null!==le.data.data&&le.data.data.length>0&&(ie=await C(ee,null==(l=$t[W.data.data.code])||l.assay_uom,le.data.data,W.data.data[wa],"refining charge")),ie){if(!L)throw new Error(`Refining Charge Rate UOM is not defined for commodity ${W.data.data[wa]}`);const e=await s.get(`/items/${Pa}/${L}`,{params:{fields:[Ca]}});pt(e.data.data,W.data.data[wa]),se=e.data.data[Ca]}const ce=await s.get(`/items/${Pa}/${R}`,{params:{fields:[Ca]}});mt(ce.data.data,W.data.data[wa]);const de=ce.data.data[Ca],ue=await j(de,it.dry_weight_uom,null==(c=$t[W.data.data.code])?void 0:c.assay_uom);console.log(`[generateInvoice][parcel=${Ka[te]}::invoice type=${Qa}::comm=${W.data.data[wa]}] payableMetalConversion for commodity ${W.data.data.name}: ${JSON.stringify(ue)}`),ue.initialConversion=1===(null==(u=ue.initialConversion)?void 0:u.conversionFactor)?void 0:ue.initialConversion,ue.finalConversion=1===(null==(f=ue.finalConversion)?void 0:f.conversionFactor)?void 0:ue.finalConversion;const fe=(null==(m=ue.initialConversion)?void 0:m.isConvertByMultiplication)?null!=(h=null==(y=ue.initialConversion)?void 0:y.conversionFactor)?h:1:1/(null!=(_=null==(v=ue.initialConversion)?void 0:v.conversionFactor)?_:1),me=(null==(w=ue.finalConversion)?void 0:w.isConvertByMultiplication)?null!=(E=null==(D=ue.finalConversion)?void 0:D.conversionFactor)?E:1:1/(null!=(N=null==(P=ue.finalConversion)?void 0:P.conversionFactor)?N:1),pe=null!=(O=g(it.dry_weight*fe*(null!=H?H:1)*me*("%"!==(null==(M=$t[W.data.data.code])?void 0:M.assay_uom)?1:.01),4))?O:1;console.log(`[generateInvoice] PAYABLE_METAL for commodity ${W.data.data.name}: ${pe}`);const ye=pe*ee;Pt.push({commodity:W.data.data.name,analytical_assay:p(null==(T=$t[W.data.data.code])?void 0:T.analytical_assay,4),deduction_expression:Q,payable_assay:p(H,4),assay_uom:null==(U=$t[W.data.data.code])?void 0:U.assay_uom,payable_metal:p(pe,4),payable_metal_expression:`${p(it.dry_weight,4)}${it.dry_weight_uom}${ue.initialConversion?` ${ue.initialConversion.isConvertByMultiplication?"*":"/"} ${p(ue.initialConversion.conversionFactor,4)}${ue.initialConversion.conversionUom}`:""} * ${p(null!=H?H:1,4)}${"%"!==(null==(I=$t[W.data.data.code])?void 0:I.assay_uom)?`${null==(B=$t[W.data.data.code])?void 0:B.assay_uom}`:" / 100"}${ue.finalConversion?` ${ue.finalConversion.isConvertByMultiplication?"*":"/"} ${p(ue.finalConversion.conversionFactor,4)}${ue.finalConversion.conversionUom}`:""}`,payable_metal_uom:de,qp:x,qp_start_date:A(K),qp_end_date:A(Y),price_method:d,price_rate:p(ee,4),price_per_uom:de,price:p(ye),treatment_charge:ae?{rate:p(ae.baseTreatmentCharge,4),discount:p((null!=(k=ae.baseTreatmentCharge)?k:0)-(null!=(J=ae.finalValue)?J:0),4),final_rate:p(ae.finalValue,4),per_uom:re,final_amount:p(g(it.dry_weight*(null!=(z=ae.finalValue)?z:1)*-1,2,!0))}:void 0,refining_charge:ie?{rate:p(ie.baseTreatmentCharge,4),discount:p((null!=(ne=ie.baseTreatmentCharge)?ne:0)-(null!=(De=ie.finalValue)?De:0),4),final_rate:p(ie.finalValue,4),per_uom:se,final_amount:p(g(pe*(null!=(Oa=ie.finalValue)?Oa:1)*-1,2,!0))}:void 0,final_total:g(ye-(ae?1:0)*(null!=(Ua=g(it.dry_weight*(null!=(Ta=null==ae?void 0:ae.finalValue)?Ta:1),2))?Ua:1)-(ie?1:0)*(null!=(Ba=g(it.dry_weight*(null!=(Ia=null==ie?void 0:ie.finalValue)?Ia:1),2))?Ba:1))})}const G=await s.get(`/items/${ha}?filter[${ea}]=${e}`,{params:{fields:[ta,oa,na,ra,va,_a,ga,ia]}});if(G.data.data.length>0){if(null===x)throw new Error(`Please fill in the field for Penalty Per UOM in contract ${Ya} for commodity ${W.data.data[wa]}`);const e=await s.get(`/items/${Pa}/${x}`,{params:{fields:[Ca]}});yt(e.data.data,W.data.data[wa]);const a=e.data.data[Ca],{penalty:t,expression:o,bracket:n}=await S(null==(xa=$t[W.data.data.code])?void 0:xa.analytical_assay,G.data.data,bt,a,W.data.data[wa]);console.log(`[generateInvoice][parcel=${Ka[te]}::invoice type=${Qa}::comm=${W.data.data[wa]}] evaluated penalty with an analytical assay=${null==(Ja=$t[W.data.data.code])?void 0:Ja.analytical_assay}, penaltyRate=${null==n?void 0:n.rate}, finalPenaltyRate=${t}, expression='${o}'`),Ct.push({commodity:W.data.data.name,analytical_assay:p(null==(qa=$t[W.data.data.code])?void 0:qa.analytical_assay,4),deduction_expression:o,assay_uom:null==(La=$t[W.data.data.code])?void 0:La.assay_uom,penalty_rate:p(null==n?void 0:n.rate,4),penalty_per_uom:a,final_penalty_rate:p(t,4),final_penalty:p((null!=t?t:1)*it.dry_weight)})}}console.log(`[generateInvoice][parcel=${Ka[te]}::invoice type=${Qa}] evaluated commodities=${JSON.stringify(Pt)}`),console.log(`[generateInvoice][parcel=${Ka[te]}::invoice type=${Qa}] evaluated penalties${JSON.stringify(Ct)}`);const At=Pt.reduce(((e,a)=>e+$(a.price)),0),Nt=Pt.reduce(((e,a)=>{var t;return e+$(null==(t=a.treatment_charge)?void 0:t.final_amount)}),0),Mt=Pt.reduce(((e,a)=>{var t;return e+$(null==(t=a.refining_charge)?void 0:t.final_amount)}),0),Ot=Ct.reduce(((e,a)=>e+$(a.final_penalty)),0);console.log(`[generateInvoice][parcel=${Ka[te]}::invoice type=${Qa}] TOTAL_REVENUE=${At}, TOTAL_TREATMENT_CHARGE=${Nt}, TOTAL_REFINING_CHARGE=${Mt}, TOTAL_PENALTIES=${Ot}`);let Tt,Ut=0;const It=!!Ka[oe];It&&(Ut=Ka[oe].reduce(((e,a)=>e+a.amount),0),Tt={adjustments:Ka[oe].map((e=>({description:e.description,amount:p(e.amount)}))),total_adjustments:p(Ut)});const Bt=at[Ce],kt=At-Nt-Mt-Ot+Ut,jt=null!=Bt?kt*Bt/100:void 0,Ft=await s.get(`/items/${ka}/${Ka[W]}`,{params:{fields:[ja]}});ht(Ft.data.data);const Vt=Ka[Z];let Rt;Vt&&(Rt=await s.get(`/items/${Va}/${Vt}`,{params:{fields:[Ra]}}),function(e){if(console.log("[validateVessel]"),!e)throw new Error("Vessel for parcel not found");if(!e[Ra])throw new Error("No name defined for vessel of the selected parcel")}(Rt.data.data));let xt=(await s.get(`/items/${Wa}?filter[${Ga}]=${i}`,{params:{fields:["id",Ha]}})).data.data.reduce(((e,a)=>e+(a[Ha]?1:0)),0)+1,Jt=i;const qt=xt.toString().padStart(2,"0"),Lt=(Ka[te],Jt.toString().padStart(2,"0")),Wt={Counterparty:Ft.data.data[ja],Vessel:Rt?Rt.data.data[Ra]:"Vessel TBA","Shipment Date":Ka[Y]?A(new Date(Ka[Y])):Ka[X]?A(new Date(Ka[X])):"N/A","Arrival Date":Ka[Q]?A(new Date(Ka[Q])):Ka[K]?A(new Date(Ka[K])):"N/A",Status:Ka[Y]?"Unfinalised":"Planned",Revision:"Valuation",Invoice:`${Qa}:Valuation`,Parcel:`${Ka[te]} (#${Lt})`,"Invoice Due Date":A(e.dueDate),"Dry Weight":`${p(it.dry_weight,2)}`,"Total Revenues USD":p(At),"Total Penalties USD":p(Ot+Nt+Mt),...await ct(Pt,{dryWeight:it.dry_weight,dryWeightUom:it.dry_weight_uom}),"Total Adjustments USD":It?Tt.total_adjustments:"0.00","Parcel Value USD":p(kt),"Parcel Payable Value(Below Line) USD":p(jt),"Payments USD":"-","Due Total":"-",metadata:{invoiceTypeRanking:tt[Qa]}};return console.log(`[generateInvoice][parcel=${Ka[te]}::invoice type=${Qa}] generated forecast invoice=${JSON.stringify(Wt)}`),Wt}catch(a){if(a instanceof rt)return void console.error(`[generateInvoice][parcel=${e.parcelId}::invoice type=${e.invoiceType}]Non-fatal error: ${a.message}`);throw a}}(e))))),n=function(e){const a=e.reduce(((e,a)=>(e[a.Parcel]||(e[a.Parcel]=[]),e[a.Parcel].push(a),e)),{});Object.keys(a).forEach((e=>{a[e].sort(((e,a)=>e.metadata.invoiceTypeRanking<a.metadata.invoiceTypeRanking?-1:e.metadata.invoiceTypeRanking>a.metadata.invoiceTypeRanking?1:0))})),console.log(`[evaluateDuePaymentsForCashflow] cashflowByParcel=${JSON.stringify(a)}`),Object.keys(a).forEach((e=>{a[e].forEach(((t,o)=>{if(!t["Parcel Payable Value(Below Line) USD"]||"-"===t["Parcel Payable Value(Below Line) USD"])throw new Error(`Parcel ${e} for invoice ${t.Invoice} does not have a Parcel Payable Value(Below Line) USD`);const n=$(t["Parcel Payable Value(Below Line) USD"]);if(isNaN(n))throw new Error(`Parcel ${e} for invoice ${t.Invoice} has an invalid Parcel Payable Value(Below Line) USD of ${t["Parcel Payable Value(Below Line) USD"]}`);if(0===o){t["Payments USD"]=t["Payments USD"]&&"-"!==t["Payments USD"]?t["Payments USD"]:"0.00";const e=$(t["Payments USD"]);t["Due Total"]=p(n-e)}else{if(!a[e][o-1]["Parcel Payable Value(Below Line) USD"]||"-"===a[e][o-1]["Parcel Payable Value(Below Line) USD"])throw new Error(`Parcel ${e} for invoice ${t.Invoice} does not have a Parcel Payable Value(Below Line) USD for the previous invoice`);const r=$(a[e][o-1]["Parcel Payable Value(Below Line) USD"]);if(isNaN(r))throw new Error(`Parcel ${e} for invoice ${t.Invoice} has an invalid Parcel Payable Value(Below Line) USD of ${a[e][o-1]["Parcel Payable Value(Below Line) USD"]} for the previous invoice`);t["Due Total"]=p(n-r),t["Payments USD"]&&"-"!==t["Payments USD"]||(t["Payments USD"]=a[e][o-1]["Payments USD"])}}))})),console.log(`[evaluateDuePaymentsForCashflow] cashflowByParcel=${JSON.stringify(a)}`);const t=Object.keys(a).flatMap((e=>a[e]));return console.log(`[evaluateDuePaymentsForCashflow] cashflowAsJsonWithDueTotal=${JSON.stringify(t)}`),t}(o.filter((e=>!!e))),l=n.map((e=>(delete e.metadata,e))),u=ot(l);t("input",l),console.log(`[generateCashflow] cashflow response: ${JSON.stringify(l)}`),console.log(`[generateCashflow] cashflow as csv: ${u}`),i.value=!1,it(u)}catch(e){r.value=e.message}finally{i.value=!1}},downloadDoc:it,copy:async function(){l.value=!0;const{id:e,user_created:a,date_created:t,user_updated:o,date_updated:n,cashflow:i,forecast_price:d,...u}=c.value,f=await s.get(`/items/${Xa}`,{params:{filter:{[F]:d},fields:[za,et,at,Za]}}),m=await s.post(`items/${Xa}`,f.data.data);if(200!==m.status)return console.log(`[cashflow::copy] duplicate forecast prices response status: ${m.status}`),void(r.value=`Failed to duplicate forecast prices with status ${m.status}`);const p=m.data.data.map((e=>e.id));console.log(`[cashflow::copy] duplicated forecast prices id=${JSON.stringify(p)}`),console.log(`[cashflow::copy] requestBody=${JSON.stringify(u)}`);const y=await s.post("/items/"+J,{forecast_price:p,...u});if(200!==y.status)return console.log(`[cashflow::copy] copy response status: ${y.status}`),void(r.value=`Failed to duplicate cashflow with status ${y.status}`);l.value=!1,window.open(`/admin/content/${J}/${y.data.data.id}`)},isCopying:l,failureReason:r};function it(e){let a;a=m(e)?ot(c.value.cashflow):e,console.log(`[downloadDoc] csvData=${a}`),nt(a)}async function lt(e,a,t,o,n,r=!1){if(null===n&&m(t[z])||m(t[z][e]))throw new Error(`QP Selection is not set for commodity ${a} in the parcel ${t[te]}, please ensure all contract commodities have a QP selection`);if(m(t[z])||m(t[z][e]))return await n();const i=await async function(e,a,t,o){var n,r;if(o&&!e.declared)return null;const i=null==e?void 0:e.qp_selected;if(!i)return null;const l=i.split(" "),s={qp_period:parseInt(l[0]),qp_code:l[1]};let c,d,u,f;switch(s.qp_code){case"MAMA":c=null!=(n=a[Q])?n:a[K],d="Actual/Estimated Arrival Date";break;case"MOSS":c=a[X],d="Estimated Shipment Date";break;case"MOS":case"MOAS":c=null!=(r=a[Y])?r:a[X],d="B/L Date (or Estimated Shipment Date)";break;default:throw new Error(`Unsupported QP code ${s.qp_code} in the contract commodities, please ensure all commodity QP codes are MAMA, MOS, MOSS, or MOAS`)}if(m(c))throw new Error(`Please fill in a date for the field '${d}' for the Parcel form, for QP: ${i}`);const p=new Date(c);if(u=T(p,s.qp_period),u.valueOf()>Date.now())return null;return f=U(p,s.qp_period),{provisionalPricingStartDate:u,provisionalPricingEndDate:f,expectedNoOfBusinessDays:null}}(t[z][e],t,0,r);return i||await n()}async function st(e,a,t,o){var n,r;let i,l,s,c;switch(e.qp_code){case"MAMA":c=null!=(n=a[Q])?n:a[K],i="Actual/Estimated Arrival Date";break;case"MOSS":case"MOS":case"MOAS":c=null!=(r=a[Y])?r:a[X],i="B/L Date (Estimated Shipment Date)";break;default:throw new Error(`Unsupported QP code ${e.qp_code} in the contract ${t}, please ensure all commodity QP codes are MAMA, MOS, MOSS, or MOAS`)}if(m(c))throw new Error(`No reference day provided for ${i} from contract ${t} for commodity ${o}`);const d=new Date(c);return l=T(d,e.qp_period),s=U(d,e.qp_period),{provisionalPricingStartDate:l,provisionalPricingEndDate:s,expectedNoOfBusinessDays:null}}async function ct(e,a){console.log(`[mapOutCommoditiesForCashflow] commodities=${JSON.stringify(e)};;containedMetalParam=${JSON.stringify(a)}`);return(await Promise.all(e.map((async e=>{var t,o,n,r,i,l,s;const c=await j(e.payable_metal_uom,a.dryWeightUom,e.assay_uom);console.log(`[mapOutCommoditiesForCashflow] commodity=${e.commodity}, containedMetalUnitConversion=${JSON.stringify(c)}`);const d=(null!=(o=null==(t=c.initialConversion)?void 0:t.conversionFactor)?o:1)*(null!=(r=null==(n=c.finalConversion)?void 0:n.conversionFactor)?r:1),u=("%"===e.assay_uom?.01:1)*e.analytical_assay;return{[`${e.commodity} Payable Metal (${e.payable_metal_uom})`]:e.payable_metal,[`${e.commodity} Contained Metal (${e.payable_metal_uom})`]:p(a.dryWeight*u*d),[`${e.commodity} Revenue (USD)`]:e.price,[`${e.commodity} QP Month`]:dt(new Date(e.qp_start_date)),[`${e.commodity} Price (USD/${e.price_per_uom})`]:e.price_rate,[`${e.commodity} TC (USD)`]:null==(i=e.treatment_charge)?void 0:i.final_amount,[`${e.commodity} TC (USD/${null==(l=e.treatment_charge)?void 0:l.per_uom})`]:null==(s=e.treatment_charge)?void 0:s.final_rate}})))).reduce(((e,a)=>({...e,...a})),{})}function dt(e){return`${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][e.getMonth()]} ${e.getFullYear()}`}async function ut(e,a,t,o,n,r,i=null,l=1){var d;if(console.log(`[getCommodityAvgPrice] commodity=${e}, commodityId=${a}, source=${t}, startDate=${o}, endDate=${n}, currency=${l}`),m(e))throw new Error(`Commodity ${e} is not defined for price calcualtion`);if(m(t))throw new Error(`Price method for commodity ${e} is not defined for price calcualtion`);if(m(o))throw new Error(`Start date is not defined for price calcualtion with Price Method #${t} has not been properly defined, please ensure that contract QP for commodity ${e} is properly defined`);if(m(n))throw new Error(`End date is not defined for price calcualtion with Price Method #${t} has not been properly defined, please ensure that contract QP for commodity ${e} is properly defined`);const u=new Date(o.valueOf());null===r||isNaN(r)||u.setDate(u.getDate()-10);const f=await s.get(`/items/navarch_commodity_price?filter[_and][0][price_method][_eq]=${t}&filter[_and][0][currency][_eq]=${l}&filter[_and][1][date][_between][0]=${N(u)}&filter[_and][1][date][_between][1]=${N(n)}&sort[]=-${La}`,{params:{fields:[xa,Ja,qa,La,"price_method"]}});if((null==(d=f.data)?void 0:d.data)&&Array.isArray(f.data.data)&&f.data.data.length>0){const a=f.data.data[f.data.data.length-1],l=new Date(a[La]);if(console.log(`[getCommodityAvgPrice] commodity prices=${JSON.stringify(f.data.data)}`),l>=n){if(null!=r&&f.data.data.length<r)throw new Error(`Not enough commodity prices found for commodity ${e} between ${N(o)} and ${N(n)}, please contact Navarch for support`);const a=null===r||isNaN(r)?f.data.data:f.data.data.slice(0,r),l=a.reduce(((a,o)=>{if(!o[qa]&&!o[Ja]&&!o[xa])throw new Error(`Commodity ${e} for Price Method #${t} on the date of ${o[La]} does not have a price, please contact Navarch for assistance`);let n;if("PM"===i){if(null===o[Ja])throw new Error(`The price data for the commodity ${e} does not have a Closing Price (PM) for the date of ${o[La]}, please choose another price fix or provide a Price PM for this date`);n=Number(o[Ja])}else if("AM"===i){if(null===o[xa])throw new Error(`The price data for the commodity ${e} does not have an Opening Price (AM) for the date of ${o[La]}, please choose another price fix or provide a Price AM for this date`);n=Number(o[xa])}else if("Average"===i){if(null===o[qa])throw new Error(`The price data for the commodity ${e} does not have an Average Price for the date of ${o[La]}, please choose another price fix or provide an Average Price for this date`);n=Number(o[qa])}else if(null!==o[qa])n=Number(o[qa]);else if(null!==o[Ja])n=Number(o[Ja]);else{if(null===o[xa])throw new Error(`The commodity price for ${e} of Price Method #${t} for the date of ${o[La]} is not a valid number, please contact Navarch for assistance`);n=Number(o[xa])}return a+n}),0)/a.length;return console.log(`[getCommodityAvgPrice] average price=${l} for commodity ${e} between ${N(o)} (with over-adjusted start date of ${N(u)}) and ${N(n)}`),{averagePrice:l,startDate:new Date(a[a.length-1][La]),endDate:new Date(a[0][La])}}console.log(`[getCommodityAvgPrice] latest comm price date=${l} is before end date=${n}, getting forecast price`)}if(!c.value[F])throw new Error("Please save the Cashflow form first before generating the cashflow doc");const p=await s.get(`/items/${Xa}`,{params:{filter:{[za]:{_eq:a},cashflow_forecast_id:{_eq:c.value[F]}},fields:[Za,za,et,at]}});!function(e,a){if(!e||!Array.isArray(e)||0===e.length)throw new Error(`No forecast price found for ${a}, please ensure prices have been provided`)}(p.data.data,e);const y=p.data.data.find((e=>{const a=new Date(e[et]),t=new Date(e[at]);return a<=o&&t>=n}));if(!y)throw new Error(`No single forecast price found for commodity ${e} between ${N(o)} and ${N(n)}, please ensure there is only one price value for this range`);return console.log(`[getCommodityAvgPrice] forecast price=${y[Za]} for commodity ${e} between ${N(o)} and ${N(n)}`),{averagePrice:y[Za],startDate:new Date(y[et]),endDate:new Date(y[at])}}function ft(e,a){var t,o,n;if(console.log("[validateCommodityData]"),!e)throw new Error("commodity data response is null");if(!e[wa])throw new Error(`Commodity name for commodity ${null!=(t=e[Da])?t:a} is undefined, please contact Navarch for assistance`);if(!e[Da])throw new Error(`Commodity code for commodity ${null!=(o=e[wa])?o:a} is not defined, please contact Navarch for assistance`);if(!e[F])throw new Error(`Commodity ID for commodity ${null!=(n=e[wa])?n:a} is not defined, please contact Navarch for assistance`)}function mt(e,a){if(!e)throw new Error(`Price per UOM for commodity ${a} is not a valid`);if(!e[Ca])throw new Error(`Price per UOM for commodity ${a} does not have a valid unit symbol, please contact Navarch for assistance`)}function pt(e,a){if(!e)throw new Error(`Charge per UOM for commodity ${a} is not a valid`);if(!e[Ca])throw new Error(`Charge per UOM for commodity ${a} does not have a valid unit symbol, please contact Navarch for assistance`)}function yt(e,a){if(!e)throw new Error(`Penalty per UOM for commodity ${a} is not a valid`);if(!e[Ca])throw new Error(`Penalty per UOM for commodity ${a} does not have a valid unit symbol, please contact Navarch for assistance`)}function ht(e){if(console.log("[validateCounterparty]"),!e)throw new Error("Counterparty for parcel not found");if(!e[ja])throw new Error("No codename defined for counterparty of the selected parcel")}}});const $={key:0},w={key:1};var D=[],b=[];!function(e,a){if(e&&"undefined"!=typeof document){var t,o=!0===a.prepend?"prepend":"append",n=!0===a.singleTag,r="string"==typeof a.container?document.querySelector(a.container):document.getElementsByTagName("head")[0];if(n){var i=D.indexOf(r);-1===i&&(i=D.push(r)-1,b[i]={}),t=b[i]&&b[i][o]?b[i][o]:b[i][o]=l()}else t=l();65279===e.charCodeAt(0)&&(e=e.substring(1)),t.styleSheet?t.styleSheet.cssText+=e:t.appendChild(document.createTextNode(e))}function l(){var e=document.createElement("style");if(e.setAttribute("type","text/css"),a.attributes)for(var t=Object.keys(a.attributes),n=0;n<t.length;n++)e.setAttribute(t[n],a.attributes[t[n]]);var i="prepend"===o?"afterbegin":"beforeend";return r.insertAdjacentElement(i,e),e}}(".margin-top-16px[data-v-64969d30] {\n  margin-top: 16px;\n}",{}),g.render=function(e,a,t,o,n,y){const h=r("v-button"),v=r("v-notice");return i(),l(s,null,[c(' <input :value="value" @input="handleChange($event.target.value)" /> '),c(" create a button only interface for Directus"),e.value?(i(),l("div",w,[d(h,{onClick:a[1]||(a[1]=()=>e.downloadDoc())},{default:u((()=>[f("Download Cashflow ")])),_:1})])):(i(),l("div",$,[d(h,{onClick:a[0]||(a[0]=()=>e.generateCashflow()),loading:e.isGeneraingDoc},{default:u((()=>[f("Generate Cashflow")])),_:1},8,["loading"]),e.failureReason?(i(),m(v,{key:0},{default:u((()=>[f(p(e.failureReason),1)])),_:1})):c("v-if",!0)])),d(h,{class:"margin-top-16px",onClick:a[2]||(a[2]=()=>e.copy()),loading:e.isCopying},{default:u((()=>[f("Copy")])),_:1},8,["loading"])],64)},g.__scopeId="data-v-64969d30",g.__file="src/interface.vue";var E=a({id:"navarch-docgen-cashflow",name:"Navarch Cashflow Generator Button",icon:"receipt_long",description:"This is my custom interface for Navarch's Cashflow Doc!",component:g,options:null,types:["json"],group:"standard"});export{E as default};
