import{useApi as e,defineInterface as a}from"@directus/extensions-sdk";import{defineComponent as t,ref as o,inject as n,resolveComponent as r,openBlock as i,createElementBlock as l,Fragment as s,createCommentVNode as c,createVNode as d,withCtx as u,createTextVNode as f,createBlock as m,toDisplayString as p}from"vue";var y=(e=>(e.BRACKET="Bracket",e.MIN_DEDUCTION="Minimum Deduction",e.MAX_CAP="Maximum Cap",e))(y||{}),h=(e=>(e.PERCENTAGE="Percentage",e.FRACTIONAL="Fractional",e))(h||{}),v=(e=>(e.WET_WEIGHT="wet_weight",e.MOISTURE="moisture",e.DRY_WEIGHT="dry_weight",e))(v||{}),g=(e=>(e.METHOD="method",e.WET_WEIGHT_UOM="wet_weight_uom",e.MOISTURE_UOM="moisture_uom",e.DRY_WEIGHT_UOM="dry_weight_uom",e))(g||{}),_=t({props:{value:{type:Object,default:null}},emits:["input"],setup(a,{emit:t}){const r=o(""),i=o(!1),l=o(!1),s=e(),c=n("values",o({}));function d(e){if(console.log("[evaluateWeightData]"),0===e.length)return;const a=f(e,v.DRY_WEIGHT),t=f(e,v.WET_WEIGHT);return{method:u(e,g.METHOD),lots:e,dry_weight_uom:u(e,g.DRY_WEIGHT_UOM),wet_weight_uom:u(e,g.WET_WEIGHT_UOM),dry_weight:a,wet_weight:t,moisture:(t-a)/t*100}}function u(e,a){if(console.log("[getFirstValueAsSharedValue]"),0!==e.length)return console.log(`lots[0][${a.toString()}]=${e[0][a.toString()]}`),e[0][a.toString()]}function f(e,a){return console.log("[evaluateAggregateValue]"),e.reduce(((e,t)=>{var o;return e+parseFloat(null!=(o=t[a.toString()])?o:"0")}),0)}function m(e){return null==e}function p(e,a=2,t=!0){if(console.log("[formatNumber]"),isNaN(e)||null===e)return"-";const o=Math.round(e*Math.pow(10,a))/Math.pow(10,a),[n,r]=o.toString().split("."),i=n.replace(/\B(?=(\d{3})+(?!\d))/g,",");if(!r&&!t)return i;return`${i}.${(null!=r?r:"").padEnd(a,"0")}`}function _(e,a=2,t=!1){if(m(e)||isNaN(e))return null;const o=t&&e<0;return o&&(e*=-1),Math.round(e*Math.pow(10,a))/Math.pow(10,a)*(o?-1:1)}function w(e){if(console.log("[parseNumber]"),"number"==typeof e)return e;if(!e||"-"===e)return 0;const a=parseFloat(e.replace(/[^\d.-]/g,""));return console.log(`[parseNumber] number: ${e} to ${a}`),a}function $(e,a){return console.log("[findBracket]"),e.find((e=>{var t,o;const n=a>(null!=(t=e.lower_threshold)?t:0)&&(m(e.upper_threshold)||a<e.upper_threshold)||e.lower_threshold_inclusive&&a===(null!=(o=e.lower_threshold)?o:0)||e.upper_threshold_inclusive&&a===e.upper_threshold;return console.log(`[findBracket] value=${a} for bracket: ${JSON.stringify(e)}? match=${!!n}`),n}))}function D(e,a){var t,o,n,r,i,l,s;console.log("[evaluateFinalValueFromBrackets]");const c=(e-(null!=(t=a.initial_adjustment)?t:0)*(null!=(o=a.initial_adjustment_conversion_factor)?o:1))*(null!=(n=a.rate)?n:0)*(a.rate_type===h.PERCENTAGE?.01:1)+(null!=(r=a.final_adjustment)?r:0)*(null!=(i=a.final_adjustment_conversion_factor)?i:1);switch(a.bracket_type){case y.MIN_DEDUCTION:if(null===a.comparator||void 0===a.comparator)throw new Error("Minimum deduction not found");const t=a.comparator*(null!=(l=a.comparator_conversion_factor)?l:1);return e-c<t?_(e-t,4):c;case y.MAX_CAP:if(null===a.comparator||void 0===a.comparator)throw new Error("Maximum cap not found");const o=a.comparator*(null!=(s=a.comparator_conversion_factor)?s:1);return _(c>o?o:c,4);case y.BRACKET:return _(c,4);default:throw new Error(`bracket type ${a.bracket_type} is not supported`)}}async function E(e,a,t,o){var n,r,i,l,s,c,d,u;if(console.log("[evaluatePayableAssay]"),!t||0===t.length)return{};const f=$(t,e);if(!f)throw new Error(`Unable to find the range for analytical assay value of ${e}, please ensure the payable assay rates for the commodity ${o} are defined in the contract cover all range of possible values`);let m,v,g=1;f.initial_adjustment_uom&&void 0!==f.initial_adjustment_uom&&null!==f.initial_adjustment_uom&&f.initial_adjustment_uom!==a&&(g=await F(f.initial_adjustment_uom,a),m=V(f.initial_adjustment_uom,a));let _,w=1;f.bracket_type===y.MAX_CAP?(v=null!=(n=f.maximum_cap)?n:0,void 0!==f.maximum_cap_uom&&null!==f.maximum_cap_uom&&f.maximum_cap_uom!==a&&(w=await F(f.maximum_cap_uom,a),_=V(f.maximum_cap_uom,a))):f.bracket_type===y.MIN_DEDUCTION&&(v=null!=(r=f.minimum_deduction)?r:0,void 0!==f.minimum_deduction_uom&&null!==f.minimum_deduction_uom&&f.minimum_deduction_uom!==a&&(w=await F(f.minimum_deduction_uom,a),_=V(f.minimum_deduction_uom,a)));const E=D(e,{bracket_type:f.bracket_type,rate:null!=(i=f.rate)?i:1,rate_type:null!=(l=f.rate_type)?l:h.FRACTIONAL,initial_adjustment:null!=(s=f.initial_adjustment)?s:0,initial_adjustment_conversion_factor:g,comparator:v,comparator_conversion_factor:w});let b="";const P=void 0!==f.initial_adjustment&&null!==f.initial_adjustment;if(f.bracket_type===y.BRACKET)b=`${P?"(":""}${p(e,4)}${null!=a?a:""}${P?` - ${p(f.initial_adjustment,4)}${null!=(c=f.initial_adjustment_uom)?c:`${null!=a?a:""}`}`:""}${P&&1!==g?` * ${p(g,4)}${m}`:""}${P?")":""} * ${p(f.rate,4)}${f.rate_type===h.PERCENTAGE?"/100":`/${p(1,4)}`}`;else if(f.bracket_type===y.MIN_DEDUCTION){b=E===e-v*w?`${p(e,4)}${null!=a?a:""} - ${p(v,4)}${null!=a?a:""}${1!==w?` * ${p(w,4)}${_}`:""}`:`${P?"(":""}${p(e,4)}${null!=a?a:""}${P?` - ${p(f.initial_adjustment,4)}${null!=(d=f.initial_adjustment_uom)?d:`${null!=a?a:""}`}`:""}${P&&1!==g?` * ${p(g,4)}${m}`:""}${P?")":""} * ${p(f.rate,4)}${f.rate_type===h.PERCENTAGE?"/100":`/${p(1,4)}`}`}else{if(f.bracket_type!==y.MAX_CAP)throw new Error(`[buildPayableAssayExpression] unknown bracket method: ${f.bracket_type}`);b=E===v*w?`${p(v,4)}${null!=a?a:""}${1!==w?` * ${p(w,4)}${_}`:""}`:`${P?"(":""}${p(e,4)}${null!=a?a:""}${P?` - ${p(f.initial_adjustment,4)}${null!=(u=f.initial_adjustment_uom)?u:`${null!=a?a:""}`}`:""}${P&&1!==g?` * ${p(g,4)}${m}`:""}${P?")":""} * ${p(f.rate,4)}${f.rate_type===h.PERCENTAGE?"/100":`/${p(1,4)}`}`}return{payableAssay:E,expression:b}}console.log("[main] formValues=",c);const b="above the lower threshold, plus",P="below the upper threshold, minus";function S(e,a,t,o,n){var r,i,l,s,c;if(console.log("[evaluateCharge]"),!t||!t.length)return;const d=$(t,e);if(!d)throw new Error(`Unable to find the range for the price rate value of ${e}, please ensure the ${n} rates for commodity ${o} are defined in the contract cover all range of possible values`);let u=0,f=1;if(d.use_btc)f=0,u=0;else{const e=null!=(r=d.escalator_reference)?r:1;if(f=(null!=(i=d.rate)?i:1)/e,d.for_every_unit===b)u=null!=(l=d.lower_threshold)?l:0;else{if(d.for_every_unit!==P)throw new Error(`[evaluateCharge] unknown for_every_unit: ${d.for_every_unit}`);u=null!=(s=d.upper_threshold)?s:0}}const m={bracket_type:y.BRACKET,rate:f,rate_type:h.FRACTIONAL,initial_adjustment:u,final_adjustment:null!=(c=d.base_treatment_charge)?c:0};return console.log(`[evaluateCharge] bracketForEvaluation: ${JSON.stringify(m)}`),{finalValue:D(e,m),baseTreatmentCharge:d.base_treatment_charge}}function A(e,a,t,o,n){var r,i,l,s;if(console.log("[evaluatePenalty]"),!a||!a.length)return{};const c=$(a,e);if(!c)throw new Error(`Unable to find the range for the analytical assay value of ${e}, please ensure the penalty rates for commodity ${n} are defined in the contract cover all range of possible values`);let d=0,u=1;if(c.no_penalty)u=0,d=0;else{const e=null!=(r=c.escalator_reference)?r:1;if(u=(null!=(i=c.rate)?i:1)/e,c.for_every_unit===b)d=null!=(l=c.lower_threshold)?l:0;else{if(c.for_every_unit!==P)throw new Error(`[evaluatePenalty] unknown for_every_unit: ${c.for_every_unit}`);d=null!=(s=c.upper_threshold)?s:0}}const f={bracket_type:y.BRACKET,rate:u,rate_type:h.FRACTIONAL,initial_adjustment:d,final_adjustment:0};console.log(`[evaluatePenalty] bracketForEvaluation: ${JSON.stringify(f)}`);const m=D(e,f),v=null!=f.initial_adjustment;let g="";return g=c.rate&&0!==c.rate?`${v?"(":""}${p(e,4)}${v?` - ${p(d,4)})`:""} / ${p(1,4)} * ${null!=t?t:""} ${p(u,4)}/${null!=o?o:""}`:"No penalty",{penalty:m,expression:g,bracket:c}}function C(e){const a=e.getDate(),t=e.getMonth(),o=e.getFullYear();return`${a} ${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][t]} ${o}`}function N(e,a=!0){const t=e.getMonth()+1,o=e.getDate();return`${e.getFullYear()}${a?"-":" "}${t<10?"0":""}${t}${a?"-":" "}${o<10?"0":""}${o}`}function O(e,a,t=!1){const o=new Date(e.valueOf());let n=a-(t?1:0),r=!0;for(;I(o);)o.setDate(o.getDate()-1),r&&(n-=1,r=!1);for(;n>0;)o.setDate(o.getDate()-1),I(o)||(n-=1);for(o.getHours()>=12&&o.setDate(o.getDate()+1);I(o);)o.setDate(o.getDate()-1);return o}function I(e){return 0===e.getDay()||6===e.getDay()}function T(e,a,t=!1){const o=new Date(e.valueOf());let n=a-(t?1:0),r=!0;for(;I(o);)o.setDate(o.getDate()+1),r&&(n-=1,r=!1);for(;n>0;)o.setDate(o.getDate()+1),I(o)||(n-=1);for(o.getHours()>=12&&o.setDate(o.getDate()+1);I(o);)o.setDate(o.getDate()+1);return o}function U(e,a){const t=new Date(e.valueOf());return t.setMonth(t.getMonth()+a,1),t}function M(e,a){const t=new Date(e.valueOf());return t.setMonth(t.getMonth()+a+1,0),t}async function k(e,a){if(e===a)return 1;const t=await s.get(`/items/${Ea}?filter[${ba}]=${e}`,{params:{fields:[Na]}});if(0===t.data.data.length||null===t.data.data[0][Na]||void 0===t.data.data[0][Na])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for source weight unit ${e}. Ensure that the symbol is correct and is a weight unit symbol`);const o=await s.get(`/items/${Ea}?filter[${ba}]=${a}`,{params:{fields:[Na]}});if(0===o.data.data.length||null===o.data.data[0][Na]||void 0===o.data.data[0][Na])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for the target weight unit ${a}. Ensure that the symbol is correct and is a weight unit symbol`);const n=parseFloat(t.data.data[0][Na]);if(isNaN(n))throw new Error(`[getWeightUnitConversionValue] source weight unit ${e} conversion value=${n} is not a number`);const r=parseFloat(o.data.data[0][Na]);if(isNaN(r))throw new Error(`[getWeightUnitConversionValue] target weight unit ${a} conversion value=${r} is not a number`);return n/r}async function F(e,a){if(null==e||null==a)return 1;if(e===a)return 1;const t=await s.get(`/items/${Oa}?filter[${Ia}]=${e}`,{params:{fields:[Ta]}});if(0===t.data.data.length||void 0===t.data.data[0][Ta]||null===t.data.data[0][Ta])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for source weight unit ${e}. Ensure that the symbol is correct and is a weight unit symbol`);const o=await s.get(`/items/${Oa}?filter[${Ia}]=${a}`,{params:{fields:[Ta]}});if(0===o.data.data.length||void 0===o.data.data[0][Ta]||null===o.data.data[0][Ta])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for the target weight unit ${a}. Ensure that the symbol is correct and is a weight unit symbol`);const n=parseFloat(t.data.data[0][Ta]);if(isNaN(n))throw new Error(`[getAssayUnitConversionValue] source weight unit ${e} conversion value=${n} is not a number`);console.log(`[getAssayUnitConversionValue] source unit conversion value=${n}`);const r=parseFloat(o.data.data[0][Ta]);if(isNaN(r))throw new Error(`[getAssayUnitConversionValue] target weight unit ${e} conversion value=${r} is not a number`);return console.log(`[getAssayUnitConversionValue] target unit conversion value=${r}`),console.log("[getAssayUnitConversionValue] returning "+n/r),n/r}function V(e,a){if(void 0===e||void 0===a||null===e||null===a)return;const t=e.split("/"),o=a.split("/");if(t.length>2||o.length>2)throw new Error(`[getConversionUnit] sourceUnit=${e} and targetUnit=${a} must be in the format of 'unit1/unit2', an extra '/' was found`);if(1===t.length&&1===o.length)return`${o[0]}/${t[0]}`;if(1===t.length){const e=o[0]===t[0]?"":`${o[1]}(${t[1]})`,a=o[1];return""===a?e:`${e}/${a}`}if(1===o.length){const e=t[1],a=t[0]===o[0]?"":`${t[1]}(${o[0]})`;return""===a?e:`${e}/${a}`}{const e=t[0]===o[0],a=t[1]===o[1],n=e||""===t[0],r=e||""===o[0],i=a||""===t[1],l=a||""===o[1],s=!i&&!r,c=!n&&!l,d=`${i?"":t[1]}${s?"(":""}${r?"":`${o[0]}`}${s?")":""}`,u=`${n?"":t[0]}${c?"(":""}${l?"":`${o[1]}`}${c?")":""}`;return""===u?d:`${d}/${u}`}}async function j(e,a,t){const o=await s.get(`/items/${Ea}?filter[${Pa}]=${a}`,{params:{fields:[ba]}});if(!o.data.data||!o.data.data[0]||!o.data.data[0][ba])throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] Dry weight uom not found for symbol ${a}`);const n=o.data.data[0][ba];if("%"===t){if(n===e)return{};const a=V(n,e);if(!a)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] no conversion unit found for dry weight unit ${n} and target weight unit ${e}`);return{finalConversion:{conversionFactor:await k(n,e),conversionUom:a}}}let r=t.split("/");if(1==r.length){const e=await async function(e){const a=await s.get(`/items/${Oa}`,{params:{fields:[Ia,Ua],filter:{[Ua]:{_nnull:!0},[Ia]:{_eq:e}}}});if(200!==a.status||!a.data||0===a.data.data.length)throw new Error("[getAssayUnitComposition] no assay units found with composition");return a.data.data[0][Ua]}(t);if(!e)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${t} does not have a composition`);r=e.split("/")}if(r.length>2||0===r.length)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${t} is not in the format of 'unit1/unit2'`);const i=r[0],l=r[1],c={};if(l!==n){const e=V(n,l);if(!e)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] no conversion unit found for dry weight unit ${n} and assay unit denominator unit ${l}`);c.initialConversion={conversionFactor:await k(n,l),conversionUom:e}}if(i!==e){const a=V(i,e);if(!a)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] no conversion unit found for target weight unit ${e} and assay unit numerator unit ${i}`);c.finalConversion={conversionFactor:await k(i,e),conversionUom:a}}return c}const B="id",q="foreign_key",R="lot_number",J="method",x="navarch_cashflow",L="navarch_parcel",W="contract",G="counterparty",H="assay_results",Q="weight_result",K="actual_arrival_date",Y="estimate_arrival_date",X="bl_date",z="estimated_shipment_date",Z="qp_selection",ee="vessel",ae="origin",te="destination",oe="shipment_code",ne="adjustments",re="parcel_finalisation_date",ie="navarch_assay_lot",le="commodity",se="dry_weight",ce="dry_weight_uom",de="buyer_assay",ue="seller_assay",fe="final_assay",me="assay_uom",pe="lot_number",ye="navarch_weight_lot",he="dry_weight",ve="wet_weight",ge="moisture",_e="wet_weight_uom",we="dry_weight_uom",$e="navarch_contract",De="contract_currency",Ee="name",be="navarch_contract_payment_information",Pe="related_contract",Se="invoice_type",Ae="pay_percent",Ce="pa_days",Ne="pa_day_type",Oe="pa_ref_day",Ie="pp_days",Te="pp_day_type",Ue="pp_ref_day",Me="navarch_commodity_in_contract",ke="contract",Fe="commodity",Ve="primary_commodity",je="payable_commodity",Be="price_method",qe="price_per_uom",Re="treatment_charge_per_uom",Je="quotational_periods",xe="payable_assay_rates",Le="penalty_rates",We="penalty_per_uom",Ge="navarch_payable_assay_bracket",He="initial_adjustment",Qe="initial_adjustment_uom",Ke="minimum_deduction",Ye="minimum_deduction_uom",Xe="maximum_cap",ze="maximum_cap_uom",Ze="related_commodity_in_contract",ea="bracket_type",aa="lower_threshold",ta="lower_threshold_inclusive",oa="upper_threshold",na="upper_threshold_inclusive",ra="rate",ia="rate_type",la="navarch_treatment_charge_bracket",sa="base_treatment_charge",ca="use_btc",da="escalator_reference",ua="for_every_unit",fa="related_contract_commodity_tc",ma="related_contract_commodity_rc",pa="navarch_penalty_bracket",ya="no_penalty",ha="escalator_reference",va="for_every_unit",ga="navarch_commodity",_a="name",wa="code",$a="navarch_currency",Da="code",Ea="navarch_unit",ba="symbol",Pa="dry_symbol",Sa="wet_symbol",Aa="dry_unit",Ca="wet_unit",Na="conversionToGram",Oa="navarch_assay_unit",Ia="unit",Ta="conversion_to_ppb",Ua="composition",Ma="navarch_counterparty",ka="codename",Fa="name",Va="navarch_vessel",ja="name",Ba="navarch_commodity_price",qa="price_pm",Ra="average_price",Ja="date",xa="navarch_invoices",La="parcel",Wa="invoice",Ga="invoice_date",Ha="amount_paid",Qa="invoice_type",Ka="navarch_forecast_price",Ya="commodity",Xa="price",za="start_date",Za="end_date",et={Advance:0,"Second Advance":1,"Third Advance":2,"Fourth Advance":3,Provisional:4,"Second Provisional":5,"Third Provisional":6,"Fourth Provisional":7,Final:8};function at(e){const a=[...new Set(e.flatMap((e=>Object.keys(e))))],t=e.map((e=>a.map((a=>{const t=e[a]||"";return"string"==typeof t&&t.includes(",")?`"${t}"`:t})).join(",")));return[a.join(","),...t].join("\n")}function tt(e){const a=new Blob([e],{type:"text/csv"}),t=URL.createObjectURL(a),o=document.createElement("a");o.href=t,o.download=`Cashflow-[${function(){const e=new Date,a=60*e.getTimezoneOffset()*1e3,t=e.getTime()-a,o=new Date(t),n=o.toISOString().slice(0,19),r=e.getTimezoneOffset()/60*-1;return`${n}GMT${r>0?"+":""}${r}`.replace(/:/g,"")}()}]-Valuation_Period-(${N(new Date(c.value.start_date),!1)}~${N(new Date(c.value.end_date),!1)}).csv`,document.body.appendChild(o),o.click(),document.body.removeChild(o)}class ot extends Error{constructor(e){super(e),this.name="NonFatalError",Object.setPrototypeOf(this,ot.prototype)}}return{isGeneraingDoc:i,invoiceUrl:c.value,generateCashflow:async function(){r.value="";try{i.value=!0;const e=await async function(){const e=new Date(c.value.start_date);if("Invalid Date"===e.toString())throw r.value="Start date is invalid",new Error("Start date is invalid");const a=new Date(c.value.end_date);if("Invalid Date"===a.toString())throw r.value="End date is invalid",new Error("End date is invalid");const t=await s.get(`/items/${$e}`,{params:{fields:[Ee,B,"invoice_type"]}}),o={};await Promise.all(t.data.data.map((async t=>{var n,r,i,l,c;const d=await s.get(`/items/${be}`,{params:{filter:{[Pe]:{_eq:t[B]}},fields:[Se,Ce,Ne,Oe]}}),u=await s.get(`/items/${L}`,{params:{filter:{[W]:{_eq:t[B]}},fields:[B,oe,K,Y,X,z,re]}});for(const f of d.data.data){const d={days:f[Ce],day_type:f[Ne],ref_day:"Final"===f[Qa]?"QP Month + n days":f[Oe]};if(!d)throw new Error(`Contract ${t[Ee]} does not have a payment advice for invoice type ${f[Qa]}`);let m,p="";for(const y of u.data.data){switch(d.ref_day){case"Arrival Date":p="Actual Arrival Date from the Parcel form",m=null!=(n=y[K])?n:y[Y];break;case"B/L Date":p="B/L Date (or Estimated Shipment Date) from the Parcel form",m=null!=(r=y[X])?r:y[z];break;case"Invoice Date":p="Invoice Date (using the B/L Date or Estimated Shipment Date from the Parcel form)",m=null!=(i=y[X])?i:y[z];break;case"Estimated Shipment Date":p="Estimated Shipment Date from the Parcel form",m=y[z];break;case"QP Month + n days":const e=await s.get(`items/${Me}`,{params:{filter:{[ke]:{_eq:t[B]},[je]:{_eq:!0}},fields:[Je]}});if(!Array.isArray(e.data.data)||0===e.data.data.length)throw new Error(`Contract ${t[Ee]} does not have any payable commodities`);const a=e.data.data.map((e=>e[Je].find((e=>!!e.default)))),o=a.reduce(((e,a)=>a.qp_period>e.qp_period?a:e),a[0]);let u;switch(o.qp_code){case"MAMA":p="Actual Arrival Date (or Estimated Arrival Date) from the Parcel form",u=null!=(l=y[K])?l:y[Y];break;case"MOSS":case"MOS":case"MOAS":p="B/L Date (or Estimated Shipment Date) from the Parcel form",u=null!=(c=y[X])?c:y[z];break;default:throw new Error(`Unsupported QP code ${o.qp_code}, currently only supports MAMA, MOS, MOSS, and MOAS`)}const f=M(new Date(u),o.qp_period);if(!f||"Invalid Date"===f.toString())throw new Error(`Invalid date for last date of QP month: ${f}, please ensure all fields for QP for contract ${t[Ee]} and the ${p} in parcel ${y[oe]} are filled in`);m=f.toISOString();break;default:throw new Error(`Invalid reference day for payment advice: ${d.ref_day}; please contact Navarch for support`)}if(null==m)throw new Error(`Reference day for payment advice ${p} is empty in parcel ${y[oe]}`);const u=new Date(m),h=parseInt(d.days);let v;switch(d.day_type){case"Business Day(s)":v=T(u,h);break;case"Calendar Day(s)":v=new Date(u.valueOf()),v.getHours()>=12?v.setDate(v.getDate()+h+1):v.setDate(v.getDate()+h);break;default:throw new Error(`Please provide a valid Day Type (Cashflow) for ${t[Ee]}:Final Invoice Type`)}v>=e&&v<=a&&(o[y[B]]||(o[y[B]]=[]),o[y[B]].push({invoiceType:f[Se],dueDate:v,parcelId:y[B],contractName:t[Ee]}))}}})));const n=Object.keys(o),i=await s.get(`/items/${L}`,{params:{filter:{[B]:{_in:n}},fields:[B,W,G,H,Q,K,Y,X,z,Z,ee,ae,te,oe,ne,"parcel_finalised",re,H]}});if(!i.data.data||i.data.data.length!==n.length)throw new Error("Experiencing some network issues, please try again. If the issue persists, contact Navarch for support");const l={parcelData:i.data.data.reduce(((e,a)=>(e[a[B]]=a,e)),{}),contractNameByParcelId:n.reduce(((e,a)=>(e[a]=o[a][0].contractName,e)),{}),invoiceTypeParcel:n.flatMap((e=>o[e])),parcelIds:n};return console.log(`[getApplicableParcels] returnObject=${JSON.stringify(l)}`),l}(),a=await async function(e){const a=[],t=await s.get(`/items/${xa}`,{params:{filter:{[La]:{_in:e.parcelIds},[Wa]:{_nnull:!0}},fields:[La,Qa,Wa,Ga,Ha]}});t.data.data.sort(((e,a)=>{const t=et[e[Qa]]-et[a[Qa]];return 0===t?new Date(a[Ga]).valueOf()-new Date(e[Ga]).valueOf():t}));for(const o of e.invoiceTypeParcel){const n=t.data.data.find((e=>e[La]===o.parcelId&&e[Qa]===o.invoiceType));n?a.push({parcelId:o.parcelId,invoiceType:o.invoiceType,contractName:e.contractNameByParcelId[o.parcelId],dueDate:o.dueDate,invoiceData:{...n[Wa],amount_paid:n[Ha]}}):a.push({parcelId:o.parcelId,invoiceType:o.invoiceType,contractName:e.contractNameByParcelId[o.parcelId],dueDate:o.dueDate,parcelData:e.parcelData[o.parcelId]})}return console.log(`[generateInvoiceParamForParcel] invoiceParams=${JSON.stringify(a)}`),a}(e);console.log(`[generateCashflow] form values=${JSON.stringify(c.value)}`);const o=await Promise.all(a.map((async e=>(console.log(`[generateCashflow] invoiceParam=${JSON.stringify(e)}`),await async function(e){var a,t,o,n,l,c,u,f,m,y,h,v,g,_,$,D,b,P,N,O,I,T,U,M,k,F,V,x,Z,re,Ee,Na,Oa,Ia,Ta,Ua,Ba,qa,Ra;r.value="",i.value=!0;try{if(e.invoiceData){console.log(`[generateInvoice][invoice=${JSON.stringify(e.invoiceData.invoice_number)}::parcel=${e.invoiceData.parcel}] using existing invoice=${JSON.stringify(e.invoiceData)}`);const a=e.invoiceData,t=await s.get(`/items/${Ma}`,{params:{filter:{[Fa]:{_eq:a.buyer}},fields:[ka]}});yt(t.data.data[0]);const o=await s.get(`/items/${L}`,{params:{filter:{[B]:{_eq:e.parcelId}},fields:[X,K,Y]}});console.log(`[generateInvoice][invoice=${JSON.stringify(e.invoiceData.invoice_number)}::parcel=${e.invoiceData.parcel}] parcel date data=${JSON.stringify(o.data.data)}`);const n=o.data.data[0];return{Counterparty:t.data.data[0][ka],Vessel:"N/A"===a.vessel?"Vessel TBA":a.vessel,"Shipment Date":a.bl_date,"Arrival Date":n[K]?C(new Date(n[K])):n[Y]?C(new Date(n[Y])):"N/A",Status:o[X]?"Unfinalised":"Planned",Revision:"Original",Invoice:`${a.invoice_type}:Original`,Parcel:a.parcel,"Invoice Due Date":C(e.dueDate),"Dry Weight":`${p(a.dry_weight,4)} ${a.dry_weight_uom}`,"Total Revenues USD":p(a.total_revenue),"Total Penalties USD":p(a.total_deductions),...await st(a.commodities,{dryWeight:a.dry_weight,dryWeightUom:a.dry_weight_uom}),"Total Adjustments USD":a.adjustments?p(a.adjustments.total_adjustments):"0.00","Parcel Value USD":p(a.invoice_value),"Parcel Payable Value(Below Line) USD":p(a.payable_amount),"Payments USD":a.amount_paid,"Due Total":p(a.balance_in_sellers_favor),metadata:{invoiceTypeRanking:et[a.invoice_type]}}}if(void 0===e.parcelData)throw new ot(`Something went wrong, no parcel or invoice data for Invoice of parcel id ${e.parcelId.substring(0,5)} and invoice type ${e.invoiceType}`);const i=e.parcelId;if(!i)return void console.error(`[generateInvoice] A parcel id is not defined for invoice type ${e.invoiceType}`);const Ja=e.invoiceType,Ga=e.parcelData,Ha=e.contractName;console.log(`[generateInvoice][parcel=${Ga[oe]}::invoice type=${Ja}] parcel data=${JSON.stringify(Ga)}`),function(e){if(!e)throw new Error("Parcel data not found, please ensure the selected parcel still exists");if(!e[oe])throw new Error("One of the parcels does not have a shipment code, please ensure that all parcels have a shipment code");if(!e[W])throw new Error(`The parcel ${e[oe]} does not have a contract, please ensure that the contract field for the parcel is not empty`);if(!e[G])throw new Error(`The parcel ${e[oe]} does not havea counterparty, please ensure that the counterparty field for the parcel is not empty`);if(!e[H])throw new ot(`The parcel ${e[oe]} does not have assay results`);if(!e[Q])throw new ot(`The parcel ${e[oe]} does not have weight results`);if(!e[ae])throw new Error(`The parcel ${e[oe]} does not havean origin port`);if(!e[te])throw new Error(`The parcel ${e[oe]} does not havea destination port`)}(Ga);const Qa=Ga[H],Ka=Ga[Q],Ya=Ga[W];if(!Ya)throw new Error(`Contract not found for parcel ${Ga[oe]}`);const Xa=await s.get(`/items/${be}`,{params:{filter:{[Pe]:{_eq:Ya},[Se]:{_eq:Ja}},fields:[Se,Ae,Ce,Ne,Oe,Ie,Te,Ue]}});if(Xa.data.data&&0===Xa.data.data.length)throw new Error(`No invoice type found for the contract ${Ha}`);const za=Xa.data.data.find((e=>e[Se]===Ja));if(!za)throw new Error(`Cannot find payment information for ${Ja} in the contract ${Ha}, please ensure that data for it has been entered and saved`);const Za=await s.get(`/items/${ye}?filter[${q}]=${Ka}&sort[]=${R}`,{params:{fields:[B,he,ve,J,ge,_e,we]}});console.log(`[generateInvoice][parcel=${Ga[oe]}::invoice type=${Ja}] weight lots data=${JSON.stringify(Za.data.data)}`),function(e){if(!e||0===e.length)throw new ot("No weight lots found for the selected parcel")}(Za.data.data);const at=function(e){console.log("[evaluateWeights]");const a={};for(const t of e)a[t.method]||(console.log(`adding method ${t.method} to weightData object`),a[t.method]=[]),console.log(`adding lot ${t.id} to weightData.${t.method} array`),a[t.method.toString()].push(t);const t=[];for(const e of Object.keys(a)){if(!a[e]){console.log(`method=${e} does not exist in weightData object`);continue}console.log(`adding lots and other values to weights for method=${e}`);const o=d(a[e]);o&&t.push(o)}return t}(Za.data.data);let tt;if(tt||(tt=at.find((e=>"Outturn"===e.method))),tt||(tt=at.find((e=>"Inturn Final"===e.method))),tt||(tt=at.find((e=>"Inturn"===e.method))),tt||(tt=at.find((e=>"Estimated"===e.method))),tt||(tt=at.find((e=>"Planned"===e.method))),!tt)throw new Error(`No weight lots with valid method found for parcel ${Ga[oe]}`);if(void 0===tt.dry_weight||null===tt.dry_weight||void 0===tt.wet_weight||null===tt.wet_weight||void 0===tt.moisture||null===tt.moisture||void 0===tt.dry_weight_uom||null===tt.dry_weight_uom||void 0===tt.wet_weight_uom||null===tt.wet_weight_uom||void 0===tt.method||null===tt.method)throw new Error(`One of the fields for the latest weight lots data is undefined for parcel ${Ga[oe]}`);const nt=await s.get(`/items/${Ea}?filter[${Pa}]=${tt.dry_weight_uom}`,{params:{fields:[Aa]}}),ct=await s.get(`/items/${Ea}?filter[${Sa}]=${tt.wet_weight_uom}`,{params:{fields:[Ca]}});if(!nt.data.data||!nt.data.data[0]||!nt.data.data[0][Aa])throw new Error(`Dry weight uom not found for symbol ${tt.dry_weight_uom} for parcel ${Ga[oe]}`);if(!ct.data.data||!ct.data.data[0]||!ct.data.data[0][Ca])throw new Error(`Wet weight uom not found for symbol ${tt.wet_weight_uom} for parcel ${Ga[oe]}`);const ht=await s.get(`/items/${ie}?filter[${q}]=${Qa}&sort[]=${R}`,{params:{fields:[B,le,J,se,ce,de,ue,fe,pe,me]}});console.log(`[generateInvoice][parcel=${Ga[oe]}::invoice type=${Ja}] assay lots data=${JSON.stringify(ht.data.data)}`),function(e){if(!e||0===e.length)throw new ot("No assay lots found for the selected parcel")}(ht.data.data);const vt=function(e){var a;console.log("[evaluateAnalyticalAssay]");const t={};for(const a of e)t[a.method]||(t[a.method]={}),t[a.method][a.commodity]||(t[a.method][a.commodity]=[]),null!==a.lot_number?(1===t[a.method][a.commodity].length&&null===t[a.method][a.commodity][0].lot_number&&(t[a.method][a.commodity]=[]),t[a.method][a.commodity].push(a)):null===a.lot_number&&0===t[a.method][a.commodity].length&&t[a.method][a.commodity].push(a);console.log(`[evaluateAnalyticalAssay] group: ${JSON.stringify(t)}}`);const o={};for(const e in t){console.log(`[evaluateAnalyticalAssay] methodKey: ${e}, group[methodKey]: ${JSON.stringify(t[e])}`);for(const n in t[e]){console.log(`[evaluateAnalyticalAssay] commodityKey: ${n}, group[methodKey][commodityKey]: ${JSON.stringify(t[e][n])}`),o[e]=null!=(a=o[e])?a:{},o[e][n]={};const i=t[e][n].reduce(((e,a)=>e+parseFloat(a.dry_weight)),0);if(console.log(`[evaluateAnalyticalAssay] totalDryWeight: ${i} from ${JSON.stringify(t[e][n])}`),0===i||isNaN(i))throw r.value=`Please provide dry weight for ${n} commodity in ${e} method, total dry weight cannot be ${i}`,new Error("[evaluateAnalyticalAssay] totalDryWeight is 0");console.log(`[evaluateAnalyticalAssay] totalDryWeight: ${i}`),o[e][n].analytical_assay=t[e][n].reduce(((a,t)=>{var o,i,l;const s=parseFloat(null!=(i=t.final_assay)?i:null!=(o=t.seller_assay)?o:t.buyer_assay);if(null==s)throw r.value=`Please provide Final, Seller or Buyer assay value for ${n} commodity in ${e} method`,new Error("[evaluateAnalyticalAssay] assay value is not defined for assay lot");const c=a+s*parseFloat(null!=(l=t.dry_weight)?l:"0");return console.log(`[evaluateAnalyticalAssay] evaluated analytical assay: ${c} for method=${e}, commodity=${n}; with values accumulator=${a}, assayValue=${s}, dryWeight=${t.dry_weight}`),c}),0)/i,console.log(`[evaluateAnalyticalAssay] analytical assay: ${o[e][n].analytical_assay}`),t[e][n].length>0&&(o[e][n][me]=t[e][n][0][me])}}return console.log(`[evaluateAnalyticalAssay] analyticalAssay: ${JSON.stringify(o)}`),o}(ht.data.data);let gt;if(gt||(gt=vt.Outturn),gt||(gt=vt["Inturn Final"]),gt||(gt=vt.Inturn),gt||(gt=vt.Estimated),gt||(gt=vt.Planned),!gt)throw new Error(`No assay lot data with a valid method found for parcel ${Ga[oe]}`);console.log(`[generateInvoice][parcel=${Ga[oe]}::invoice type=${Ja}] weight lots for invoice evaluation=${JSON.stringify(tt)}`),console.log(`[generateInvoice][parcel=${Ga[oe]}::invoice type=${Ja}] assay lots for invoice evaluation=${JSON.stringify(gt)}`);const _t=await s.get(`/items/${$e}/${Ya}`,{params:{fields:[De]}});!function(e){if(!e)throw new Error("Contract data not found, please ensure the selected contract still exists");if(!e[De])throw new Error("The selected contract does not have a set currency, please ensure that the currency field for the contract is not empty")}(_t.data.data);const wt=await s.get(`/items/${$a}/${_t.data.data.contract_currency}`,{params:{fields:[Da]}});!function(e){if(!e)throw new Error("Currency data not found, please ensure the selected currency still exists");if(!e[Da])throw new Error("The selected currency in the contract is not valid")}(wt.data.data);const $t=wt.data.data.code,Dt=await s.get(`/items/${Me}?filter[${ke}]=${Ya}`,{params:{fields:["id",Fe,Ve,je,Be,Je,xe,Le,We,qe,Re]}});!function(e){if(!e||0===e.length)throw new Error("No commodity data found in selected contract for parcel");if(!e.every((e=>e[Fe])))throw new Error("The selected contract has an undefined commodity, please ensure that the 'Commodity' field for all commodites in the contract is not empty");if(!e.every((e=>!e[je]||e[qe])))throw new Error("The selected contract has an undefined base price Uom for commodity, please ensure that the 'Base Price Uom' field for all commodites in the contract is not empty")}(Dt.data.data),console.log(`[generateInvoice][parcel=${Ga[oe]}::invoice type=${Ja}] contract commodity data=${JSON.stringify(Dt.data.data)}`);const Et=[],bt=[];let Pt="";for(const{id:e,commodity:r,primary_commodity:i,price_method:d,quotational_periods:w,price_per_uom:q,penalty_per_uom:R,treatment_charge_per_uom:J}of Dt.data.data){const L=await s.get(`/items/${ga}/${r}`,{params:{fields:[_a,wa,B]}});if(ut(L.data.data,r),!gt[L.data.data.code]){console.log(`[generateInvoice][parcel=${Ga[oe]}::invoice type=${Ja}::comm=${L.data.data[_a]}] no analytical assay for commodity ${L.data.data.code} found, skipping...`);continue}if(i&&(Pt=L.data.data[_a]),null!==w){const r=w;console.log(`[generateInvoice][parcel=${Ga[oe]}::invoice type=${Ja}::comm=${L.data.data[_a]}] qp=${JSON.stringify(r)}`);const i=Array.isArray(r)?r.find((e=>e.default)):null;if(!i)throw new Error(`No default quotational period found for commodity ${L.data.data.code}`);const A=r.filter((e=>!e.default)).map((e=>`${e.qp_period} ${e.qp_code}`)),R=[`${i.qp_period} ${i.qp_code}`,...A].join(", ");console.log(`[generateInvoice][parcel=${Ga[oe]}::invoice type=${Ja}::comm=${L.data.data[_a]}] evaluate payable assay for ${L.data.data.code} with an analytical assay=${null==(a=gt[L.data.data.code])?void 0:a.analytical_assay}`);const W=await s.get(`/items/${Ge}?filter[${Ze}]=${e}`,{params:{fields:[ea,aa,ta,oa,na,ra,ia,He,Qe,Ke,Ye,Xe,ze]}}),{payableAssay:G,expression:H}=await E(null==(t=gt[L.data.data.code])?void 0:t.analytical_assay,null==(o=gt[L.data.data.code])?void 0:o.assay_uom,W.data.data,L.data.data[_a]);let Q=null,K=null,Y=null;if("Final"!==Ja){const e=await rt(L.data.data.code,Ga,d,(async()=>it(za,Ga,Ja,Ha)));if(null===e)throw new Error(`[generateInvoice] Provisional pricing dates not found for commodity ${L.data.data.code}`);if(null===e.provisionalPricingStartDate||!(e.provisionalPricingStartDate instanceof Date))throw new Error(`[generateInvoice] Invalid provisional pricing start date for commodity ${L.data.data.code} of invoice type ${Ja}`);if(Q=e.provisionalPricingStartDate,null===e.provisionalPricingEndDate||!(e.provisionalPricingEndDate instanceof Date))throw new Error(`[generateInvoice] Invalid provisional pricing end date for commodity ${L.data.data.code} of invoice type ${Ja}`);K=e.provisionalPricingEndDate,Y=e.expectedNoOfBusinessDays}else{const e=await rt(L.data.data.code,Ga,d,(async()=>lt(i,Ga,Ha,L.data.data[_a])),!0);if(null===e)throw new Error(`[generateInvoice] Provisional pricing dates not found for commodity ${L.data.data.code}`);if(null===e.provisionalPricingStartDate||!(e.provisionalPricingStartDate instanceof Date))throw new Error(`[generateInvoice] Invalid provisional pricing start date for commodity ${L.data.data.code} of invoice type ${Ja}`);if(Q=e.provisionalPricingStartDate,null===e.provisionalPricingEndDate||!(e.provisionalPricingEndDate instanceof Date))throw new Error(`[generateInvoice] Invalid provisional pricing end date for commodity ${L.data.data.code} of invoice type ${Ja}`);K=e.provisionalPricingEndDate}console.log(`[generateInvoice][parcel=${Ga[oe]}::invoice type=${Ja}::comm=${L.data.data[_a]}] provisional pricing date range: ${Q.toString()} - ${K.toString()}`);const X=await dt(L.data.data.code,L.data.data[B],d,Q,K,Y),z=X.averagePrice;let ee;Q=X.startDate,K=X.endDate,console.log(`[generateInvoice] average price within period: ${z} with start date=${Q} and end date=${K}`);const ae=await s.get(`/items/${la}?filter[${fa}]=${e}`,{params:{fields:[aa,ta,oa,na,sa,ca,da,ua,ra]}});let te,ne;if(void 0!==ae.data.data&&null!==ae.data.data&&ae.data.data.length>0&&(ee=await S(z,null==(n=gt[L.data.data.code])||n.assay_uom,ae.data.data,L.data.data[_a],"treatment charge")),ee){if(!J)throw new Error(`Charge Rate UOM is not defined for commodity ${L.data.data[_a]}`);const e=await s.get(`/items/${Ea}/${J}`,{params:{fields:[ba]}});mt(e.data.data,L.data.data[_a]),te=e.data.data[ba]}const ie=await s.get(`/items/${la}?filter[${ma}]=${e}`,{params:{fields:[aa,ta,oa,na,sa,ca,da,ua,ra]}});if(void 0!==ie.data.data&&null!==ie.data.data&&ie.data.data.length>0&&(ne=await S(z,null==(l=gt[L.data.data.code])||l.assay_uom,ie.data.data,L.data.data[_a],"refining charge")),ne){if(!J)throw new Error(`Charge Rate UOM is not defined for commodity ${L.data.data[_a]}`);const e=await s.get(`/items/${Ea}/${J}`,{params:{fields:[ba]}});mt(e.data.data,L.data.data[_a]),te=e.data.data[ba]}const le=await s.get(`/items/${Ea}/${q}`,{params:{fields:[ba]}});ft(le.data.data,L.data.data[_a]);const se=le.data.data[ba],ce=await j(se,tt.dry_weight_uom,null==(c=gt[L.data.data.code])?void 0:c.assay_uom);console.log(`[generateInvoice][parcel=${Ga[oe]}::invoice type=${Ja}::comm=${L.data.data[_a]}] payableMetalConversion for commodity ${L.data.data.name}: ${JSON.stringify(ce)}`),ce.initialConversion=1===(null==(u=ce.initialConversion)?void 0:u.conversionFactor)?void 0:ce.initialConversion,ce.finalConversion=1===(null==(f=ce.finalConversion)?void 0:f.conversionFactor)?void 0:ce.finalConversion,Et.push({commodity:L.data.data.name,analytical_assay:p(null==(m=gt[L.data.data.code])?void 0:m.analytical_assay,4),deduction_expression:H,payable_assay:p(G,4),assay_uom:null==(y=gt[L.data.data.code])?void 0:y.assay_uom,payable_metal:p(tt.dry_weight*(null!=(v=null==(h=ce.initialConversion)?void 0:h.conversionFactor)?v:1)*(null!=G?G:1)*(null!=(_=null==(g=ce.finalConversion)?void 0:g.conversionFactor)?_:1)*("%"!==(null==($=gt[L.data.data.code])?void 0:$.assay_uom)?1:.01),4),payable_metal_expression:`${p(tt.dry_weight,4)}${tt.dry_weight_uom}${ce.initialConversion?` * ${p(ce.initialConversion.conversionFactor,4)}${ce.initialConversion.conversionUom}`:""} * ${p(null!=G?G:1,4)}${"%"!==(null==(D=gt[L.data.data.code])?void 0:D.assay_uom)?`${null==(b=gt[L.data.data.code])?void 0:b.assay_uom}`:" / 100"}${ce.finalConversion?` * ${p(ce.finalConversion.conversionFactor,4)}${ce.finalConversion.conversionUom}`:""}`,payable_metal_uom:se,qp:R,qp_start_date:C(Q),qp_end_date:C(K),price_method:d,price_rate:p(z,4),price_per_uom:se,price:p(tt.dry_weight*(null!=(N=null==(P=ce.initialConversion)?void 0:P.conversionFactor)?N:1)*(null!=G?G:1)*(null!=(I=null==(O=ce.finalConversion)?void 0:O.conversionFactor)?I:1)*("%"!==(null==(T=gt[L.data.data.code])?void 0:T.assay_uom)?1:.01)*z),treatment_charge:ee?{rate:p(ee.baseTreatmentCharge,4),discount:p((null!=(U=ee.baseTreatmentCharge)?U:0)-(null!=(M=ee.finalValue)?M:0),4),final_rate:p(ee.finalValue,4),per_uom:te,final_amount:p(tt.dry_weight*(null!=(k=ee.finalValue)?k:1))}:void 0,refining_charge:ne?{rate:p(ne.baseTreatmentCharge,4),discount:p((null!=(F=ne.baseTreatmentCharge)?F:0)-(null!=(V=ne.finalValue)?V:0),4),final_rate:p(ne.finalValue,4),per_uom:te,final_amount:p(tt.dry_weight*(null!=(x=ne.finalValue)?x:1))}:void 0,final_total:p(tt.dry_weight*(null!=(re=null==(Z=ce.initialConversion)?void 0:Z.conversionFactor)?re:1)*(null!=G?G:1)*(null!=(Na=null==(Ee=ce.finalConversion)?void 0:Ee.conversionFactor)?Na:1)*("%"!==(null==(Oa=gt[L.data.data.code])?void 0:Oa.assay_uom)?1:.01)*z-(ee?1:0)*(tt.dry_weight*(null!=(Ia=null==ee?void 0:ee.finalValue)?Ia:1))-(ne?1:0)*(tt.dry_weight*(null!=(Ta=null==ne?void 0:ne.finalValue)?Ta:1)))})}const W=await s.get(`/items/${pa}?filter[${Ze}]=${e}`,{params:{fields:[aa,ta,oa,na,ya,ha,va,ra]}});if(W.data.data.length>0){if(null===R)throw new Error(`Please fill in the field for Penalty Per UOM in contract ${Ha} for commodity ${L.data.data[_a]}`);const e=await s.get(`/items/${Ea}/${R}`,{params:{fields:[ba]}});pt(e.data.data,L.data.data[_a]);const a=e.data.data[ba],{penalty:t,expression:o,bracket:n}=await A(null==(Ua=gt[L.data.data.code])?void 0:Ua.analytical_assay,W.data.data,$t,a,L.data.data[_a]);console.log(`[generateInvoice][parcel=${Ga[oe]}::invoice type=${Ja}::comm=${L.data.data[_a]}] evaluated penalty with an analytical assay=${null==(Ba=gt[L.data.data.code])?void 0:Ba.analytical_assay}, penaltyRate=${null==n?void 0:n.rate}, finalPenaltyRate=${t}, expression='${o}'`),bt.push({commodity:L.data.data.name,analytical_assay:p(null==(qa=gt[L.data.data.code])?void 0:qa.analytical_assay,4),deduction_expression:o,assay_uom:null==(Ra=gt[L.data.data.code])?void 0:Ra.assay_uom,penalty_rate:p(null==n?void 0:n.rate,4),penalty_per_uom:a,final_penalty_rate:p(t,4),final_penalty:p((null!=t?t:1)*tt.dry_weight)})}}console.log(`[generateInvoice][parcel=${Ga[oe]}::invoice type=${Ja}] evaluated commodities=${JSON.stringify(Et)}`),console.log(`[generateInvoice][parcel=${Ga[oe]}::invoice type=${Ja}] evaluated penalties${JSON.stringify(bt)}`);const St=Et.reduce(((e,a)=>e+w(a.price)),0),At=Et.reduce(((e,a)=>{var t;return e+w(null==(t=a.treatment_charge)?void 0:t.final_amount)}),0),Ct=Et.reduce(((e,a)=>{var t;return e+w(null==(t=a.refining_charge)?void 0:t.final_amount)}),0),Nt=bt.reduce(((e,a)=>e+w(a.final_penalty)),0);console.log(`[generateInvoice][parcel=${Ga[oe]}::invoice type=${Ja}] TOTAL_REVENUE=${St}, TOTAL_TREATMENT_CHARGE=${At}, TOTAL_REFINING_CHARGE=${Ct}, TOTAL_PENALTIES=${Nt}`);let Ot,It=0;const Tt=!!Ga[ne];Tt&&(It=Ga[ne].reduce(((e,a)=>e+a.amount),0),Ot={adjustments:Ga[ne].map((e=>({description:e.description,amount:p(e.amount)}))),total_adjustments:p(It)});const Ut=za[Ae],Mt=St-At-Ct-Nt,kt=null!=Ut?Mt*Ut/100+It:void 0,Ft=await s.get(`/items/${Ma}/${Ga[G]}`,{params:{fields:[ka]}});yt(Ft.data.data);const Vt=Ga[ee];let jt;Vt&&(jt=await s.get(`/items/${Va}/${Vt}`,{params:{fields:[ja]}}),function(e){if(console.log("[validateVessel]"),!e)throw new Error("Vessel for parcel not found");if(!e[ja])throw new Error("No name defined for vessel of the selected parcel")}(jt.data.data));let Bt=(await s.get(`/items/${xa}?filter[${La}]=${i}`,{params:{fields:["id",Wa]}})).data.data.reduce(((e,a)=>e+(a[Wa]?1:0)),0)+1,qt=i;const Rt=Bt.toString().padStart(2,"0"),Jt=(Ga[oe],qt.toString().padStart(2,"0")),xt={Counterparty:Ft.data.data[ka],Vessel:jt?jt.data.data[ja]:"Vessel TBA","Shipment Date":Ga[X]?C(new Date(Ga[X])):Ga[z]?C(new Date(Ga[z])):"N/A","Arrival Date":Ga[K]?C(new Date(Ga[K])):Ga[Y]?C(new Date(Ga[Y])):"N/A",Status:Ga[X]?"Unfinalised":"Planned",Revision:"Valuation",Invoice:`${Ja}:Valuation`,Parcel:`${Ga[oe]} (#${Jt})`,"Invoice Due Date":C(e.dueDate),"Dry Weight":`${p(tt.dry_weight,4)} ${tt.dry_weight_uom}`,"Total Revenues USD":p(St),"Total Penalties USD":p(Nt+At+Ct),...await st(Et,{dryWeight:tt.dry_weight,dryWeightUom:tt.dry_weight_uom}),"Total Adjustments USD":Tt?Ot.total_adjustments:"0.00","Parcel Value USD":p(Mt),"Parcel Payable Value(Below Line) USD":p(kt),"Payments USD":"-","Due Total":"-",metadata:{invoiceTypeRanking:et[Ja]}};return console.log(`[generateInvoice][parcel=${Ga[oe]}::invoice type=${Ja}] generated forecast invoice=${JSON.stringify(xt)}`),xt}catch(a){if(a instanceof ot)return void console.error(`[generateInvoice][parcel=${e.parcelId}::invoice type=${e.invoiceType}]Non-fatal error: ${a.message}`);throw a}}(e))))),n=function(e){const a=e.reduce(((e,a)=>(e[a.Parcel]||(e[a.Parcel]=[]),e[a.Parcel].push(a),e)),{});Object.keys(a).forEach((e=>{a[e].sort(((e,a)=>e.metadata.invoiceTypeRanking<a.metadata.invoiceTypeRanking?-1:e.metadata.invoiceTypeRanking>a.metadata.invoiceTypeRanking?1:0))})),console.log(`[evaluateDuePaymentsForCashflow] cashflowByParcel=${JSON.stringify(a)}`),Object.keys(a).forEach((e=>{a[e].forEach(((t,o)=>{if(!t["Parcel Payable Value(Below Line) USD"]||"-"===t["Parcel Payable Value(Below Line) USD"])throw new Error(`Parcel ${e} for invoice ${t.Invoice} does not have a Parcel Payable Value(Below Line) USD`);const n=w(t["Parcel Payable Value(Below Line) USD"]);if(isNaN(n))throw new Error(`Parcel ${e} for invoice ${t.Invoice} has an invalid Parcel Payable Value(Below Line) USD of ${t["Parcel Payable Value(Below Line) USD"]}`);if(0===o){t["Payments USD"]=t["Payments USD"]&&"-"!==t["Payments USD"]?t["Payments USD"]:"0.00";const e=w(t["Payments USD"]);t["Due Total"]=p(n-e)}else{if(!a[e][o-1]["Parcel Payable Value(Below Line) USD"]||"-"===a[e][o-1]["Parcel Payable Value(Below Line) USD"])throw new Error(`Parcel ${e} for invoice ${t.Invoice} does not have a Parcel Payable Value(Below Line) USD for the previous invoice`);const r=w(a[e][o-1]["Parcel Payable Value(Below Line) USD"]);if(isNaN(r))throw new Error(`Parcel ${e} for invoice ${t.Invoice} has an invalid Parcel Payable Value(Below Line) USD of ${a[e][o-1]["Parcel Payable Value(Below Line) USD"]} for the previous invoice`);t["Due Total"]=p(n-r),t["Payments USD"]&&"-"!==t["Payments USD"]||(t["Payments USD"]=a[e][o-1]["Payments USD"])}}))})),console.log(`[evaluateDuePaymentsForCashflow] cashflowByParcel=${JSON.stringify(a)}`);const t=Object.keys(a).flatMap((e=>a[e]));return console.log(`[evaluateDuePaymentsForCashflow] cashflowAsJsonWithDueTotal=${JSON.stringify(t)}`),t}(o.filter((e=>!!e))),l=n.map((e=>(delete e.metadata,e))),u=at(l);t("input",l),console.log(`[generateCashflow] cashflow response: ${JSON.stringify(l)}`),console.log(`[generateCashflow] cashflow as csv: ${u}`),i.value=!1,nt(u)}catch(e){r.value=e.message}finally{i.value=!1}},downloadDoc:nt,copy:async function(){l.value=!0;const{id:e,user_created:a,date_created:t,user_updated:o,date_updated:n,cashflow:i,forecast_price:d,...u}=c.value,f=await s.get(`/items/${Ka}`,{params:{filter:{[B]:d},fields:[Ya,za,Za,Xa]}}),m=await s.post(`items/${Ka}`,f.data.data);if(200!==m.status)return console.log(`[cashflow::copy] duplicate forecast prices response status: ${m.status}`),void(r.value=`Failed to duplicate forecast prices with status ${m.status}`);const p=m.data.data.map((e=>e.id));console.log(`[cashflow::copy] duplicated forecast prices id=${JSON.stringify(p)}`),console.log(`[cashflow::copy] requestBody=${JSON.stringify(u)}`);const y=await s.post("/items/"+x,{forecast_price:p,...u});if(200!==y.status)return console.log(`[cashflow::copy] copy response status: ${y.status}`),void(r.value=`Failed to duplicate cashflow with status ${y.status}`);l.value=!1,window.open(`/admin/content/${x}/${y.data.data.id}`)},isCopying:l,failureReason:r};function nt(e){let a;a=m(e)?at(c.value.cashflow):e,console.log(`[downloadDoc] csvData=${a}`),tt(a)}async function rt(e,a,t,o,n=!1){if(m(a[Z])||m(a[Z][e]))return await o();const r=await async function(e,a,t,o){if(o&&!e.declared)return null;const n=null==e?void 0:e.qp_selected;if(!n)return null;const r=n.split(" "),i={qp_period:parseInt(r[0]),qp_code:r[1]};let l,c,d,u;switch(i.qp_code){case"MAMA":l=K,c="Actual Arrival Date";break;case"MOSS":l=z,c="Estimated Shipment Date";break;case"MOS":case"MOAS":l=X,c="B/L Date";break;default:throw new Error(`Unsupported QP code ${i.qp_code} in the contract commodities, please ensure all commodity QP codes are MAMA, MOS, MOSS, or MOAS`)}const f=new Date(a[l]);if(null==f)throw new Error(`[generateInvoice] Invalid reference day for ${c} from ${i.qp_code}`);if(d=U(f,i.qp_period),d.valueOf()>Date.now())return null;if(u=M(f,i.qp_period),u.valueOf()>Date.now())return null;if(u.valueOf()<=Date.now()){const e=await s.get(`/items/${Ba}`,{params:{filter:{_and:[{date:{_eq:N(u)}},{price_method:{_eq:t}}]},fields:[qa,Ra]}});if(!e.data.data||0===e.data.data.length)return null}return{provisionalPricingStartDate:d,provisionalPricingEndDate:u,expectedNoOfBusinessDays:null}}(a[Z][e],a,t,n);return r||await o()}async function it(e,a,t,o){var n,r,i;let l,s,c;const d={invoice_type:t,days:e[Ie],day_type:e[Te],ref_day:e[Ue]};if(!d)throw new Error(`No provisional pricing found for invoice type ${t} for parcel ${a[oe]}`);let u;switch(d.ref_day){case"Arrival Date":u=null!=(n=a[K])?n:a[Y],l="Actual Arrival Date from the Parcel form";break;case"B/L Date":u=null!=(r=a[X])?r:a[z],l="B/L Date from the Parcel form";break;case"Invoice Date":u=null!=(i=a[X])?i:a[z],l="B/L Date (or Estimated Date) as Invoice Date";break;case"Estimated Shipment Date":u=a[z],l="Estimated Shipment Date from the Parcel form";break;default:throw new Error(`Invalid reference day for invoice pricing: ${d.ref_day}; please contact Navarch for support`)}if(null==u)throw new Error(`Reference day for invoice pricing ${l} is empty`);c=new Date(u),c.setDate(c.getDate()-1);const f=parseInt(d.days),m=d.day_type;let p=null;switch(m){case"Business Day(s)":p=f,s=O(c,f),(0===c.getDay()||6===c.getDay())&&(c=O(c,1,!0));break;case"Calendar Day(s)":s=new Date(c.valueOf()),s.setDate(s.getDate()-f);break;default:throw new Error(`Invalid day type ${m} from contract ${o} for invoice type ${t}`)}return{provisionalPricingStartDate:s,provisionalPricingEndDate:c,expectedNoOfBusinessDays:p}}async function lt(e,a,t,o){var n,r;let i,l,s,c;switch(e.qp_code){case"MAMA":c=new Date(null!=(n=a[K])?n:a[Y]),i="Actual Arrival Date";break;case"MOSS":case"MOS":case"MOAS":c=new Date(null!=(r=a[X])?r:a[z]),i="Estimated Shipment Date";break;default:throw new Error(`Unsupported QP code ${e.qp_code} in the contract ${t}, please ensure all commodity QP codes are MAMA, MOS, MOSS, or MOAS`)}if(null==c)throw new Error(`Invalid reference day for ${i} from contract ${t} for commodity ${o}`);return l=U(c,e.qp_period),s=M(c,e.qp_period),{provisionalPricingStartDate:l,provisionalPricingEndDate:s,expectedNoOfBusinessDays:null}}async function st(e,a){console.log(`[mapOutCommoditiesForCashflow] commodities=${JSON.stringify(e)};;containedMetalParam=${JSON.stringify(a)}`);return(await Promise.all(e.map((async e=>{var t,o,n,r,i,l,s;const c=await j(e.payable_metal_uom,a.dryWeightUom,e.assay_uom);console.log(`[mapOutCommoditiesForCashflow] commodity=${e.commodity}, containedMetalUnitConversion=${JSON.stringify(c)}`);const d=(null!=(o=null==(t=c.initialConversion)?void 0:t.conversionFactor)?o:1)*(null!=(r=null==(n=c.finalConversion)?void 0:n.conversionFactor)?r:1),u=("%"===e.assay_uom?.01:1)*e.analytical_assay;return{[`${e.commodity} Payable Metal (${e.payable_metal_uom})`]:e.payable_metal,[`${e.commodity} Contained Metal (${e.payable_metal_uom})`]:p(a.dryWeight*u*d),[`${e.commodity} Revenue (USD)`]:e.price,[`${e.commodity} QP Month`]:ct(new Date(e.qp_start_date)),[`${e.commodity} Price (USD/${e.price_per_uom})`]:e.price_rate,[`${e.commodity} TC (USD)`]:null==(i=e.treatment_charge)?void 0:i.final_amount,[`${e.commodity} TC (USD/${null==(l=e.treatment_charge)?void 0:l.per_uom})`]:null==(s=e.treatment_charge)?void 0:s.final_rate}})))).reduce(((e,a)=>({...e,...a})),{})}function ct(e){return`${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][e.getMonth()]} ${e.getFullYear()}`}async function dt(e,a,t,o,n,r,i=1){var l;if(console.log(`[getCommodityAvgPrice] commodity=${e}, commodityId=${a}, source=${t}, startDate=${o}, endDate=${n}, currency=${i}`),m(e))throw new Error(`Commodity ${e} is not defined for price calcualtion`);if(m(t))throw new Error(`Price method for commodity ${e} is not defined for price calcualtion`);if(m(o))throw new Error(`Start date is not defined for price calcualtion with Price Method #${t} has not been properly defined, please ensure that contract QP for commodity ${e} is properly defined`);if(m(n))throw new Error(`End date is not defined for price calcualtion with Price Method #${t} has not been properly defined, please ensure that contract QP for commodity ${e} is properly defined`);const d=new Date(o.valueOf());null===r||isNaN(r)||d.setDate(d.getDate()-10);const u=await s.get(`/items/${Ba}?filter[_and][0][price_method][_eq]=${t}&filter[_and][0][currency][_eq]=${i}&filter[_and][1][date][_between][0]=${N(d)}&filter[_and][1][date][_between][1]=${N(n)}&sort[]=-${Ja}`,{params:{fields:[qa,Ra,Ja,"price_method"]}});if((null==(l=u.data)?void 0:l.data)&&Array.isArray(u.data.data)&&u.data.data.length>0){const a=u.data.data[u.data.data.length-1],i=new Date(a[Ja]);if(console.log(`[getCommodityAvgPrice] commodity prices=${JSON.stringify(u.data.data)}`),i>=n){if(null!=r&&u.data.data.length<r)throw new Error(`Not enough commodity prices found for commodity ${e} between ${N(o)} and ${N(n)}, please contact Navarch for support`);const a=null===r||isNaN(r)?u.data.data:u.data.data.slice(0,r),i=a.reduce(((a,o)=>{if(!o[Ra]&&!o[qa])throw new Error(`Commodity ${e} for Price Method #${t} on the date of ${o[Ja]} does not have a price, please contact Navarch for assistance`);let n;if(null!==o[Ra]&&(n=Number(o[Ra])),null===o[qa])throw new Error(`The commodity price for ${e} of Price Method #${t} for the date of ${o[Ja]} is not a valid number, please contact Navarch for assistance`);return n=Number(o[qa]),a+n}),0)/a.length;return console.log(`[getCommodityAvgPrice] average price=${i} for commodity ${e} between ${N(o)} (with over-adjusted start date of ${N(d)}) and ${N(n)}`),{averagePrice:i,startDate:new Date(a[a.length-1][Ja]),endDate:new Date(a[0][Ja])}}console.log(`[getCommodityAvgPrice] latest comm price date=${i} is before end date=${n}, getting forecast price`)}if(!c.value[B])throw new Error("Please save the Cashflow form first before generating the cashflow doc");const f=await s.get(`/items/${Ka}`,{params:{filter:{[Ya]:{_eq:a},cashflow_forecast_id:{_eq:c.value[B]}},fields:[Xa,Ya,za,Za]}});!function(e,a){if(!e||!Array.isArray(e)||0===e.length)throw new Error(`No forecast price found for ${a}, please ensure prices have been provided`)}(f.data.data,e);const p=f.data.data.find((e=>{const a=new Date(e[za]),t=new Date(e[Za]);return a<=o&&t>=n}));if(!p)throw new Error(`No single forecast price found for commodity ${e} between ${N(o)} and ${N(n)}, please ensure there is only one price value for this range`);return console.log(`[getCommodityAvgPrice] forecast price=${p[Xa]} for commodity ${e} between ${N(o)} and ${N(n)}`),{averagePrice:p[Xa],startDate:new Date(p[za]),endDate:new Date(p[Za])}}function ut(e,a){var t,o,n;if(console.log("[validateCommodityData]"),!e)throw new Error("commodity data response is null");if(!e[_a])throw new Error(`Commodity name for commodity ${null!=(t=e[wa])?t:a} is undefined, please contact Navarch for assistance`);if(!e[wa])throw new Error(`Commodity code for commodity ${null!=(o=e[_a])?o:a} is not defined, please contact Navarch for assistance`);if(!e[B])throw new Error(`Commodity ID for commodity ${null!=(n=e[_a])?n:a} is not defined, please contact Navarch for assistance`)}function ft(e,a){if(!e)throw new Error(`Price per UOM for commodity ${a} is not a valid`);if(!e[ba])throw new Error(`Price per UOM for commodity ${a} does not have a valid unit symbol, please contact Navarch for assistance`)}function mt(e,a){if(!e)throw new Error(`Charge per UOM for commodity ${a} is not a valid`);if(!e[ba])throw new Error(`Charge per UOM for commodity ${a} does not have a valid unit symbol, please contact Navarch for assistance`)}function pt(e,a){if(!e)throw new Error(`Penalty per UOM for commodity ${a} is not a valid`);if(!e[ba])throw new Error(`Penalty per UOM for commodity ${a} does not have a valid unit symbol, please contact Navarch for assistance`)}function yt(e){if(console.log("[validateCounterparty]"),!e)throw new Error("Counterparty for parcel not found");if(!e[ka])throw new Error("No codename defined for counterparty of the selected parcel")}}});const w={key:0},$={key:1};var D=[],E=[];!function(e,a){if(e&&"undefined"!=typeof document){var t,o=!0===a.prepend?"prepend":"append",n=!0===a.singleTag,r="string"==typeof a.container?document.querySelector(a.container):document.getElementsByTagName("head")[0];if(n){var i=D.indexOf(r);-1===i&&(i=D.push(r)-1,E[i]={}),t=E[i]&&E[i][o]?E[i][o]:E[i][o]=l()}else t=l();65279===e.charCodeAt(0)&&(e=e.substring(1)),t.styleSheet?t.styleSheet.cssText+=e:t.appendChild(document.createTextNode(e))}function l(){var e=document.createElement("style");if(e.setAttribute("type","text/css"),a.attributes)for(var t=Object.keys(a.attributes),n=0;n<t.length;n++)e.setAttribute(t[n],a.attributes[t[n]]);var i="prepend"===o?"afterbegin":"beforeend";return r.insertAdjacentElement(i,e),e}}(".margin-top-16px[data-v-64969d30] {\n  margin-top: 16px;\n}",{}),_.render=function(e,a,t,o,n,y){const h=r("v-button"),v=r("v-notice");return i(),l(s,null,[c(' <input :value="value" @input="handleChange($event.target.value)" /> '),c(" create a button only interface for Directus"),e.value?(i(),l("div",$,[d(h,{onClick:a[1]||(a[1]=()=>e.downloadDoc())},{default:u((()=>[f("Download Cashflow ")])),_:1})])):(i(),l("div",w,[d(h,{onClick:a[0]||(a[0]=()=>e.generateCashflow()),loading:e.isGeneraingDoc},{default:u((()=>[f("Generate Cashflow")])),_:1},8,["loading"]),e.failureReason?(i(),m(v,{key:0},{default:u((()=>[f(p(e.failureReason),1)])),_:1})):c("v-if",!0)])),d(h,{class:"margin-top-16px",onClick:a[2]||(a[2]=()=>e.copy()),loading:e.isCopying},{default:u((()=>[f("Copy")])),_:1},8,["loading"])],64)},_.__scopeId="data-v-64969d30",_.__file="src/interface.vue";var b=a({id:"navarch-docgen-cashflow",name:"Navarch Cashflow Generator Button",icon:"receipt_long",description:"This is my custom interface for Navarch's Cashflow Doc!",component:_,options:null,types:["json"],group:"standard"});export{b as default};
