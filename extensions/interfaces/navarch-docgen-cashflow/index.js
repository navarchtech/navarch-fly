import{useApi as e,defineInterface as t}from"@directus/extensions-sdk";import{defineComponent as a,ref as o,inject as n,resolveComponent as r,openBlock as i,createElementBlock as l,Fragment as s,createCommentVNode as c,createVNode as d,withCtx as u,createTextVNode as m,createBlock as f,toDisplayString as y}from"vue";var p=(e=>(e.BRACKET="Brackets",e.MIN_DEDUCTION="Minimum Deduction",e.MAX_CAP="Maximum Cap",e))(p||{}),h=(e=>(e.PERCENTAGE="Percentage",e.FRACTIONAL="Fractional",e))(h||{}),v=(e=>(e.WET_WEIGHT="wet_weight",e.MOISTURE="moisture",e.DRY_WEIGHT="dry_weight",e))(v||{}),_=(e=>(e.METHOD="method",e.WET_WEIGHT_UOM="wet_weight_uom",e.MOISTURE_UOM="moisture_uom",e.DRY_WEIGHT_UOM="dry_weight_uom",e))(_||{}),g=a({props:{value:{type:Object,default:null}},emits:["input"],setup(t,{emit:a}){const r=o(""),i=o(!1),l=o(!1),s=e(),c=n("values",o({}));function d(e){if(console.log("[evaluateWeightData]"),0===e.length)return;const t=m(e,v.DRY_WEIGHT),a=m(e,v.WET_WEIGHT);return{method:u(e,_.METHOD),lots:e,dry_weight_uom:u(e,_.DRY_WEIGHT_UOM),wet_weight_uom:u(e,_.WET_WEIGHT_UOM),dry_weight:t,wet_weight:a,moisture:(a-t)/a*100}}function u(e,t){if(console.log("[getFirstValueAsSharedValue]"),0!==e.length)return console.log(`lots[0][${t.toString()}]=${e[0][t.toString()]}`),e[0][t.toString()]}function m(e,t){return console.log("[evaluateAggregateValue]"),e.reduce(((e,a)=>{var o;return e+(null!=(o=a[t.toString()])?o:0)}),0)}function f(e){return null==e}function y(e,t=2,a=!0){if(console.log("[formatNumber]"),isNaN(e)||null===e)return"-";const o=Math.round(e*Math.pow(10,t))/Math.pow(10,t),[n,r]=o.toString().split("."),i=n.replace(/\B(?=(\d{3})+(?!\d))/g,",");if(!r&&!a)return i;return`${i}.${(null!=r?r:"").padEnd(t,"0")}`}function g(e){if(console.log("[parseNumber]"),!e)return 0;const t=parseFloat(e.replace(/,/g,""));return console.log(`[parseNumber] number: ${e} to ${t}`),t}function $(e,t,a){var o,n,r;if(console.log("[findBracket]"),1===e.length){if(t>=(null!=(o=e[0].lower_threshold)?o:0)&&(null===e[0].upper_threshold||void 0===e[0].upper_threshold||t<e[0].upper_threshold))return e[0];throw new Error(`Evaluated monetary value $${t} does not fall within the only ${a.type} bracket with range ${null!=(n=e[0].lower_threshold)?n:0} - ${null!=(r=e[0].upper_threshold)?r:"âˆž"}`)}return e.find((e=>{var a,o;const n=t>(null!=(a=e.lower_threshold)?a:0)&&(null===e.upper_threshold||void 0===e.upper_threshold||t<e.upper_threshold)||e.lower_threshold_inclusive&&t===(null!=(o=e.lower_threshold)?o:0)||e.upper_threshold_inclusive&&t===e.upper_threshold;return console.log(`[findBracket] value=${t} for bracket: ${JSON.stringify(e)}? match=${!!n}`),n}))}function w(e,t){var a,o,n,r,i,l,s;console.log("[evaluateFinalValueFromBrackets]");const c=(e-(null!=(a=t.initial_adjustment)?a:0)*(null!=(o=t.initial_adjustment_conversion_factor)?o:1))*(null!=(n=t.rate)?n:0)*(t.rate_type===h.PERCENTAGE?.01:1)+(null!=(r=t.final_adjustment)?r:0)*(null!=(i=t.final_adjustment_conversion_factor)?i:1);switch(t.bracket_type){case p.MIN_DEDUCTION:if(null===t.comparator||void 0===t.comparator)throw new Error("Minimum deduction not found");const a=t.comparator*(null!=(l=t.comparator_conversion_factor)?l:1);return e-c<a?e-a:c;case p.MAX_CAP:if(null===t.comparator||void 0===t.comparator)throw new Error("Maximum cap not found");const o=t.comparator*(null!=(s=t.comparator_conversion_factor)?s:1);return c>o?o:c;case p.BRACKET:return c;default:throw new Error(`bracket type ${t.bracket_type} is not supported`)}}async function D(e,t,a,o){var n,r,i,l,s,c,d,u;if(console.log("[evaluatePayableAssay]"),!a||0===a.length)return{};const m=$(a,e,{commodityCode:o,type:"Payable Assay"});if(!m)throw new Error(`Bracket not found for value ${e}, please ensure the brackets for all commodities defined in the contract cover all range of possible values for payable assays`);let f,v,_=1;m.initial_adjustment_uom&&void 0!==m.initial_adjustment_uom&&null!==m.initial_adjustment_uom&&m.initial_adjustment_uom!==t&&(_=await M(m.initial_adjustment_uom,t),f=k(m.initial_adjustment_uom,t));let g,D=1;m.bracket_type===p.MAX_CAP?(v=null!=(n=m.maximum_cap)?n:0,void 0!==m.maximum_cap_uom&&null!==m.maximum_cap_uom&&m.maximum_cap_uom!==t&&(D=await M(m.maximum_cap_uom,t),g=k(m.maximum_cap_uom,t))):m.bracket_type===p.MIN_DEDUCTION&&(v=null!=(r=m.minimum_deduction)?r:0,void 0!==m.minimum_deduction_uom&&null!==m.minimum_deduction_uom&&m.minimum_deduction_uom!==t&&(D=await M(m.minimum_deduction_uom,t),g=k(m.minimum_deduction_uom,t)));const b=w(e,{bracket_type:m.bracket_type,rate:null!=(i=m.rate)?i:1,rate_type:null!=(l=m.rate_type)?l:h.FRACTIONAL,initial_adjustment:null!=(s=m.initial_adjustment)?s:0,initial_adjustment_conversion_factor:_,comparator:v,comparator_conversion_factor:D});let E="";const P=void 0!==m.initial_adjustment&&null!==m.initial_adjustment;if(m.bracket_type===p.BRACKET)E=`${P?"(":""}${y(e,4)}${null!=t?t:""}${P?` - ${y(m.initial_adjustment,4)}${null!=(c=m.initial_adjustment_uom)?c:`${null!=t?t:""}`}`:""}${P&&1!==_?` * ${y(_,4)}${f}`:""}${P?")":""} * ${y(m.rate,4)}${m.rate_type===h.PERCENTAGE?"/100":`/${y(1,4)}`}`;else if(m.bracket_type===p.MIN_DEDUCTION){E=b===e-v*D?`${y(e,4)}${null!=t?t:""} - ${y(v,4)}${null!=t?t:""}${1!==D?` * ${y(D,4)}${g}`:""}`:`${P?"(":""}${y(e,4)}${null!=t?t:""}${P?` - ${y(m.initial_adjustment,4)}${null!=(d=m.initial_adjustment_uom)?d:`${null!=t?t:""}`}`:""}${P&&1!==_?` * ${y(_,4)}${f}`:""}${P?")":""} * ${y(m.rate,4)}${m.rate_type===h.PERCENTAGE?"/100":`/${y(1,4)}`}`}else{if(m.bracket_type!==p.MAX_CAP)throw new Error(`[buildPayableAssayExpression] unknown bracket method: ${m.bracket_type}`);E=b===v*D?`${y(v,4)}${null!=t?t:""}${1!==D?` * ${y(D,4)}${g}`:""}`:`${P?"(":""}${y(e,4)}${null!=t?t:""}${P?` - ${y(m.initial_adjustment,4)}${null!=(u=m.initial_adjustment_uom)?u:`${null!=t?t:""}`}`:""}${P&&1!==_?` * ${y(_,4)}${f}`:""}${P?")":""} * ${y(m.rate,4)}${m.rate_type===h.PERCENTAGE?"/100":`/${y(1,4)}`}`}return{payableAssay:b,expression:E}}console.log("[main] formValues=",c);const b="above the lower threshold, plus",E="below the upper threshold, minus";function P(e,t,a,o){var n,r,i,l;if(console.log("[evaluateTreatmentCharge]"),!a||!a.length)return;const s=$(a,e,{commodityCode:o,type:"Treatment Charge"});if(!s)throw new Error(`Bracket not found for value ${e}, please ensure the brackets for all commodities defined in the contract cover all range of possible values for treatment charge`);let c=0,d=1;if(s.use_btc)d=0,c=0;else if(d=null!=(n=s.rate)?n:1,s.for_every_unit===b)c=null!=(r=s.lower_threshold)?r:0;else{if(s.for_every_unit!==E)throw new Error(`[evaluateTreatmentCharge] unknown for_every_unit: ${s.for_every_unit}`);c=null!=(i=s.upper_threshold)?i:0}const u={bracket_type:p.BRACKET,rate:d,rate_type:h.FRACTIONAL,initial_adjustment:c,final_adjustment:null!=(l=s.base_treatment_charge)?l:0};return console.log(`[evaluateTreatmentCharge] bracketForEvaluation: ${JSON.stringify(u)}`),{finalValue:w(e,u),baseTreatmentCharge:s.base_treatment_charge}}function C(e,t,a,o,n){var r,i,l;if(console.log("[evaluatePenalty]"),!t||!t.length)return{};const s=$(t,e,{commodityCode:n,type:"Penalty"});if(!s)throw new Error(`[evaluatePenalty] Bracket not found for value ${e}, please ensure the brackets for all commodities defined in the contract cover all range of possible values for penalty`);let c=0,d=1;if(s.no_penalty)d=0,c=0;else if(d=null!=(r=s.rate)?r:1,s.for_every_unit===b)c=null!=(i=s.lower_threshold)?i:0;else{if(s.for_every_unit!==E)throw new Error(`[evaluatePenalty] unknown for_every_unit: ${s.for_every_unit}`);c=null!=(l=s.upper_threshold)?l:0}const u={bracket_type:p.BRACKET,rate:d,rate_type:h.FRACTIONAL,initial_adjustment:c,final_adjustment:0};console.log(`[evaluatePenalty] bracketForEvaluation: ${JSON.stringify(u)}`);const m=w(e,u),f=null!=u.initial_adjustment;let v="";return v=s.rate&&0!==s.rate?`${f?"(":""}${y(e,4)}${f?` - ${y(c,4)})`:""} / ${y(1,4)} * ${null!=a?a:""} ${y(d,4)}/${null!=o?o:""}`:"No penalty",{penalty:m,expression:v,bracket:s}}function S(e){const t=e.getDate(),a=e.getMonth(),o=e.getFullYear();return`${t} ${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][a]} ${o}`}function A(e,t=!0){const a=e.getMonth()+1,o=e.getDate();return`${e.getFullYear()}${t?"-":" "}${a<10?"0":""}${a}${t?"-":" "}${o<10?"0":""}${o}`}function N(e,t,a=!1){const o=new Date(e.valueOf());let n=t-(a?1:0);for(;n>0;)o.setDate(o.getDate()-1),0!==o.getDay()&&6!==o.getDay()&&(n-=1);return o.getHours()>=12&&o.setDate(o.getDate()+1),o}function O(e,t,a=!1){const o=new Date(e.valueOf());let n=t-(a?1:0);for(;n>0;)o.setDate(o.getDate()+1),0!==o.getDay()&&6!==o.getDay()&&(n-=1);return o.getHours()>=12&&o.setDate(o.getDate()+1),o}function T(e,t){const a=new Date(e.valueOf());return a.setMonth(a.getMonth()+t,1),a}function I(e,t){const a=new Date(e.valueOf());return a.setMonth(a.getMonth()+t+1,0),a}async function U(e,t){if(e===t)return 1;const a=await s.get(`/items/${_t}?filter[${gt}]=${e}`,{params:{fields:[Et]}});if(0===a.data.data.length||null===a.data.data[0][Et]||void 0===a.data.data[0][Et])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for source weight unit ${e}. Ensure that the symbol is correct and is a weight unit symbol`);const o=await s.get(`/items/${_t}?filter[${gt}]=${t}`,{params:{fields:[Et]}});if(0===o.data.data.length||null===o.data.data[0][Et]||void 0===o.data.data[0][Et])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for the target weight unit ${t}. Ensure that the symbol is correct and is a weight unit symbol`);const n=parseFloat(a.data.data[0][Et]);if(isNaN(n))throw new Error(`[getWeightUnitConversionValue] source weight unit ${e} conversion value=${n} is not a number`);const r=parseFloat(o.data.data[0][Et]);if(isNaN(r))throw new Error(`[getWeightUnitConversionValue] target weight unit ${t} conversion value=${r} is not a number`);return n/r}async function M(e,t){if(null==e||null==t)return 1;if(e===t)return 1;const a=await s.get(`/items/${Pt}?filter[${Ct}]=${e}`,{params:{fields:[St]}});if(0===a.data.data.length||void 0===a.data.data[0][St]||null===a.data.data[0][St])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for source weight unit ${e}. Ensure that the symbol is correct and is a weight unit symbol`);const o=await s.get(`/items/${Pt}?filter[${Ct}]=${t}`,{params:{fields:[St]}});if(0===o.data.data.length||void 0===o.data.data[0][St]||null===o.data.data[0][St])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for the target weight unit ${t}. Ensure that the symbol is correct and is a weight unit symbol`);const n=parseFloat(a.data.data[0][St]);if(isNaN(n))throw new Error(`[getAssayUnitConversionValue] source weight unit ${e} conversion value=${n} is not a number`);console.log(`[getAssayUnitConversionValue] source unit conversion value=${n}`);const r=parseFloat(o.data.data[0][St]);if(isNaN(r))throw new Error(`[getAssayUnitConversionValue] target weight unit ${e} conversion value=${r} is not a number`);return console.log(`[getAssayUnitConversionValue] target unit conversion value=${r}`),console.log("[getAssayUnitConversionValue] returning "+n/r),n/r}function k(e,t){if(void 0===e||void 0===t||null===e||null===t)return;const a=e.split("/"),o=t.split("/");if(a.length>2||o.length>2)throw new Error(`[getConversionUnit] sourceUnit=${e} and targetUnit=${t} must be in the format of 'unit1/unit2', an extra '/' was found`);if(1===a.length&&1===o.length)return`${o[0]}/${a[0]}`;if(1===a.length){const e=o[0]===a[0]?"":`${o[1]}(${a[1]})`,t=o[1];return""===t?e:`${e}/${t}`}if(1===o.length){const e=a[1],t=a[0]===o[0]?"":`${a[1]}(${o[0]})`;return""===t?e:`${e}/${t}`}{const e=a[0]===o[0],t=a[1]===o[1],n=e||""===a[0],r=e||""===o[0],i=t||""===a[1],l=t||""===o[1],s=!i&&!r,c=!n&&!l,d=`${i?"":a[1]}${s?"(":""}${r?"":`${o[0]}`}${s?")":""}`,u=`${n?"":a[0]}${c?"(":""}${l?"":`${o[1]}`}${c?")":""}`;return""===u?d:`${d}/${u}`}}async function F(e,t,a){const o=await s.get(`/items/${_t}?filter[${$t}]=${t}`,{params:{fields:[gt]}});if(!o.data.data||!o.data.data[0]||!o.data.data[0][gt])throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] Dry weight uom not found for symbol ${t}`);const n=o.data.data[0][gt];if("%"===a){if(n===e)return{};const t=k(n,e);if(!t)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] no conversion unit found for dry weight unit ${n} and target weight unit ${e}`);return{finalConversion:{conversionFactor:await U(n,e),conversionUom:t}}}let r=a.split("/");if(1==r.length){const e=await async function(e){const t=await s.get(`/items/${Pt}`,{params:{fields:[Ct,At],filter:{[At]:{_nnull:!0},[Ct]:{_eq:e}}}});if(200!==t.status||!t.data||0===t.data.data.length)throw new Error("[getAssayUnitComposition] no assay units found with composition");return t.data.data[0][At]}(a);if(!e)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${a} does not have a composition`);r=e.split("/")}if(r.length>2||0===r.length)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${a} is not in the format of 'unit1/unit2'`);const i=r[0],l=r[1],c={};if(l!==n){const e=k(n,l);if(!e)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] no conversion unit found for dry weight unit ${n} and assay unit denominator unit ${l}`);c.initialConversion={conversionFactor:await U(n,l),conversionUom:e}}if(i!==e){const t=k(i,e);if(!t)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] no conversion unit found for target weight unit ${e} and assay unit numerator unit ${i}`);c.finalConversion={conversionFactor:await U(i,e),conversionUom:t}}return c}const j="id",V="foreign_key",B="lot_number",J="method",R="navarch_cashflow",x="navarch_parcel",q="contract",W="counterparty",L="assay_results",G="weight_result",H="actual_arrival_date",K="estimate_arrival_date",Q="bl_date",Y="estimated_shipment_date",X="vessel",z="origin",Z="destination",ee="shipment_code",te="adjustments",ae="parcel_finalisation_date",oe="navarch_assay_lot",ne="commodity",re="dry_weight",ie="dry_weight_uom",le="buyer_assay",se="seller_assay",ce="final_assay",de="assay_uom",ue="lot_number",me="navarch_weight_lot",fe="dry_weight",ye="wet_weight",pe="moisture",he="wet_weight_uom",ve="dry_weight_uom",_e="navarch_contract",ge="contract_currency",$e="name",we="navarch_contract_payment_information",De="related_contract",be="invoice_type",Ee="pay_percent",Pe="pa_days",Ce="pa_day_type",Se="pa_ref_day",Ae="pp_days",Ne="pp_day_type",Oe="pp_ref_day",Te="navarch_commodity_in_contract",Ie="contract",Ue="commodity",Me="primary_commodity",ke="payable_commodity",Fe="price_method",je="price_per_uom",Ve="treatment_charge_per_uom",Be="quotational_periods",Je="payable_assay_rates",Re="treatment_charge_rates",xe="penalty_rates",qe="penalty_per_uom",We="navarch_payable_assay_bracket",Le="initial_adjustment",Ge="initial_adjustment_uom",He="minimum_deduction",Ke="minimum_deduction_uom",Qe="maximum_cap",Ye="maximum_cap_uom",Xe="related_commodity_in_contract",ze="bracket_type",Ze="lower_threshold",et="lower_threshold_inclusive",tt="upper_threshold",at="upper_threshold_inclusive",ot="rate",nt="rate_type",rt="navarch_treatment_charge_bracket",it="base_treatment_charge",lt="use_btc",st="for_every_unit",ct="related_contract_commodity_tc",dt="navarch_penalty_bracket",ut="no_penalty",mt="for_every_unit",ft="navarch_commodity",yt="name",pt="code",ht="navarch_currency",vt="code",_t="navarch_unit",gt="symbol",$t="dry_symbol",wt="wet_symbol",Dt="dry_unit",bt="wet_unit",Et="conversionToGram",Pt="navarch_assay_unit",Ct="unit",St="conversion_to_ppb",At="composition",Nt="navarch_counterparty",Ot="codename",Tt="name",It="navarch_vessel",Ut="name",Mt="price_pm",kt="average_price",Ft="date",jt="navarch_invoices",Vt="parcel",Bt="invoice",Jt="invoice_date",Rt="amount_paid",xt="invoice_type",qt="navarch_forecast_price",Wt="commodity",Lt="price",Gt="start_date",Ht="end_date",Kt={Advance:0,"Second Advance":1,"Third Advance":2,"Fourth Advance":3,Provisional:4,"Second Provisional":5,"Third Provisional":6,"Fourth Provisional":7,Final:8};function Qt(e){const t=[...new Set(e.flatMap((e=>Object.keys(e))))],a=e.map((e=>t.map((t=>{const a=e[t]||"";return"string"==typeof a&&a.includes(",")?`"${a}"`:a})).join(",")));return[t.join(","),...a].join("\n")}function Yt(e){const t=new Blob([e],{type:"text/csv"}),a=URL.createObjectURL(t),o=document.createElement("a");o.href=a,o.download=`Cashflow-[${function(){const e=new Date,t=60*e.getTimezoneOffset()*1e3,a=e.getTime()-t,o=new Date(a),n=o.toISOString().slice(0,19),r=e.getTimezoneOffset()/60*-1;return`${n}GMT${r>0?"+":""}${r}`.replace(/:/g,"")}()}]-Valuation_Period-(${A(c.value.start_date,!1)}~${A(c.value.end_date,!1)}).csv`,document.body.appendChild(o),o.click(),document.body.removeChild(o)}class Xt extends Error{constructor(e){super(e),this.name="NonFatalError",Object.setPrototypeOf(this,Xt.prototype)}}return{isGeneraingDoc:i,invoiceUrl:c.value,generateCashflow:async function(){r.value="";try{i.value=!0;const e=await async function(){const e=new Date(c.value.start_date);if("Invalid Date"===e.toString())throw r.value="Start date is invalid",new Error("Start date is invalid");const t=new Date(c.value.end_date);if("Invalid Date"===t.toString())throw r.value="End date is invalid",new Error("End date is invalid");const a=await s.get(`/items/${_e}`,{params:{fields:[$e,j,"invoice_type"]}}),o={};await Promise.all(a.data.data.map((async a=>{var n,r,i,l,c;const d=await s.get(`/items/${we}`,{params:{filter:{[De]:{_eq:a[j]}},fields:[be,Pe,Ce,Se]}}),u=await s.get(`/items/${x}`,{params:{filter:{[q]:{_eq:a[j]}},fields:[j,ee,H,K,Q,Y,ae]}});for(const m of d.data.data){const d={days:m[Pe],day_type:m[Ce],ref_day:"Final"===m[xt]?"QP Month + n days":m[Se]};if(!d)throw new Error(`Contract ${a[$e]} does not have a payment advice for invoice type ${m[xt]}`);let f,y="";for(const p of u.data.data){switch(d.ref_day){case"Arrival Date":y="Actual Arrival Date from the Parcel form",f=null!=(n=p[H])?n:p[K];break;case"B/L Date":y="B/L Date (or Estimated Shipment Date) from the Parcel form",f=null!=(r=p[Q])?r:p[Y];break;case"Invoice Date":y="Invoice Date (using the B/L Date or Estimated Shipment Date from the Parcel form)",f=null!=(i=p[Q])?i:p[Y];break;case"Estimated Shipment Date":y="Estimated Shipment Date from the Parcel form",f=p[Y];break;case"QP Month + n days":const e=await s.get(`items/${Te}`,{params:{filter:{[Ie]:{_eq:a[j]},[ke]:{_eq:!0}},fields:[Be]}});if(!Array.isArray(e.data.data)||0===e.data.data.length)throw new Error(`Contract ${a[$e]} does not have any payable commodities`);const t=e.data.data.map((e=>e[Be].find((e=>!!e.default)))),o=t.reduce(((e,t)=>t.qp_period>e.qp_period?t:e),t[0]);let u;switch(o.qp_code){case"MAMA":y="Actual Arrival Date (or Estimated Arrival Date) from the Parcel form",u=null!=(l=p[H])?l:p[K];break;case"MOSS":case"MOS":case"MOAS":y="B/L Date (or Estimated Shipment Date) from the Parcel form",u=null!=(c=p[Q])?c:p[Y];break;default:throw new Error(`Unsupported QP code ${o.qp_code}, currently only supports MAMA, MOS, MOSS, and MOAS`)}const m=I(new Date(u),o.qp_period);if(!m||"Invalid Date"===m.toString())throw new Error(`Invalid date for last date of QP month: ${m}, please ensure all fields for QP for contract ${a[$e]} and the ${y} in parcel ${p[ee]} are filled in`);f=m.toISOString();break;default:throw new Error(`Invalid reference day for payment advice: ${d.ref_day}; please contact Navarch for support`)}if(null==f)throw new Error(`Reference day for payment advice ${y} is empty in parcel ${p[ee]}`);const u=new Date(f),h=parseInt(d.days);let v;switch(d.day_type){case"Business Day(s)":v=O(u,h,!0);break;case"Calendar Day(s)":v=new Date(u.valueOf()),v.getHours()>=12?v.setDate(v.getDate()+h+1):v.setDate(v.getDate()+h);break;default:throw new Error(`Please provide a valid Day Type (Cashflow) for ${a[$e]}:Final Invoice Type`)}v>=e&&v<=t&&(o[p[j]]||(o[p[j]]=[]),o[p[j]].push({invoiceType:m[be],dueDate:v,parcelId:p[j],contractName:a[$e]}))}}})));const n=Object.keys(o),i=await s.get(`/items/${x}`,{params:{filter:{[j]:{_in:n}},fields:[j,q,W,L,G,H,K,Q,Y,X,z,Z,ee,te,"parcel_finalised",ae,L]}});if(!i.data.data||i.data.data.length!==n.length)throw new Error("Experiencing some network issues, please try again. If the issue persists, contact Navarch for support");const l={parcelData:i.data.data.reduce(((e,t)=>(e[t[j]]=t,e)),{}),contractNameByParcelId:n.reduce(((e,t)=>(e[t]=o[t][0].contractName,e)),{}),invoiceTypeParcel:n.flatMap((e=>o[e])),parcelIds:n};return console.log(`[getApplicableParcels] returnObject=${JSON.stringify(l)}`),l}(),t=await async function(e){const t=[],a=await s.get(`/items/${jt}`,{params:{filter:{[Vt]:{_in:e.parcelIds},[Bt]:{_nnull:!0}},fields:[Vt,xt,Bt,Jt,Rt]}});a.data.data.sort(((e,t)=>{const a=Kt[e[xt]]-Kt[t[xt]];return 0===a?new Date(t[Jt]).valueOf()-new Date(e[Jt]).valueOf():a}));for(const o of e.invoiceTypeParcel){const n=a.data.data.find((e=>e[Vt]===o.parcelId&&e[xt]===o.invoiceType));n?t.push({parcelId:o.parcelId,invoiceType:o.invoiceType,contractName:e.contractNameByParcelId[o.parcelId],dueDate:o.dueDate,invoiceData:{...n[Bt],amount_paid:n[Rt]}}):t.push({parcelId:o.parcelId,invoiceType:o.invoiceType,contractName:e.contractNameByParcelId[o.parcelId],dueDate:o.dueDate,parcelData:e.parcelData[o.parcelId]})}return console.log(`[generateInvoiceParamForParcel] invoiceParams=${JSON.stringify(t)}`),t}(e);console.log(`[generateCashflow] form values=${JSON.stringify(c.value)}`);const o=await Promise.all(t.map((async e=>(console.log(`[generateCashflow] invoiceParam=${JSON.stringify(e)}`),await async function(e){var t,a,o,n,l,c,u,m,f,p,h,v,_,$,w,b,E,A,O,U,M,k,R,ae,$e,Et,Pt,Ct,St,At,Mt,kt,Ft,Jt,Rt,xt,qt,Wt,Lt;r.value="",i.value=!0;try{if(e.invoiceData){console.log(`[generateInvoice][invoice=${JSON.stringify(e.invoiceData.invoice_number)}::parcel=${e.invoiceData.parcel}] using existing invoice=${JSON.stringify(e.invoiceData)}`);const t=e.invoiceData,a=await s.get(`/items/${Nt}`,{params:{filter:{[Tt]:{_eq:t.buyer}},fields:[Ot]}});ia(a.data.data[0]);const o=await s.get(`/items/${x}`,{params:{filter:{[j]:{_eq:e.parcelId}},fields:[Q,H,K]}});console.log(`[generateInvoice][invoice=${JSON.stringify(e.invoiceData.invoice_number)}::parcel=${e.invoiceData.parcel}] parcel date data=${JSON.stringify(o.data.data)}`);const n=o.data.data[0];return{Counterparty:a.data.data[0][Ot],Vessel:"N/A"===t.vessel?"Vessel TBA":t.vessel,"Shipment Date":t.bl_date,"Arrival Date":n[H]?S(new Date(n[H])):n[K]?S(new Date(n[K])):"N/A",Status:o[Q]?"Unfinalised":"Planned",Revision:"Original",Invoice:`${t.invoice_type}:Original`,Parcel:t.parcel,"Invoice Due Date":S(e.dueDate),"Dry Weight":`${t.dry_weight} ${t.dry_weight_uom}`,"Total Revenues USD":t.total_revenue,"Total Penalties USD":t.total_deductions,...await Zt(t.commodities,{dryWeight:g(t.dry_weight),dryWeightUom:t.dry_weight_uom}),"Total Adjustments USD":t.adjustments?t.adjustments.total_adjustments:"0.00","Parcel Value USD":t.invoice_value,"Parcel Payable Value(Below Line) USD":t.payable_amount,"Payments USD":t.amount_paid,"Due Total":t.balance_in_sellers_favor,metadata:{invoiceTypeRanking:Kt[t.invoice_type]}}}if(void 0===e.parcelData)throw new Xt(`Something went wrong, no parcel or invoice data for Invoice of parcel id ${e.parcelId.substring(0,5)} and invoice type ${e.invoiceType}`);const i=e.parcelId;if(!i)return void console.error(`[generateInvoice] A parcel id is not defined for invoice type ${e.invoiceType}`);const Gt=e.invoiceType,Ht=e.parcelData,Qt=e.contractName;console.log(`[generateInvoice][parcel=${Ht[ee]}::invoice type=${Gt}] parcel data=${JSON.stringify(Ht)}`),function(e){if(!e)throw new Error("Parcel data not found, please ensure the selected parcel still exists");if(!e[ee])throw new Error("One of the parcels does not have a shipment code, please ensure that all parcels have a shipment code");if(!e[q])throw new Error(`The parcel ${e[ee]} does not have a contract, please ensure that the contract field for the parcel is not empty`);if(!e[W])throw new Error(`The parcel ${e[ee]} does not havea counterparty, please ensure that the counterparty field for the parcel is not empty`);if(!e[L])throw new Xt(`The parcel ${e[ee]} does not have assay results`);if(!e[G])throw new Xt(`The parcel ${e[ee]} does not have weight results`);if(!e[z])throw new Error(`The parcel ${e[ee]} does not havean origin port`);if(!e[Z])throw new Error(`The parcel ${e[ee]} does not havea destination port`)}(Ht);const Yt=Ht[L],zt=Ht[G],ea=Ht[q];if(!ea)throw new Error(`Contract not found for parcel ${Ht[ee]}`);const la=await s.get(`/items/${we}`,{params:{filter:{[De]:{_eq:ea},[be]:{_eq:Gt}},fields:[be,Ee,Pe,Ce,Se,Ae,Ne,Oe]}});if(la.data.data&&0===la.data.data.length)throw new Error(`No invoice type found for the contract ${Qt}`);const sa=la.data.data.find((e=>e[be]===Gt));if(!sa)throw new Error(`Cannot find payment information for ${Gt} in the contract ${Qt}, please ensure that data for it has been entered and saved`);const ca=await s.get(`/items/${me}?filter[${V}]=${zt}&sort[]=${B}`,{params:{fields:[j,fe,ye,J,pe,he,ve]}});console.log(`[generateInvoice][parcel=${Ht[ee]}::invoice type=${Gt}] weight lots data=${JSON.stringify(ca.data.data)}`),function(e){if(!e||0===e.length)throw new Xt("No weight lots found for the selected parcel")}(ca.data.data);const da=function(e){console.log("[evaluateWeights]");const t={};for(const a of e)t[a.method]||(console.log(`adding method ${a.method} to weightData object`),t[a.method]=[]),console.log(`adding lot ${a.id} to weightData.${a.method} array`),t[a.method.toString()].push(a);const a=[];for(const e of Object.keys(t)){if(!t[e]){console.log(`method=${e} does not exist in weightData object`);continue}console.log(`adding lots and other values to weights for method=${e}`);const o=d(t[e]);o&&a.push(o)}return a}(ca.data.data);let ua;if(ua||(ua=da.find((e=>"Outturn"===e.method))),ua||(ua=da.find((e=>"Inturn Final"===e.method))),ua||(ua=da.find((e=>"Inturn"===e.method))),ua||(ua=da.find((e=>"Estimated"===e.method))),ua||(ua=da.find((e=>"Planned"===e.method))),!ua)throw new Error(`No weight lots with valid method found for parcel ${Ht[ee]}`);if(void 0===ua.dry_weight||null===ua.dry_weight||void 0===ua.wet_weight||null===ua.wet_weight||void 0===ua.moisture||null===ua.moisture||void 0===ua.dry_weight_uom||null===ua.dry_weight_uom||void 0===ua.wet_weight_uom||null===ua.wet_weight_uom||void 0===ua.method||null===ua.method)throw new Error(`One of the fields for the latest weight lots data is undefined for parcel ${Ht[ee]}`);const ma=await s.get(`/items/${_t}?filter[${$t}]=${ua.dry_weight_uom}`,{params:{fields:[Dt]}}),fa=await s.get(`/items/${_t}?filter[${wt}]=${ua.wet_weight_uom}`,{params:{fields:[bt]}});if(!ma.data.data||!ma.data.data[0]||!ma.data.data[0][Dt])throw new Error(`Dry weight uom not found for symbol ${ua.dry_weight_uom} for parcel ${Ht[ee]}`);if(!fa.data.data||!fa.data.data[0]||!fa.data.data[0][bt])throw new Error(`Wet weight uom not found for symbol ${ua.wet_weight_uom} for parcel ${Ht[ee]}`);const ya=ma.data.data[0][Dt],pa=(ya.indexOf("dry"),fa.data.data[0][bt]),ha=(pa.indexOf("wet"),await s.get(`/items/${oe}?filter[${V}]=${Yt}&sort[]=${B}`,{params:{fields:[j,ne,J,re,ie,le,se,ce,ue,de]}}));console.log(`[generateInvoice][parcel=${Ht[ee]}::invoice type=${Gt}] assay lots data=${JSON.stringify(ha.data.data)}`),function(e){if(!e||0===e.length)throw new Xt("No assay lots found for the selected parcel")}(ha.data.data);const va=function(e){var t;console.log("[evaluateAnalyticalAssay]");const a={};for(const t of e)a[t.method]||(a[t.method]={}),a[t.method][t.commodity]||(a[t.method][t.commodity]=[]),null!==t.lot_number?(1===a[t.method][t.commodity].length&&null===a[t.method][t.commodity][0].lot_number&&(a[t.method][t.commodity]=[]),a[t.method][t.commodity].push(t)):null===t.lot_number&&0===a[t.method][t.commodity].length&&a[t.method][t.commodity].push(t);console.log(`[evaluateAnalyticalAssay] group: ${JSON.stringify(a)}}`);const o={};for(const e in a){console.log(`[evaluateAnalyticalAssay] methodKey: ${e}, group[methodKey]: ${JSON.stringify(a[e])}`);for(const n in a[e]){console.log(`[evaluateAnalyticalAssay] commodityKey: ${n}, group[methodKey][commodityKey]: ${JSON.stringify(a[e][n])}`),o[e]=null!=(t=o[e])?t:{},o[e][n]={};const i=a[e][n].reduce(((e,t)=>e+t.dry_weight),0);if(console.log(`[evaluateAnalyticalAssay] totalDryWeight: ${i} from ${JSON.stringify(a[e][n])}`),0===i||isNaN(i))throw r.value=`Please provide dry weight for ${n} commodity in ${e} method, total dry weight cannot be ${i}`,new Error("[evaluateAnalyticalAssay] totalDryWeight is 0");console.log(`[evaluateAnalyticalAssay] totalDryWeight: ${i}`),o[e][n].analytical_assay=a[e][n].reduce(((t,a)=>{var o,i;const l=null!=(i=a.final_assay)?i:null!=(o=a.seller_assay)?o:a.buyer_assay;if(null==l)throw r.value=`Please provide Final, Seller or Buyer assay value for ${n} commodity in ${e} method`,new Error("[evaluateAnalyticalAssay] assay value is not defined for assay lot");const s=t+l*a.dry_weight;return console.log(`[evaluateAnalyticalAssay] evaluated analytical assay: ${s} for method=${e}, commodity=${n}; with values accumulator=${t}, assayValue=${l}, dryWeight=${a.dry_weight}`),s}),0)/i,console.log(`[evaluateAnalyticalAssay] analytical assay: ${o[e][n].analytical_assay}`),a[e][n].length>0&&(o[e][n][de]=a[e][n][0][de])}}return console.log(`[evaluateAnalyticalAssay] analyticalAssay: ${JSON.stringify(o)}`),o}(ha.data.data);let _a;if(_a||(_a=va.Outturn),_a||(_a=va["Inturn Final"]),_a||(_a=va.Inturn),_a||(_a=va.Estimated),_a||(_a=va.Planned),!_a)throw new Error(`No assay lot data with a valid method found for parcel ${Ht[ee]}`);console.log(`[generateInvoice][parcel=${Ht[ee]}::invoice type=${Gt}] weight lots for invoice evaluation=${JSON.stringify(ua)}`),console.log(`[generateInvoice][parcel=${Ht[ee]}::invoice type=${Gt}] assay lots for invoice evaluation=${JSON.stringify(_a)}`);const ga=await s.get(`/items/${_e}/${ea}`,{params:{fields:[ge]}});!function(e){if(!e)throw new Error("Contract data not found, please ensure the selected contract still exists");if(!e[ge])throw new Error("The selected contract does not have a set currency, please ensure that the currency field for the contract is not empty")}(ga.data.data);const $a=await s.get(`/items/${ht}/${ga.data.data.contract_currency}`,{params:{fields:[vt]}});!function(e){if(!e)throw new Error("Currency data not found, please ensure the selected currency still exists");if(!e[vt])throw new Error("The selected currency in the contract is not valid")}($a.data.data);const wa=$a.data.data.code,Da=await s.get(`/items/${Te}?filter[${Ie}]=${ea}`,{params:{fields:["id",Ue,Me,ke,Fe,Be,Je,Re,xe,qe,je,Ve]}});!function(e){if(!e||0===e.length)throw new Error("No commodity data found in selected contract for parcel");if(!e.every((e=>e[Ue])))throw new Error("The selected contract has an undefined commodity, please ensure that the 'Commodity' field for all commodites in the contract is not empty");if(!e.every((e=>!e[ke]||e[je])))throw new Error("The selected contract has an undefined base price Uom for commodity, please ensure that the 'Base Price Uom' field for all commodites in the contract is not empty")}(Da.data.data),console.log(`[generateInvoice][parcel=${Ht[ee]}::invoice type=${Gt}] contract commodity data=${JSON.stringify(Da.data.data)}`);const ba=[],Ea=[];let Pa="";for(const{id:e,commodity:r,primary_commodity:i,price_method:d,quotational_periods:g,price_per_uom:V,penalty_per_uom:B,treatment_charge_per_uom:J}of Da.data.data){const x=await s.get(`/items/${ft}/${r}`,{params:{fields:[yt,pt,j]}});if(aa(x.data.data,r),!_a[x.data.data.code]){console.log(`[generateInvoice][parcel=${Ht[ee]}::invoice type=${Gt}::comm=${x.data.data[yt]}] no analytical assay for commodity ${x.data.data.code} found, skipping...`);continue}if(i&&(Pa=x.data.data[yt]),null!==g){const r=g;console.log(`[generateInvoice][parcel=${Ht[ee]}::invoice type=${Gt}::comm=${x.data.data[yt]}] qp=${JSON.stringify(r)}`);const i=Array.isArray(r)?r.find((e=>e.default)):null;if(!i)throw new Error(`No default quotational period found for commodity ${x.data.data.code}`);const C=r.filter((e=>!e.default)).map((e=>`${e.qp_period} ${e.qp_code}`)),B=[`${i.qp_period} ${i.qp_code}`,...C].join(", ");console.log(`[generateInvoice][parcel=${Ht[ee]}::invoice type=${Gt}::comm=${x.data.data[yt]}] evaluate payable assay for ${x.data.data.code} with an analytical assay=${null==(t=_a[x.data.data.code])?void 0:t.analytical_assay}`);const q=await s.get(`/items/${We}?filter[${Xe}]=${e}`,{params:{fields:[ze,Ze,et,tt,at,ot,nt,Le,Ge,He,Ke,Qe,Ye]}}),{payableAssay:W,expression:L}=await D(null==(a=_a[x.data.data.code])?void 0:a.analytical_assay,null==(o=_a[x.data.data.code])?void 0:o.assay_uom,q.data.data,x.data.data[yt]);let G,X,z="";if("Final"!==Gt){const e={invoice_type:Gt,days:sa[Ae],day_type:sa[Ne],ref_day:sa[Oe]};if(!e)throw new Error(`No provisional pricing found for invoice type ${Gt} for parcel ${Ht[ee]}`);let t;switch(e.ref_day){case"Arrival Date":t=null!=(n=Ht[H])?n:Ht[K],z="Actual Arrival Date from the Parcel form";break;case"B/L Date":t=null!=(l=Ht[Q])?l:Ht[Y],z="B/L Date from the Parcel form";break;case"Invoice Date":t=null!=(c=Ht[Q])?c:Ht[Y],z="B/L Date (or Estimated Date) as Invoice Date";break;case"Estimated Shipment Date":t=Ht[Y],z="Estimated Shipment Date from the Parcel form";break;default:throw new Error(`Invalid reference day for invoice pricing: ${e.ref_day}; please contact Navarch for support`)}if(null==t)throw new Error(`Reference day for invoice pricing ${z} is empty`);X=new Date(t);const a=parseInt(e.days),o=e.day_type;switch(o){case"Business Day(s)":G=N(X,a,!0);break;case"Calendar Day(s)":G=new Date(X.valueOf()),G.setDate(G.getDate()-a);break;default:throw new Error(`Invalid day type ${o} from contract ${Qt} for invoice type ${Gt}`)}}else{let e;switch(i.qp_code){case"MAMA":e=new Date(null!=(u=Ht[H])?u:Ht[K]),z="Actual Arrival Date";break;case"MOSS":case"MOS":case"MOAS":e=new Date(null!=(m=Ht[Q])?m:Ht[Y]),z="Estimated Shipment Date";break;default:throw new Error(`Unsupported QP code ${i.qp_code} in the contract ${Qt}, please ensure all commodity QP codes are MAMA, MOS, MOSS, or MOAS`)}if(null==e)throw new Error(`Invalid reference day for ${z} from contract ${Qt} for commodity ${x.data.data[yt]}`);G=T(e,i.qp_period),X=I(e,i.qp_period)}console.log(`[generateInvoice][parcel=${Ht[ee]}::invoice type=${Gt}::comm=${x.data.data[yt]}] provisional pricing date range: ${G.toString()} - ${X.toString()}`);const Z=await ta(x.data.data.code,x.data.data[j],d,G,X);let te;const oe=await s.get(`/items/${rt}?filter[${ct}]=${e}`,{params:{fields:[Ze,et,tt,at,it,lt,st,ot]}});void 0!==oe.data.data&&null!==oe.data.data&&oe.data.data.length>0&&(te=await P(Z,null==(f=_a[x.data.data.code])||f.assay_uom,oe.data.data,x.data.data[yt]));const ne=await s.get(`/items/${_t}/${V}`,{params:{fields:[gt]}});oa(ne.data.data,x.data.data[yt]);const re=ne.data.data[gt];let ie;if(te){if(!J)throw new Error(`Treatment Charge Rate UOM is not defined for commodity ${x.data.data[yt]}`);const e=await s.get(`/items/${_t}/${J}`,{params:{fields:[gt]}});na(e.data.data,x.data.data[yt]),ie=e.data.data[gt]}const le=await F(re,ua.dry_weight_uom,null==(p=_a[x.data.data.code])?void 0:p.assay_uom);console.log(`[generateInvoice][parcel=${Ht[ee]}::invoice type=${Gt}::comm=${x.data.data[yt]}] payableMetalConversion for commodity ${x.data.data.name}: ${JSON.stringify(le)}`),le.initialConversion=1===(null==(h=le.initialConversion)?void 0:h.conversionFactor)?void 0:le.initialConversion,le.finalConversion=1===(null==(v=le.finalConversion)?void 0:v.conversionFactor)?void 0:le.finalConversion,ba.push({commodity:x.data.data.name,analytical_assay:y(null==(_=_a[x.data.data.code])?void 0:_.analytical_assay,4),deduction_expression:L,payable_assay:y(W,4),assay_uom:null==($=_a[x.data.data.code])?void 0:$.assay_uom,payable_metal:y(ua.dry_weight*(null!=(b=null==(w=le.initialConversion)?void 0:w.conversionFactor)?b:1)*(null!=W?W:1)*(null!=(A=null==(E=le.finalConversion)?void 0:E.conversionFactor)?A:1)*("%"!==(null==(O=_a[x.data.data.code])?void 0:O.assay_uom)?1:.01),4),payable_metal_expression:`${y(ua.dry_weight,4)}${ua.dry_weight_uom}${le.initialConversion?` * ${y(le.initialConversion.conversionFactor,4)}${le.initialConversion.conversionUom}`:""} * ${y(null!=W?W:1,4)}${"%"!==(null==(U=_a[x.data.data.code])?void 0:U.assay_uom)?`${null==(M=_a[x.data.data.code])?void 0:M.assay_uom}`:" / 100"}${le.finalConversion?` * ${y(le.finalConversion.conversionFactor,4)}${le.finalConversion.conversionUom}`:""}`,payable_metal_uom:re,qp:B,qp_start_date:S(G),qp_end_date:S(X),price_method:d,price_rate:y(Z,4),price_per_uom:re,price:y(ua.dry_weight*(null!=(R=null==(k=le.initialConversion)?void 0:k.conversionFactor)?R:1)*(null!=W?W:1)*(null!=($e=null==(ae=le.finalConversion)?void 0:ae.conversionFactor)?$e:1)*("%"!==(null==(Et=_a[x.data.data.code])?void 0:Et.assay_uom)?1:.01)*Z),treatment_charge:te?{rate:y(te.baseTreatmentCharge,4),discount:y((null!=(Pt=te.baseTreatmentCharge)?Pt:0)-(null!=(Ct=te.finalValue)?Ct:0),4),final_rate:y(te.finalValue,4),per_uom:ie,final_amount:y(ua.dry_weight*(null!=(St=te.finalValue)?St:1))}:void 0,final_total:y(ua.dry_weight*(null!=(Mt=null==(At=le.initialConversion)?void 0:At.conversionFactor)?Mt:1)*(null!=W?W:1)*(null!=(Ft=null==(kt=le.finalConversion)?void 0:kt.conversionFactor)?Ft:1)*("%"!==(null==(Jt=_a[x.data.data.code])?void 0:Jt.assay_uom)?1:.01)*Z-(te?1:0)*(ua.dry_weight*(null!=(Rt=null==te?void 0:te.finalValue)?Rt:1)))})}const q=await s.get(`/items/${dt}?filter[${Xe}]=${e}`,{params:{fields:[Ze,et,tt,at,ut,mt,ot]}});if(q.data.data.length>0){if(null===B)throw new Error(`Please fill in the field for Penalty Per UOM in contract ${Qt} for commodity ${x.data.data[yt]}`);const e=await s.get(`/items/${_t}/${B}`,{params:{fields:[gt]}});ra(e.data.data,x.data.data[yt]);const t=e.data.data[gt],{penalty:a,expression:o,bracket:n}=await C(null==(xt=_a[x.data.data.code])?void 0:xt.analytical_assay,q.data.data,wa,t,x.data.data[yt]);console.log(`[generateInvoice][parcel=${Ht[ee]}::invoice type=${Gt}::comm=${x.data.data[yt]}] evaluated penalty with an analytical assay=${null==(qt=_a[x.data.data.code])?void 0:qt.analytical_assay}, penaltyRate=${null==n?void 0:n.rate}, finalPenaltyRate=${a}, expression='${o}'`),Ea.push({commodity:x.data.data.name,analytical_assay:y(null==(Wt=_a[x.data.data.code])?void 0:Wt.analytical_assay,4),deduction_expression:o,assay_uom:null==(Lt=_a[x.data.data.code])?void 0:Lt.assay_uom,penalty_rate:y(null==n?void 0:n.rate,4),penalty_per_uom:t,final_penalty_rate:y(a,4),final_penalty:y((null!=a?a:1)*ua.dry_weight)})}}console.log(`[generateInvoice][parcel=${Ht[ee]}::invoice type=${Gt}] evaluated commodities=${JSON.stringify(ba)}`),console.log(`[generateInvoice][parcel=${Ht[ee]}::invoice type=${Gt}] evaluated penalties${JSON.stringify(Ea)}`);const Ca=ba.reduce(((e,t)=>e+g(t.price)),0),Sa=ba.reduce(((e,t)=>{var a;return e+g(null==(a=t.treatment_charge)?void 0:a.final_amount)}),0),Aa=Ea.reduce(((e,t)=>e+g(t.final_penalty)),0);console.log(`[generateInvoice][parcel=${Ht[ee]}::invoice type=${Gt}] TOTAL_REVENUE=${Ca}, TOTAL_TREATMENT_CHARGE=${Sa}, TOTAL_PENALTIES=${Aa}`);let Na,Oa=0;const Ta=!!Ht[te];Ta&&(Oa=Ht[te].reduce(((e,t)=>e+t.amount),0),Na={adjustments:Ht[te].map((e=>({description:e.description,amount:y(e.amount)}))),total_adjustments:y(Oa)});const Ia=sa[Ee],Ua=Ca-Sa-Aa+Oa,Ma=null!=Ia?Ua*Ia/100:void 0,ka=await s.get(`/items/${Nt}/${Ht[W]}`,{params:{fields:[Ot]}});ia(ka.data.data);const Fa=Ht[X];let ja;Fa&&(ja=await s.get(`/items/${It}/${Fa}`,{params:{fields:[Ut]}}),function(e){if(console.log("[validateVessel]"),!e)throw new Error("Vessel for parcel not found");if(!e[Ut])throw new Error("No name defined for vessel of the selected parcel")}(ja.data.data));let Va=(await s.get(`/items/${jt}?filter[${Vt}]=${i}`,{params:{fields:["id",Bt]}})).data.data.reduce(((e,t)=>e+(t[Bt]?1:0)),0)+1,Ba=i;const Ja=Va.toString().padStart(2,"0"),Ra=(Ht[ee],Ba.toString().padStart(2,"0")),xa={Counterparty:ka.data.data[Ot],Vessel:ja?ja.data.data[Ut]:"Vessel TBA","Shipment Date":Ht[Q]?S(new Date(Ht[Q])):Ht[Y]?S(new Date(Ht[Y])):"N/A","Arrival Date":Ht[H]?S(new Date(Ht[H])):Ht[K]?S(new Date(Ht[K])):"N/A",Status:Ht[Q]?"Unfinalised":"Planned",Revision:"Valuation",Invoice:`${Gt}:Valuation`,Parcel:`${Ht[ee]} (#${Ra})`,"Invoice Due Date":S(e.dueDate),"Dry Weight":`${y(ua.dry_weight,4)} ${ua.dry_weight_uom}`,"Total Revenues USD":y(Ca),"Total Penalties USD":y(Aa+Sa),...await Zt(ba,{dryWeight:ua.dry_weight,dryWeightUom:ua.dry_weight_uom}),"Total Adjustments USD":Ta?Na.total_adjustments:"0.00","Parcel Value USD":y(Ua),"Parcel Payable Value(Below Line) USD":y(Ma),"Payments USD":"-","Due Total":"-",metadata:{invoiceTypeRanking:Kt[Gt]}};return console.log(`[generateInvoice][parcel=${Ht[ee]}::invoice type=${Gt}] generated forecast invoice=${JSON.stringify(xa)}`),xa}catch(t){if(t instanceof Xt)return void console.error(`[generateInvoice][parcel=${e.parcelId}::invoice type=${e.invoiceType}]Non-fatal error: ${t.message}`);throw t}}(e))))),n=function(e){const t=e.reduce(((e,t)=>(e[t.Parcel]||(e[t.Parcel]=[]),e[t.Parcel].push(t),e)),{});Object.keys(t).forEach((e=>{t[e].sort(((e,t)=>e.metadata.invoiceTypeRanking<t.metadata.invoiceTypeRanking?-1:e.metadata.invoiceTypeRanking>t.metadata.invoiceTypeRanking?1:0))})),console.log(`[evaluateDuePaymentsForCashflow] cashflowByParcel=${JSON.stringify(t)}`),Object.keys(t).forEach((e=>{t[e].forEach(((a,o)=>{if(!a["Parcel Payable Value(Below Line) USD"]||"-"===a["Parcel Payable Value(Below Line) USD"])throw new Error(`Parcel ${e} for invoice ${a.Invoice} does not have a Parcel Payable Value(Below Line) USD`);const n=g(a["Parcel Payable Value(Below Line) USD"]);if(isNaN(n))throw new Error(`Parcel ${e} for invoice ${a.Invoice} has an invalid Parcel Payable Value(Below Line) USD of ${a["Parcel Payable Value(Below Line) USD"]}`);if(0===o){a["Payments USD"]=a["Payments USD"]&&"-"!==a["Payments USD"]?a["Payments USD"]:"0.00";const e=g(a["Payments USD"]);a["Due Total"]=y(n-e)}else{if(!t[e][o-1]["Parcel Payable Value(Below Line) USD"]||"-"===t[e][o-1]["Parcel Payable Value(Below Line) USD"])throw new Error(`Parcel ${e} for invoice ${a.Invoice} does not have a Parcel Payable Value(Below Line) USD for the previous invoice`);const r=g(t[e][o-1]["Parcel Payable Value(Below Line) USD"]);if(isNaN(r))throw new Error(`Parcel ${e} for invoice ${a.Invoice} has an invalid Parcel Payable Value(Below Line) USD of ${t[e][o-1]["Parcel Payable Value(Below Line) USD"]} for the previous invoice`);a["Due Total"]=y(n-r),a["Payments USD"]&&"-"!==a["Payments USD"]||(a["Payments USD"]=t[e][o-1]["Payments USD"])}}))})),console.log(`[evaluateDuePaymentsForCashflow] cashflowByParcel=${JSON.stringify(t)}`);const a=Object.keys(t).flatMap((e=>t[e]));return console.log(`[evaluateDuePaymentsForCashflow] cashflowAsJsonWithDueTotal=${JSON.stringify(a)}`),a}(o.filter((e=>!!e))),l=n.map((e=>(delete e.metadata,e))),u=Qt(l);a("input",l),console.log(`[generateCashflow] cashflow response: ${JSON.stringify(l)}`),console.log(`[generateCashflow] cashflow as csv: ${u}`),i.value=!1,zt(u)}catch(e){r.value=e.message}finally{i.value=!1}},downloadDoc:zt,copy:async function(){l.value=!0;const{id:e,user_created:t,date_created:a,user_updated:o,date_updated:n,cashflow:i,forecast_price:d,...u}=c.value,m=await s.get(`/items/${qt}`,{params:{filter:{[j]:d},fields:[Wt,Gt,Ht,Lt]}}),f=await s.post(`items/${qt}`,m.data.data);if(200!==f.status)return console.log(`[cashflow::copy] duplicate forecast prices response status: ${f.status}`),void(r.value=`Failed to duplicate forecast prices with status ${f.status}`);const y=f.data.data.map((e=>e.id));console.log(`[cashflow::copy] duplicated forecast prices id=${JSON.stringify(y)}`),console.log(`[cashflow::copy] requestBody=${JSON.stringify(u)}`);const p=await s.post("/items/"+R,{forecast_price:y,...u});if(200!==p.status)return console.log(`[cashflow::copy] copy response status: ${p.status}`),void(r.value=`Failed to duplicate cashflow with status ${p.status}`);l.value=!1,window.open(`/admin/content/${R}/${p.data.data.id}`)},isCopying:l,failureReason:r};function zt(e){let t;t=f(e)?Qt(c.value.input):e,console.log(`[downloadDoc] csvData=${t}`),Yt(t)}async function Zt(e,t){console.log(`[mapOutCommoditiesForCashflow] commodities=${JSON.stringify(e)};;containedMetalParam=${JSON.stringify(t)}`);return(await Promise.all(e.map((async e=>{var a,o,n,r,i,l,s;const c=await F(e.payable_metal_uom,t.dryWeightUom,e.assay_uom);console.log(`[mapOutCommoditiesForCashflow] commodity=${e.commodity}, containedMetalUnitConversion=${JSON.stringify(c)}`);const d=(null!=(o=null==(a=c.initialConversion)?void 0:a.conversionFactor)?o:1)*(null!=(r=null==(n=c.finalConversion)?void 0:n.conversionFactor)?r:1),u=("%"===e.assay_uom?.01:1)*e.analytical_assay;return{[`${e.commodity} Payable Metal (${e.payable_metal_uom})`]:e.payable_metal,[`${e.commodity} Contained Metal (${e.payable_metal_uom})`]:y(t.dryWeight*u*d),[`${e.commodity} Revenue (USD)`]:e.price,[`${e.commodity} QP Month`]:ea(new Date(e.qp_start_date)),[`${e.commodity} Price (USD/${e.price_per_uom})`]:e.price_rate,[`${e.commodity} TC (USD)`]:null==(i=e.treatment_charge)?void 0:i.final_amount,[`${e.commodity} TC (USD/${null==(l=e.treatment_charge)?void 0:l.per_uom})`]:null==(s=e.treatment_charge)?void 0:s.final_rate}})))).reduce(((e,t)=>({...e,...t})),{})}function ea(e){return`${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][e.getMonth()]} ${e.getFullYear()}`}async function ta(e,t,a,o,n,r=1){var i;if(console.log(`[getCommodityAvgPrice] commodity=${e}, commodityId=${t}, source=${a}, startDate=${o}, endDate=${n}, currency=${r}`),f(e))throw new Error(`Commodity ${e} is not defined for price calcualtion`);if(f(a))throw new Error(`Price method for commodity ${e} is not defined for price calcualtion`);if(f(o))throw new Error(`Start date is not defined for price calcualtion with Price Method #${a} has not been properly defined, please ensure that contract QP for commodity ${e} is properly defined`);if(f(n))throw new Error(`End date is not defined for price calcualtion with Price Method #${a} has not been properly defined, please ensure that contract QP for commodity ${e} is properly defined`);const l=await s.get(`/items/navarch_commodity_price?filter[_and][0][price_method][_eq]=${a}&filter[_and][0][currency][_eq]=${r}&filter[_and][1][date][_between][0]=${A(o)}&filter[_and][1][date][_between][1]=${A(n)}&sort=date`,{params:{fields:[Mt,kt,Ft,"price_method"]}});if((null==(i=l.data)?void 0:i.data)&&Array.isArray(l.data.data)&&l.data.data.length>0){const t=l.data.data[l.data.data.length-1],r=new Date(t[Ft]);if(console.log(`[getCommodityAvgPrice] commodity prices=${JSON.stringify(l.data.data)}`),r>=n){const t=l.data.data.reduce(((t,o)=>{if(!o[kt]&&!o[Mt])throw new Error(`Commodity ${e} for Price Method #${a} on the date of ${o[Ft]} does not have a price, please contact Navarch for assistance`);let n;if(null!==o[kt]&&(n=Number(o[kt])),null===o[Mt])throw new Error(`The commodity price for ${e} of Price Method #${a} for the date of ${o[Ft]} is not a valid number, please contact Navarch for assistance`);return n=Number(o[Mt]),t+n}),0)/l.data.data.length;return console.log(`[getCommodityAvgPrice] average price=${t} for commodity ${e} between ${A(o)} and ${A(n)}`),t}console.log(`[getCommodityAvgPrice] latest comm price date=${r} is before end date=${n}, getting forecast price`)}if(!c.value[j])throw new Error("Please save the Cashflow form first before generating the cashflow doc");const d=await s.get(`/items/${qt}`,{params:{filter:{[Wt]:{_eq:t},cashflow_forecast_id:{_eq:c.value[j]}},fields:[Lt,Wt,Gt,Ht]}});!function(e,t){if(!e||!Array.isArray(e)||0===e.length)throw new Error(`No forecast price found for ${t}, please ensure prices have been provided`)}(d.data.data,e);const u=d.data.data.find((e=>{const t=new Date(e[Gt]),a=new Date(e[Ht]);return t<=o&&a>=n}));if(!u)throw new Error(`No single forecast price found for commodity ${e} between ${A(o)} and ${A(n)}, please ensure there is only one price value for this range`);return console.log(`[getCommodityAvgPrice] forecast price=${u[Lt]} for commodity ${e} between ${A(o)} and ${A(n)}`),u[Lt]}function aa(e,t){var a,o,n;if(console.log("[validateCommodityData]"),!e)throw new Error("commodity data response is null");if(!e[yt])throw new Error(`Commodity name for commodity ${null!=(a=e[pt])?a:t} is undefined, please contact Navarch for assistance`);if(!e[pt])throw new Error(`Commodity code for commodity ${null!=(o=e[yt])?o:t} is not defined, please contact Navarch for assistance`);if(!e[j])throw new Error(`Commodity ID for commodity ${null!=(n=e[yt])?n:t} is not defined, please contact Navarch for assistance`)}function oa(e,t){if(!e)throw new Error(`Price per UOM for commodity ${t} is not a valid`);if(!e[gt])throw new Error(`Price per UOM for commodity ${t} does not have a valid unit symbol, please contact Navarch for assistance`)}function na(e,t){if(!e)throw new Error(`Treatment charge per UOM for commodity ${t} is not a valid`);if(!e[gt])throw new Error(`Treatment charge per UOM for commodity ${t} does not have a valid unit symbol, please contact Navarch for assistance`)}function ra(e,t){if(!e)throw new Error(`Penalty per UOM for commodity ${t} is not a valid`);if(!e[gt])throw new Error(`Penalty per UOM for commodity ${t} does not have a valid unit symbol, please contact Navarch for assistance`)}function ia(e){if(console.log("[validateCounterparty]"),!e)throw new Error("Counterparty for parcel not found");if(!e[Ot])throw new Error("No codename defined for counterparty of the selected parcel")}}});const $={key:0},w={key:1};var D=[],b=[];!function(e,t){if(e&&"undefined"!=typeof document){var a,o=!0===t.prepend?"prepend":"append",n=!0===t.singleTag,r="string"==typeof t.container?document.querySelector(t.container):document.getElementsByTagName("head")[0];if(n){var i=D.indexOf(r);-1===i&&(i=D.push(r)-1,b[i]={}),a=b[i]&&b[i][o]?b[i][o]:b[i][o]=l()}else a=l();65279===e.charCodeAt(0)&&(e=e.substring(1)),a.styleSheet?a.styleSheet.cssText+=e:a.appendChild(document.createTextNode(e))}function l(){var e=document.createElement("style");if(e.setAttribute("type","text/css"),t.attributes)for(var a=Object.keys(t.attributes),n=0;n<a.length;n++)e.setAttribute(a[n],t.attributes[a[n]]);var i="prepend"===o?"afterbegin":"beforeend";return r.insertAdjacentElement(i,e),e}}(".margin-top-16px[data-v-64969d30] {\n  margin-top: 16px;\n}",{}),g.render=function(e,t,a,o,n,p){const h=r("v-button"),v=r("v-notice");return i(),l(s,null,[c(' <input :value="value" @input="handleChange($event.target.value)" /> '),c(" create a button only interface for Directus"),e.value?(i(),l("div",w,[d(h,{onClick:t[1]||(t[1]=()=>e.downloadDoc())},{default:u((()=>[m("Download Cashflow ")])),_:1})])):(i(),l("div",$,[d(h,{onClick:t[0]||(t[0]=()=>e.generateCashflow()),loading:e.isGeneraingDoc},{default:u((()=>[m("Generate Cashflow")])),_:1},8,["loading"]),e.failureReason?(i(),f(v,{key:0},{default:u((()=>[m(y(e.failureReason),1)])),_:1})):c("v-if",!0)])),d(h,{class:"margin-top-16px",onClick:t[2]||(t[2]=()=>e.copy()),loading:e.isCopying},{default:u((()=>[m("Copy")])),_:1},8,["loading"])],64)},g.__scopeId="data-v-64969d30",g.__file="src/interface.vue";var E=t({id:"navarch-docgen-cashflow",name:"Navarch Cashflow Generator Button",icon:"receipt_long",description:"This is my custom interface for Navarch's Cashflow Doc!",component:g,options:null,types:["json"],group:"standard"});export{E as default};
