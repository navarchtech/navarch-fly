import{useApi as e,defineInterface as a}from"@directus/extensions-sdk";import{defineComponent as t,ref as o,inject as n,resolveComponent as r,openBlock as i,createElementBlock as l,Fragment as s,createCommentVNode as c,createVNode as d,withCtx as u,createTextVNode as m,createBlock as f,toDisplayString as h}from"vue";var p=(e=>(e.BRACKET="Brackets",e.MIN_DEDUCTION="Minimum Deduction",e.MAX_CAP="Maximum Cap",e))(p||{}),y=(e=>(e.PERCENTAGE="Percentage",e.FRACTIONAL="Fractional",e))(y||{}),v=(e=>(e.WET_WEIGHT="wet_weight",e.MOISTURE="moisture",e.DRY_WEIGHT="dry_weight",e))(v||{}),_=(e=>(e.METHOD="method",e.WET_WEIGHT_UOM="wet_weight_uom",e.MOISTURE_UOM="moisture_uom",e.DRY_WEIGHT_UOM="dry_weight_uom",e))(_||{}),w=t({props:{value:{type:Object,default:null}},emits:["input"],setup(a,{emit:t}){const r=o(""),i=o(!1),l=e(),s=n("values",o({}));function c(e){if(console.log("[evaluateWeightData]"),0===e.length)return;const a=u(e,v.DRY_WEIGHT),t=u(e,v.WET_WEIGHT);return{method:d(e,_.METHOD),lots:e,dry_weight_uom:d(e,_.DRY_WEIGHT_UOM),wet_weight_uom:d(e,_.WET_WEIGHT_UOM),dry_weight:a,wet_weight:t,moisture:(t-a)/t*100}}function d(e,a){if(console.log("[getFirstValueAsSharedValue]"),0!==e.length)return console.log(`lots[0][${a.toString()}]=${e[0][a.toString()]}`),e[0][a.toString()]}function u(e,a){return console.log("[evaluateAggregateValue]"),e.reduce(((e,t)=>{var o;return e+(null!=(o=t[a.toString()])?o:0)}),0)}function m(e){return null==e}function f(e,a=2,t=!0){if(console.log("[formatNumber]"),isNaN(e)||null===e)return"-";const o=Math.round(e*Math.pow(10,a))/Math.pow(10,a),[n,r]=o.toString().split("."),i=n.replace(/\B(?=(\d{3})+(?!\d))/g,",");if(!r&&!t)return i;return`${i}.${(null!=r?r:"").padEnd(a,"0")}`}function h(e){if(console.log("[parseNumber]"),!e)return 0;const a=parseFloat(e.replace(/,/g,""));return console.log(`[parseNumber] number: ${e} to ${a}`),a}function w(e,a,t){var o,n,r;if(console.log("[findBracket]"),1===e.length){if(a>=(null!=(o=e[0].lower_threshold)?o:0)&&(null===e[0].upper_threshold||void 0===e[0].upper_threshold||a<e[0].upper_threshold))return e[0];throw new Error(`Evaluated monetary value $${a} does not fall within the only ${t.type} bracket with range ${null!=(n=e[0].lower_threshold)?n:0} - ${null!=(r=e[0].upper_threshold)?r:"âˆž"}`)}return e.find((e=>{var t,o;const n=a>(null!=(t=e.lower_threshold)?t:0)&&(null===e.upper_threshold||void 0===e.upper_threshold||a<e.upper_threshold)||e.lower_threshold_inclusive&&a===(null!=(o=e.lower_threshold)?o:0)||e.upper_threshold_inclusive&&a===e.upper_threshold;return console.log(`[findBracket] value=${a} for bracket: ${JSON.stringify(e)}? match=${!!n}`),n}))}function g(e,a){var t,o,n,r,i,l,s;console.log("[evaluateFinalValueFromBrackets]");const c=(e-(null!=(t=a.initial_adjustment)?t:0)*(null!=(o=a.initial_adjustment_conversion_factor)?o:1))*(null!=(n=a.rate)?n:0)*(a.rate_type===y.PERCENTAGE?.01:1)+(null!=(r=a.final_adjustment)?r:0)*(null!=(i=a.final_adjustment_conversion_factor)?i:1);switch(a.bracket_type){case p.MIN_DEDUCTION:if(null===a.comparator||void 0===a.comparator)throw new Error("Minimum deduction not found");const t=a.comparator*(null!=(l=a.comparator_conversion_factor)?l:1);return e-c<t?e-t:c;case p.MAX_CAP:if(null===a.comparator||void 0===a.comparator)throw new Error("Maximum cap not found");const o=a.comparator*(null!=(s=a.comparator_conversion_factor)?s:1);return c>o?o:c;case p.BRACKET:return c;default:throw new Error(`bracket type ${a.bracket_type} is not supported`)}}async function $(e,a,t,o){var n,r,i,l,s,c,d,u;if(console.log("[evaluatePayableAssay]"),!t||0===t.length)return{};const m=w(t,e,{commodityCode:o,type:"Payable Assay"});if(!m)throw new Error(`Bracket not found for value ${e}, please ensure the brackets for all commodities defined in the contract cover all range of possible values for payable assays`);let h,v,_=1;m.initial_adjustment_uom&&void 0!==m.initial_adjustment_uom&&null!==m.initial_adjustment_uom&&m.initial_adjustment_uom!==a&&(_=await I(m.initial_adjustment_uom,a),h=M(m.initial_adjustment_uom,a));let $,D=1;m.bracket_type===p.MAX_CAP?(v=null!=(n=m.maximum_cap)?n:0,void 0!==m.maximum_cap_uom&&null!==m.maximum_cap_uom&&m.maximum_cap_uom!==a&&(D=await I(m.maximum_cap_uom,a),$=M(m.maximum_cap_uom,a))):m.bracket_type===p.MIN_DEDUCTION&&(v=null!=(r=m.minimum_deduction)?r:0,void 0!==m.minimum_deduction_uom&&null!==m.minimum_deduction_uom&&m.minimum_deduction_uom!==a&&(D=await I(m.minimum_deduction_uom,a),$=M(m.minimum_deduction_uom,a)));const b=g(e,{bracket_type:m.bracket_type,rate:null!=(i=m.rate)?i:1,rate_type:null!=(l=m.rate_type)?l:y.FRACTIONAL,initial_adjustment:null!=(s=m.initial_adjustment)?s:0,initial_adjustment_conversion_factor:_,comparator:v,comparator_conversion_factor:D});let E="";const P=void 0!==m.initial_adjustment&&null!==m.initial_adjustment;if(m.bracket_type===p.BRACKET)E=`${P?"(":""}${f(e,4)}${null!=a?a:""}${P?` - ${f(m.initial_adjustment,4)}${null!=(c=m.initial_adjustment_uom)?c:`${null!=a?a:""}`}`:""}${P&&1!==_?` * ${f(_,4)}${h}`:""}${P?")":""} * ${f(m.rate,4)}${m.rate_type===y.PERCENTAGE?"/100":`/${f(1,4)}`}`;else if(m.bracket_type===p.MIN_DEDUCTION){E=b===e-v*D?`${f(e,4)}${null!=a?a:""} - ${f(v,4)}${null!=a?a:""}${1!==D?` * ${f(D,4)}${$}`:""}`:`${P?"(":""}${f(e,4)}${null!=a?a:""}${P?` - ${f(m.initial_adjustment,4)}${null!=(d=m.initial_adjustment_uom)?d:`${null!=a?a:""}`}`:""}${P&&1!==_?` * ${f(_,4)}${h}`:""}${P?")":""} * ${f(m.rate,4)}${m.rate_type===y.PERCENTAGE?"/100":`/${f(1,4)}`}`}else{if(m.bracket_type!==p.MAX_CAP)throw new Error(`[buildPayableAssayExpression] unknown bracket method: ${m.bracket_type}`);E=b===v*D?`${f(v,4)}${null!=a?a:""}${1!==D?` * ${f(D,4)}${$}`:""}`:`${P?"(":""}${f(e,4)}${null!=a?a:""}${P?` - ${f(m.initial_adjustment,4)}${null!=(u=m.initial_adjustment_uom)?u:`${null!=a?a:""}`}`:""}${P&&1!==_?` * ${f(_,4)}${h}`:""}${P?")":""} * ${f(m.rate,4)}${m.rate_type===y.PERCENTAGE?"/100":`/${f(1,4)}`}`}return{payableAssay:b,expression:E}}console.log("[main] formValues=",s);const D="above the lower threshold, plus",b="below the upper threshold, minus";function E(e,a,t,o){var n,r,i,l;if(console.log("[evaluateTreatmentCharge]"),!t||!t.length)return;const s=w(t,e,{commodityCode:o,type:"Treatment Charge"});if(!s)throw new Error(`Bracket not found for value ${e}, please ensure the brackets for all commodities defined in the contract cover all range of possible values for treatment charge`);let c=0,d=1;if(s.use_btc)d=0,c=0;else if(d=null!=(n=s.rate)?n:1,s.for_every_unit===D)c=null!=(r=s.lower_threshold)?r:0;else{if(s.for_every_unit!==b)throw new Error(`[evaluateTreatmentCharge] unknown for_every_unit: ${s.for_every_unit}`);c=null!=(i=s.upper_threshold)?i:0}const u={bracket_type:p.BRACKET,rate:d,rate_type:y.FRACTIONAL,initial_adjustment:c,final_adjustment:null!=(l=s.base_treatment_charge)?l:0};return console.log(`[evaluateTreatmentCharge] bracketForEvaluation: ${JSON.stringify(u)}`),{finalValue:g(e,u),baseTreatmentCharge:s.base_treatment_charge}}function P(e,a,t,o,n){var r,i,l;if(console.log("[evaluatePenalty]"),!a||!a.length)return{};const s=w(a,e,{commodityCode:n,type:"Penalty"});if(!s)throw new Error(`[evaluatePenalty] Bracket not found for value ${e}, please ensure the brackets for all commodities defined in the contract cover all range of possible values for penalty`);let c=0,d=1;if(s.no_penalty)d=0,c=0;else if(d=null!=(r=s.rate)?r:1,s.for_every_unit===D)c=null!=(i=s.lower_threshold)?i:0;else{if(s.for_every_unit!==b)throw new Error(`[evaluatePenalty] unknown for_every_unit: ${s.for_every_unit}`);c=null!=(l=s.upper_threshold)?l:0}const u={bracket_type:p.BRACKET,rate:d,rate_type:y.FRACTIONAL,initial_adjustment:c,final_adjustment:0};console.log(`[evaluatePenalty] bracketForEvaluation: ${JSON.stringify(u)}`);const m=g(e,u),h=null!=u.initial_adjustment;let v="";return v=s.rate&&0!==s.rate?`${h?"(":""}${f(e,4)}${h?` - ${f(c,4)})`:""} / ${f(1,4)} * ${null!=t?t:""} ${f(d,4)}/${null!=o?o:""}`:"No penalty",{penalty:m,expression:v,bracket:s}}function C(e){const a=e.getDate(),t=e.getMonth(),o=e.getFullYear();return`${a} ${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][t]} ${o}`}function S(e,a=!0){const t=e.getMonth()+1,o=e.getDate();return`${e.getFullYear()}${a?"-":" "}${t<10?"0":""}${t}${a?"-":" "}${o<10?"0":""}${o}`}function A(e,a,t=!1){const o=new Date(e.valueOf());let n=a-(t?1:0);for(;n>0;)o.setDate(o.getDate()-1),0!==o.getDay()&&6!==o.getDay()&&(n-=1);return o.getHours()>=12&&o.setDate(o.getDate()+1),o}function N(e,a,t=!1){const o=new Date(e.valueOf());let n=a-(t?1:0);for(;n>0;)o.setDate(o.getDate()+1),0!==o.getDay()&&6!==o.getDay()&&(n-=1);return o.getHours()>=12&&o.setDate(o.getDate()+1),o}function O(e,a){const t=new Date(e.valueOf());return t.setMonth(t.getMonth()+a,1),t}function T(e,a){const t=new Date(e.valueOf());return t.setMonth(t.getMonth()+a+1,0),t}async function U(e,a){if(e===a)return 1;const t=await l.get(`/items/${fa}?filter[${ha}]=${e}`,{params:{fields:[wa]}});if(0===t.data.data.length||null===t.data.data[0][wa]||void 0===t.data.data[0][wa])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for source weight unit ${e}. Ensure that the symbol is correct and is a weight unit symbol`);const o=await l.get(`/items/${fa}?filter[${ha}]=${a}`,{params:{fields:[wa]}});if(0===o.data.data.length||null===o.data.data[0][wa]||void 0===o.data.data[0][wa])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for the target weight unit ${a}. Ensure that the symbol is correct and is a weight unit symbol`);const n=parseFloat(t.data.data[0][wa]);if(isNaN(n))throw new Error(`[getWeightUnitConversionValue] source weight unit ${e} conversion value=${n} is not a number`);const r=parseFloat(o.data.data[0][wa]);if(isNaN(r))throw new Error(`[getWeightUnitConversionValue] target weight unit ${a} conversion value=${r} is not a number`);return n/r}async function I(e,a){if(null==e||null==a)return 1;if(e===a)return 1;const t=await l.get(`/items/${ga}?filter[${$a}]=${e}`,{params:{fields:[Da]}});if(0===t.data.data.length||void 0===t.data.data[0][Da]||null===t.data.data[0][Da])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for source weight unit ${e}. Ensure that the symbol is correct and is a weight unit symbol`);const o=await l.get(`/items/${ga}?filter[${$a}]=${a}`,{params:{fields:[Da]}});if(0===o.data.data.length||void 0===o.data.data[0][Da]||null===o.data.data[0][Da])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for the target weight unit ${a}. Ensure that the symbol is correct and is a weight unit symbol`);const n=parseFloat(t.data.data[0][Da]);if(isNaN(n))throw new Error(`[getAssayUnitConversionValue] source weight unit ${e} conversion value=${n} is not a number`);console.log(`[getAssayUnitConversionValue] source unit conversion value=${n}`);const r=parseFloat(o.data.data[0][Da]);if(isNaN(r))throw new Error(`[getAssayUnitConversionValue] target weight unit ${e} conversion value=${r} is not a number`);return console.log(`[getAssayUnitConversionValue] target unit conversion value=${r}`),console.log("[getAssayUnitConversionValue] returning "+n/r),n/r}function M(e,a){if(void 0===e||void 0===a||null===e||null===a)return;const t=e.split("/"),o=a.split("/");if(t.length>2||o.length>2)throw new Error(`[getConversionUnit] sourceUnit=${e} and targetUnit=${a} must be in the format of 'unit1/unit2', an extra '/' was found`);if(1===t.length&&1===o.length)return`${o[0]}/${t[0]}`;if(1===t.length){const e=o[0]===t[0]?"":`${o[1]}(${t[1]})`,a=o[1];return""===a?e:`${e}/${a}`}if(1===o.length){const e=t[1],a=t[0]===o[0]?"":`${t[1]}(${o[0]})`;return""===a?e:`${e}/${a}`}{const e=t[0]===o[0],a=t[1]===o[1],n=e||""===t[0],r=e||""===o[0],i=a||""===t[1],l=a||""===o[1],s=!i&&!r,c=!n&&!l,d=`${i?"":t[1]}${s?"(":""}${r?"":`${o[0]}`}${s?")":""}`,u=`${n?"":t[0]}${c?"(":""}${l?"":`${o[1]}`}${c?")":""}`;return""===u?d:`${d}/${u}`}}async function k(e,a,t){const o=await l.get(`/items/${fa}?filter[${pa}]=${a}`,{params:{fields:[ha]}});if(!o.data.data||!o.data.data[0]||!o.data.data[0][ha])throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] Dry weight uom not found for symbol ${a}`);const n=o.data.data[0][ha];if("%"===t){if(n===e)return{};const a=M(n,e);if(!a)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] no conversion unit found for dry weight unit ${n} and target weight unit ${e}`);return{finalConversion:{conversionFactor:await U(n,e),conversionUom:a}}}let r=t.split("/");if(1==r.length){const e=await async function(e){const a=await l.get(`/items/${ga}`,{params:{fields:[$a,ba],filter:{[ba]:{_nnull:!0},[$a]:{_eq:e}}}});if(200!==a.status||!a.data||0===a.data.data.length)throw new Error("[getAssayUnitComposition] no assay units found with composition");return a.data.data[0][ba]}(t);if(!e)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${t} does not have a composition`);r=e.split("/")}if(r.length>2||0===r.length)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${t} is not in the format of 'unit1/unit2'`);const i=r[0],s=r[1],c={};if(s!==n){const e=M(n,s);if(!e)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] no conversion unit found for dry weight unit ${n} and assay unit denominator unit ${s}`);c.initialConversion={conversionFactor:await U(n,s),conversionUom:e}}if(i!==e){const a=M(i,e);if(!a)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] no conversion unit found for target weight unit ${e} and assay unit numerator unit ${i}`);c.finalConversion={conversionFactor:await U(i,e),conversionUom:a}}return c}const F="id",j="foreign_key",V="lot_number",B="method",R="navarch_parcel",J="contract",q="counterparty",x="assay_results",L="weight_result",W="actual_arrival_date",G="estimate_arrival_date",H="bl_date",K="estimated_shipment_date",Q="vessel",Y="origin",X="destination",z="shipment_code",Z="adjustments",ee="parcel_finalisation_date",ae="navarch_assay_lot",te="commodity",oe="dry_weight",ne="final_assay",re="assay_uom",ie="lot_number",le="navarch_weight_lot",se="dry_weight",ce="wet_weight",de="moisture",ue="wet_weight_uom",me="dry_weight_uom",fe="navarch_contract",he="contract_currency",pe="name",ye="navarch_contract_payment_information",ve="related_contract",_e="invoice_type",we="pay_percent",ge="pa_days",$e="pa_day_type",De="pa_ref_day",be="pa_cashflow_days",Ee="pa_cashflow_day_type",Pe="pp_days",Ce="pp_day_type",Se="pp_ref_day",Ae="navarch_commodity_in_contract",Ne="contract",Oe="commodity",Te="primary_commodity",Ue="price_method",Ie="price_per_uom",Me="treatment_charge_per_uom",ke="quotational_periods",Fe="payable_assay_rates",je="treatment_charge_rates",Ve="penalty_rates",Be="penalty_per_uom",Re="navarch_payable_assay_bracket",Je="initial_adjustment",qe="initial_adjustment_uom",xe="minimum_deduction",Le="minimum_deduction_uom",We="maximum_cap",Ge="maximum_cap_uom",He="related_commodity_in_contract",Ke="bracket_type",Qe="lower_threshold",Ye="lower_threshold_inclusive",Xe="upper_threshold",ze="upper_threshold_inclusive",Ze="rate",ea="rate_type",aa="navarch_treatment_charge_bracket",ta="base_treatment_charge",oa="use_btc",na="for_every_unit",ra="navarch_penalty_bracket",ia="no_penalty",la="for_every_unit",sa="navarch_commodity",ca="name",da="code",ua="navarch_currency",ma="code",fa="navarch_unit",ha="symbol",pa="dry_symbol",ya="wet_symbol",va="dry_unit",_a="wet_unit",wa="conversionToGram",ga="navarch_assay_unit",$a="unit",Da="conversion_to_ppb",ba="composition",Ea="navarch_counterparty",Pa="codename",Ca="name",Sa="navarch_vessel",Aa="name",Na="price_pm",Oa="average_price",Ta="date",Ua="navarch_invoices",Ia="parcel",Ma="invoice",ka="amount_paid",Fa="invoice_type",ja="commodity",Va="price",Ba="start_date",Ra="end_date",Ja={Advance:0,"Second Advance":1,"Third Advance":2,"Fourth Advance":3,Provisional:4,"Second Provisional":5,"Third Provisional":6,"Fourth Provisional":7,Final:8};class qa extends Error{constructor(e){super(e),this.name="NonFatalError",Object.setPrototypeOf(this,qa.prototype)}}return{isGeneraingDoc:i,invoiceUrl:s.value,generateCashflow:async function(){r.value="";try{i.value=!0;const e=await async function(){const e=new Date(s.value.start_date);if("Invalid Date"===e.toString())throw r.value="Start date is invalid",new Error("Start date is invalid");const a=new Date(s.value.end_date);if("Invalid Date"===a.toString())throw r.value="End date is invalid",new Error("End date is invalid");const t=await l.get(`/items/${fe}`,{params:{fields:[pe,F,"invoice_type"]}}),o={};await Promise.all(t.data.data.map((async t=>{var n,r,i,s,c;const d=await l.get(`/items/${ye}`,{params:{filter:{[ve]:{_eq:t[F]}},fields:[_e,ge,$e,De,be,Ee]}}),u=await l.get(`/items/${R}`,{params:{filter:{[J]:{_eq:t[F]}},fields:[F,z,W,G,H,K,ee]}});for(const m of d.data.data){const d={days:"Final"===m[Fa]?m[be]:m[ge],day_type:"Final"===m[Fa]?m[Ee]:m[$e],ref_day:"Final"===m[Fa]?"QP Month + n days":m[De]};if(!d)throw new Error(`Contract ${t[pe]} does not have a payment advice for invoice type ${m[Fa]}`);let f,h="";for(const p of u.data.data){switch(d.ref_day){case"Arrival Date":h="Actual Arrival Date from the Parcel form",f=null!=(n=p[W])?n:p[G];break;case"B/L Date":h="B/L Date (or Estimated Shipment Date) from the Parcel form",f=null!=(r=p[H])?r:p[K];break;case"Invoice Date":h="Invoice Date (using the B/L Date or Estimated Shipment Date from the Parcel form)",f=null!=(i=p[H])?i:p[K];break;case"Estimated Shipment Date":h="Estimated Shipment Date from the Parcel form",f=p[K];break;case"QP Month + n days":const e=await l.get(`items/${Ae}`,{params:{filter:{[Ne]:{_eq:t[F]},payable_commodity:{_eq:!0}},fields:[ke]}});if(!Array.isArray(e.data.data)||0===e.data.data.length)throw new Error(`Contract ${t[pe]} does not have any payable commodities`);const a=e.data.data.map((e=>e[ke].find((e=>!!e.default)))),o=a.reduce(((e,a)=>a.qp_period>e.qp_period?a:e),a[0]);let u;switch(o.qp_code){case"MAMA":h="Actual Arrival Date (or Estimated Arrival Date) from the Parcel form",u=null!=(s=p[W])?s:p[G];break;case"MOSS":case"MOS":case"MOAS":h="B/L Date (or Estimated Shipment Date) from the Parcel form",u=null!=(c=p[H])?c:p[K];break;default:throw new Error(`Unsupported QP code ${o.qp_code}, currently only supports MAMA, MOS, MOSS, and MOAS`)}const m=T(new Date(u),o.qp_period);if(!m||"Invalid Date"===m.toString())throw new Error(`Invalid date for last date of QP month: ${m}, please ensure all fields for QP for contract ${t[pe]} and the ${h} in parcel ${p[z]} are filled in`);f=m.toISOString();break;default:throw new Error(`Invalid reference day for payment advice: ${d.ref_day}; please contact Navarch for support`)}if(null==f)throw new Error(`Reference day for payment advice ${h} is empty in parcel ${p[z]}`);const u=new Date(f),y=parseInt(d.days);let v;switch(d.day_type){case"Business Day(s)":v=N(u,y,!0);break;case"Calendar Day(s)":v=new Date(u.valueOf()),v.getHours()>=12?v.setDate(v.getDate()+y+1):v.setDate(v.getDate()+y);break;default:throw new Error(`Please provide a valid Day Type (Cashflow) for ${t[pe]}:Final Invoice Type`)}v>=e&&v<=a&&(o[p[F]]||(o[p[F]]=[]),o[p[F]].push({invoiceType:m[_e],dueDate:v,parcelId:p[F],contractName:t[pe]}))}}})));const n=Object.keys(o),i=await l.get(`/items/${R}`,{params:{filter:{[F]:{_in:n}},fields:[F,J,q,x,L,W,G,H,K,Q,Y,X,z,Z,"parcel_finalised",ee,x]}});if(!i.data.data||i.data.data.length!==n.length)throw new Error("Experiencing some network issues, please try again. If the issue persists, contact Navarch for support");const c={parcelData:i.data.data.reduce(((e,a)=>(e[a[F]]=a,e)),{}),contractNameByParcelId:n.reduce(((e,a)=>(e[a]=o[a][0].contractName,e)),{}),invoiceTypeParcel:n.flatMap((e=>o[e])),parcelIds:n};return console.log(`[getApplicableParcels] returnObject=${JSON.stringify(c)}`),c}(),a=await async function(e){const a=[],t=await l.get(`/items/${Ua}`,{params:{filter:{[Ia]:{_in:e.parcelIds},[Ma]:{_nnull:!0}},fields:[Ia,Fa,Ma,ka]}});for(const o of e.invoiceTypeParcel){const n=t.data.data.find((e=>e[Ia]===o.parcelId&&e[Fa]===o.invoiceType));n?a.push({parcelId:o.parcelId,invoiceType:o.invoiceType,contractName:e.contractNameByParcelId[o.parcelId],dueDate:o.dueDate,invoiceData:{...n[Ma],amount_paid:n[ka]}}):a.push({parcelId:o.parcelId,invoiceType:o.invoiceType,contractName:e.contractNameByParcelId[o.parcelId],dueDate:o.dueDate,parcelData:e.parcelData[o.parcelId]})}return console.log(`[generateInvoiceParamForParcel] invoiceParams=${JSON.stringify(a)}`),a}(e);console.log(`[generateCashflow] form values=${JSON.stringify(s.value)}`);const o=await Promise.all(a.map((async e=>(console.log(`[generateCashflow] invoiceParam=${JSON.stringify(e)}`),await async function(e){var a,t,o,n,s,d,u,m,p,y,v,_,w,g,D,b,S,N,U,I,M,ee,pe,be,Ee,wa,ga,$a,Da,ba,Na,Oa,Ta,ka,Fa,ja,Va,Ba,Ra;r.value="",i.value=!0;try{if(e.invoiceData){console.log(`[generateInvoice][invoice=${JSON.stringify(e.invoiceData.invoice_number)}::parcel=${e.invoiceData.parcel}] using existing invoice=${JSON.stringify(e.invoiceData)}`);const a=e.invoiceData,t=await l.get(`/items/${Ea}`,{params:{filter:{[Ca]:{_eq:a.buyer}},fields:[Pa]}});Xa(t.data.data[0]);const o=await l.get(`/items/${R}`,{params:{filter:{[F]:{_eq:e.parcelId}},fields:[H,W,G]}});console.log(`[generateInvoice][invoice=${JSON.stringify(e.invoiceData.invoice_number)}::parcel=${e.invoiceData.parcel}] parcel date data=${JSON.stringify(o.data.data)}`);const n=o.data.data[0];return{Counterparty:t.data.data[0][Pa],Vessel:"N/A"===a.vessel?"Vessel TBA":a.vessel,"Shipment Date":a.bl_date,"Arrival Date":n[W]?C(new Date(n[W])):n[G]?C(new Date(n[G])):"N/A",Status:o[H]?"Unfinalised":"Planned",Revision:"Original",Invoice:`${a.invoice_type}:Original`,Parcel:a.parcel,"Invoice Due Date":C(e.dueDate),"Dry Weight":a.dry_weight,"Total Revenues USD":a.total_revenue,"Total Penalties USD":a.total_deductions,...await La(a.commodities,{dryWeight:Number(a.dry_weight),dryWeightUom:a.dry_weight_uom}),"Total Adjustments USD":a.adjustments?a.adjustments.total_adjustments:"0.00","Parcel Value USD":a.invoice_value,"Parcel Payable Value(Below Line) USD":a.payable_amount,"Payments USD":a.amount_paid,"Due Total":a.balance_in_sellers_favor,metadata:{invoiceTypeRanking:Ja[a.invoice_type]}}}if(void 0===e.parcelData)throw new qa(`Something went wrong, no parcel or invoice data for Invoice of parcel id ${e.parcelId.substring(0,5)} and invoice type ${e.invoiceType}`);const r=e.parcelId;if(!r)return void console.error(`[generateInvoice] A parcel id is not defined for invoice type ${e.invoiceType}`);const i=e.invoiceType,xa=e.parcelData,Wa=e.contractName;console.log(`[generateInvoice][parcel=${xa[z]}::invoice type=${i}] parcel data=${JSON.stringify(xa)}`),function(e){if(!e)throw new Error("Parcel data not found, please ensure the selected parcel still exists");if(!e[z])throw new Error("One of the parcels does not have a shipment code, please ensure that all parcels have a shipment code");if(!e[J])throw new Error(`The parcel ${e[z]} does not have a contract, please ensure that the contract field for the parcel is not empty`);if(!e[q])throw new Error(`The parcel ${e[z]} does not havea counterparty, please ensure that the counterparty field for the parcel is not empty`);if(!e[x])throw new qa(`The parcel ${e[z]} does not have assay results`);if(!e[L])throw new qa(`The parcel ${e[z]} does not have weight results`);if(!e[Y])throw new Error(`The parcel ${e[z]} does not havean origin port`);if(!e[X])throw new Error(`The parcel ${e[z]} does not havea destination port`)}(xa);const za=xa[x],Za=xa[L],et=xa[J];if(!et)throw new Error(`Contract not found for parcel ${xa[z]}`);const at=await l.get(`/items/${ye}`,{params:{filter:{[ve]:{_eq:et},[_e]:{_eq:i}},fields:[_e,we,ge,$e,De,Pe,Ce,Se]}});if(at.data.data&&0===at.data.data.length)throw new Error(`No invoice type found for the contract ${Wa}`);const tt=at.data.data.find((e=>e[_e]===i));if(!tt)throw new Error(`Cannot find payment information for ${i} in the contract ${Wa}, please ensure that data for it has been entered and saved`);const ot=await l.get(`/items/${le}?filter[${j}]=${Za}&sort[]=${V}`,{params:{fields:[F,se,ce,B,de,ue,me]}});console.log(`[generateInvoice][parcel=${xa[z]}::invoice type=${i}] weight lots data=${JSON.stringify(ot.data.data)}`),function(e){if(!e||0===e.length)throw new qa("No weight lots found for the selected parcel")}(ot.data.data);const nt=function(e){console.log("[evaluateWeights]");const a={};for(const t of e)a[t.method]||(console.log(`adding method ${t.method} to weightData object`),a[t.method]=[]),console.log(`adding lot ${t.id} to weightData.${t.method} array`),a[t.method.toString()].push(t);const t=[];for(const e of Object.keys(a)){if(!a[e]){console.log(`method=${e} does not exist in weightData object`);continue}console.log(`adding lots and other values to weights for method=${e}`);const o=c(a[e]);o&&t.push(o)}return t}(ot.data.data);let rt;if(rt||(rt=nt.find((e=>"Outturn"===e.method))),rt||(rt=nt.find((e=>"Inturn Final"===e.method))),rt||(rt=nt.find((e=>"Inturn"===e.method))),rt||(rt=nt.find((e=>"Estimated"===e.method))),rt||(rt=nt.find((e=>"Planned"===e.method))),!rt)throw new Error(`No weight lots with valid method found for parcel ${xa[z]}`);if(void 0===rt.dry_weight||null===rt.dry_weight||void 0===rt.wet_weight||null===rt.wet_weight||void 0===rt.moisture||null===rt.moisture||void 0===rt.dry_weight_uom||null===rt.dry_weight_uom||void 0===rt.wet_weight_uom||null===rt.wet_weight_uom||void 0===rt.method||null===rt.method)throw new Error(`One of the fields for the latest weight lots data is undefined for parcel ${xa[z]}`);const it=await l.get(`/items/${fa}?filter[${pa}]=${rt.dry_weight_uom}`,{params:{fields:[va]}}),lt=await l.get(`/items/${fa}?filter[${ya}]=${rt.wet_weight_uom}`,{params:{fields:[_a]}});if(!it.data.data||!it.data.data[0]||!it.data.data[0][va])throw new Error(`Dry weight uom not found for symbol ${rt.dry_weight_uom} for parcel ${xa[z]}`);if(!lt.data.data||!lt.data.data[0]||!lt.data.data[0][_a])throw new Error(`Wet weight uom not found for symbol ${rt.wet_weight_uom} for parcel ${xa[z]}`);const st=it.data.data[0][va],ct=(st.indexOf("dry"),lt.data.data[0][_a]),dt=(ct.indexOf("wet"),await l.get(`/items/${ae}?filter[${j}]=${za}&sort[]=${V}`,{params:{fields:[F,te,B,oe,ne,ie,re]}}));console.log(`[generateInvoice][parcel=${xa[z]}::invoice type=${i}] assay lots data=${JSON.stringify(dt.data.data)}`),function(e){if(!e||0===e.length)throw new qa("No assay lots found for the selected parcel")}(dt.data.data);const ut=function(e){var a;console.log("[evaluateAnalyticalAssay]");const t={};for(const a of e)t[a.method]||(t[a.method]={}),t[a.method][a.commodity]||(t[a.method][a.commodity]=[]),null!==a.lot_number?(1===t[a.method][a.commodity].length&&null===t[a.method][a.commodity][0].lot_number&&(t[a.method][a.commodity]=[]),t[a.method][a.commodity].push(a)):null===a.lot_number&&0===t[a.method][a.commodity].length&&t[a.method][a.commodity].push(a);console.log(`[evaluateAnalyticalAssay] group: ${JSON.stringify(t)}}`);const o={};for(const e in t){console.log(`[evaluateAnalyticalAssay] methodKey: ${e}, group[methodKey]: ${JSON.stringify(t[e])}`);for(const n in t[e]){console.log(`[evaluateAnalyticalAssay] commodityKey: ${n}, group[methodKey][commodityKey]: ${JSON.stringify(t[e][n])}`),o[e]=null!=(a=o[e])?a:{},o[e][n]={};const r=t[e][n].reduce(((e,a)=>e+a[oe]),0);console.log(`[evaluateAnalyticalAssay] totalDryWeight: ${r} from ${JSON.stringify(t[e][n])}`),o[e][n].analytical_assay=t[e][n].reduce(((e,a)=>e+a[ne]*a[oe]),0)/(0!==r?r:1),console.log(`[evaluateAnalyticalAssay] analytical assay: ${o[e][n].analytical_assay}`),t[e][n].length>0&&(o[e][n][re]=t[e][n][0][re])}}return console.log(`[evaluateAnalyticalAssay] analyticalAssay: ${JSON.stringify(o)}`),o}(dt.data.data);let mt;if(mt||(mt=ut.Outturn),mt||(mt=ut["Inturn Final"]),mt||(mt=ut.Inturn),mt||(mt=ut.Estimated),mt||(mt=ut.Planned),!mt)throw new Error(`No assay lot data with a valid method found for parcel ${xa[z]}`);console.log(`[generateInvoice][parcel=${xa[z]}::invoice type=${i}] weight lots for invoice evaluation=${JSON.stringify(rt)}`),console.log(`[generateInvoice][parcel=${xa[z]}::invoice type=${i}] assay lots for invoice evaluation=${JSON.stringify(mt)}`);const ft=await l.get(`/items/${fe}/${et}`,{params:{fields:[he]}});!function(e){if(!e)throw new Error("Contract data not found, please ensure the selected contract still exists");if(!e[he])throw new Error("The selected contract does not have a set currency, please ensure that the currency field for the contract is not empty")}(ft.data.data);const ht=await l.get(`/items/${ua}/${ft.data.data.contract_currency}`,{params:{fields:[ma]}});!function(e){if(!e)throw new Error("Currency data not found, please ensure the selected currency still exists");if(!e[ma])throw new Error("The selected currency in the contract is not valid")}(ht.data.data);const pt=ht.data.data.code,yt=await l.get(`/items/${Ae}?filter[${Ne}]=${et}`,{params:{fields:["id",Oe,Te,Ue,ke,Fe,je,Ve,Be,Ie,Me]}});!function(e){if(!e||0===e.length)throw new Error("No commodity data found in selected contract for parcel");if(!e.every((e=>e[Oe])))throw new Error("The selected contract has an undefined commodity, please ensure that the 'Commodity' field for all commodites in the contract is not empty");if(!e.every((e=>e[Ie])))throw new Error("The selected contract has an undefined base price Uom for commodity, please ensure that the 'Base Price Uom' field for all commodites in the contract is not empty")}(yt.data.data),console.log(`[generateInvoice][parcel=${xa[z]}::invoice type=${i}] contract commodity data=${JSON.stringify(yt.data.data)}`);const vt=[],_t=[];let wt="";for(const{id:e,commodity:r,primary_commodity:c,price_method:h,quotational_periods:j,price_per_uom:V,penalty_per_uom:B,treatment_charge_per_uom:R}of yt.data.data){const J=await l.get(`/items/${sa}/${r}`,{params:{fields:[ca,da,F]}});if(Ha(J.data.data,r),!mt[J.data.data.code]){console.log(`[generateInvoice][parcel=${xa[z]}::invoice type=${i}::comm=${J.data.data[ca]}] no analytical assay for commodity ${J.data.data.code} found, skipping...`);continue}if(c&&(wt=J.data.data[ca]),null!==j){const r=j;console.log(`[generateInvoice][parcel=${xa[z]}::invoice type=${i}::comm=${J.data.data[ca]}] qp=${JSON.stringify(r)}`);const c=Array.isArray(r)?r.find((e=>e.default)):null;if(!c)throw new Error(`No default quotational period found for commodity ${J.data.data.code}`);const P=r.filter((e=>!e.default)).map((e=>`${e.qp_period} ${e.qp_code}`)),B=[`${c.qp_period} ${c.qp_code}`,...P].join(", ");console.log(`[generateInvoice][parcel=${xa[z]}::invoice type=${i}::comm=${J.data.data[ca]}] evaluate payable assay for ${J.data.data.code} with an analytical assay=${null==(a=mt[J.data.data.code])?void 0:a.analytical_assay}`);const q=await l.get(`/items/${Re}?filter[${He}]=${e}`,{params:{fields:[Ke,Qe,Ye,Xe,ze,Ze,ea,Je,qe,xe,Le,We,Ge]}}),{payableAssay:x,expression:L}=await $(null==(t=mt[J.data.data.code])?void 0:t.analytical_assay,null==(o=mt[J.data.data.code])?void 0:o.assay_uom,q.data.data,J.data.data[ca]);let Q,Y,X="";if("Final"!==i){const e={invoice_type:i,days:tt[Pe],day_type:tt[Ce],ref_day:tt[Se]};if(!e)throw new Error(`No provisional pricing found for invoice type ${i} for parcel ${xa[z]}`);let a;switch(e.ref_day){case"Arrival Date":a=null!=(n=xa[W])?n:xa[G],X="Actual Arrival Date from the Parcel form";break;case"B/L Date":a=null!=(s=xa[H])?s:xa[K],X="B/L Date from the Parcel form";break;case"Invoice Date":a=null!=(d=xa[H])?d:xa[K],X="B/L Date (or Estimated Date) as Invoice Date";break;case"Estimated Shipment Date":a=xa[K],X="Estimated Shipment Date from the Parcel form";break;default:throw new Error(`Invalid reference day for invoice pricing: ${e.ref_day}; please contact Navarch for support`)}if(null==a)throw new Error(`Reference day for invoice pricing ${X} is empty`);Y=new Date(a);const t=parseInt(e.days),o=e.day_type;switch(o){case"Business Day(s)":Q=A(Y,t,!0);break;case"Calendar Day(s)":Q=new Date(Y.valueOf()),Q.setDate(Q.getDate()-t);break;default:throw new Error(`Invalid day type ${o} from contract ${Wa} for invoice type ${i}`)}}else{let e;switch(c.qp_code){case"MAMA":e=new Date(null!=(u=xa[W])?u:xa[G]),X="Actual Arrival Date";break;case"MOSS":case"MOS":case"MOAS":e=new Date(null!=(m=xa[H])?m:xa[K]),X="Estimated Shipment Date";break;default:throw new Error(`Unsupported QP code ${c.qp_code} in the contract ${Wa}, please ensure all commodity QP codes are MAMA, MOS, MOSS, or MOAS`)}if(null==e)throw new Error(`Invalid reference day for ${X} from contract ${Wa} for commodity ${J.data.data[ca]}`);Q=O(e,c.qp_period),Y=T(e,c.qp_period)}console.log(`[generateInvoice][parcel=${xa[z]}::invoice type=${i}::comm=${J.data.data[ca]}] provisional pricing date range: ${Q.toString()} - ${Y.toString()}`);const Z=await Ga(J.data.data.code,J.data.data[F],h,Q,Y);let ae;const te=await l.get(`/items/${aa}?filter[${He}]=${e}`,{params:{fields:[Qe,Ye,Xe,ze,ta,oa,na,Ze]}});void 0!==te.data.data&&null!==te.data.data&&te.data.data.length>0&&(ae=await E(Z,null==(p=mt[J.data.data.code])||p.assay_uom,te.data.data,J.data.data[ca]));const oe=await l.get(`/items/${fa}/${V}`,{params:{fields:[ha]}});Ka(oe.data.data,J.data.data[ca]);const ne=oe.data.data[ha];let re;if(ae){if(!R)throw new Error(`Treatment Charge Rate UOM is not defined for commodity ${J.data.data[ca]}`);const e=await l.get(`/items/${fa}/${R}`,{params:{fields:[ha]}});Qa(e.data.data,J.data.data[ca]),re=e.data.data[ha]}const ie=await k(ne,rt.dry_weight_uom,null==(y=mt[J.data.data.code])?void 0:y.assay_uom);console.log(`[generateInvoice][parcel=${xa[z]}::invoice type=${i}::comm=${J.data.data[ca]}] payableMetalConversion for commodity ${J.data.data.name}: ${JSON.stringify(ie)}`),ie.initialConversion=1===(null==(v=ie.initialConversion)?void 0:v.conversionFactor)?void 0:ie.initialConversion,ie.finalConversion=1===(null==(_=ie.finalConversion)?void 0:_.conversionFactor)?void 0:ie.finalConversion,vt.push({commodity:J.data.data.name,analytical_assay:f(null==(w=mt[J.data.data.code])?void 0:w.analytical_assay,4),deduction_expression:L,payable_assay:f(x,4),assay_uom:null==(g=mt[J.data.data.code])?void 0:g.assay_uom,payable_metal:f(rt.dry_weight*(null!=(b=null==(D=ie.initialConversion)?void 0:D.conversionFactor)?b:1)*(null!=x?x:1)*(null!=(N=null==(S=ie.finalConversion)?void 0:S.conversionFactor)?N:1)*("%"!==(null==(U=mt[J.data.data.code])?void 0:U.assay_uom)?1:.01),4),payable_metal_expression:`${f(rt.dry_weight,4)}${rt.dry_weight_uom}${ie.initialConversion?` * ${f(ie.initialConversion.conversionFactor,4)}${ie.initialConversion.conversionUom}`:""} * ${f(null!=x?x:1,4)}${"%"!==(null==(I=mt[J.data.data.code])?void 0:I.assay_uom)?`${null==(M=mt[J.data.data.code])?void 0:M.assay_uom}`:" / 100"}${ie.finalConversion?` * ${f(ie.finalConversion.conversionFactor,4)}${ie.finalConversion.conversionUom}`:""}`,payable_metal_uom:ne,qp:B,qp_start_date:C(Q),qp_end_date:C(Y),price_method:h,price_rate:f(Z,4),price_per_uom:ne,price:f(rt.dry_weight*(null!=(pe=null==(ee=ie.initialConversion)?void 0:ee.conversionFactor)?pe:1)*(null!=x?x:1)*(null!=(Ee=null==(be=ie.finalConversion)?void 0:be.conversionFactor)?Ee:1)*("%"!==(null==(wa=mt[J.data.data.code])?void 0:wa.assay_uom)?1:.01)*Z),treatment_charge:ae?{rate:f(ae.baseTreatmentCharge,4),discount:f((null!=(ga=ae.baseTreatmentCharge)?ga:0)-(null!=($a=ae.finalValue)?$a:0),4),final_rate:f(ae.finalValue,4),per_uom:re,final_amount:f(rt.dry_weight*(null!=(Da=ae.finalValue)?Da:1))}:void 0,final_total:f(rt.dry_weight*(null!=(Na=null==(ba=ie.initialConversion)?void 0:ba.conversionFactor)?Na:1)*(null!=x?x:1)*(null!=(Ta=null==(Oa=ie.finalConversion)?void 0:Oa.conversionFactor)?Ta:1)*("%"!==(null==(ka=mt[J.data.data.code])?void 0:ka.assay_uom)?1:.01)*Z-(ae?1:0)*(rt.dry_weight*(null!=(Fa=null==ae?void 0:ae.finalValue)?Fa:1)))})}const q=await l.get(`/items/${ra}?filter[${He}]=${e}`,{params:{fields:[Qe,Ye,Xe,ze,ia,la,Ze]}});if(q.data.data.length>0){if(null===B)throw new Error(`Please fill in the field for Penalty Per UOM in contract ${Wa} for commodity ${J.data.data[ca]}`);const e=await l.get(`/items/${fa}/${B}`,{params:{fields:[ha]}});Ya(e.data.data,J.data.data[ca]);const a=e.data.data[ha],{penalty:t,expression:o,bracket:n}=await P(null==(ja=mt[J.data.data.code])?void 0:ja.analytical_assay,q.data.data,pt,a,J.data.data[ca]);console.log(`[generateInvoice][parcel=${xa[z]}::invoice type=${i}::comm=${J.data.data[ca]}] evaluated penalty with an analytical assay=${null==(Va=mt[J.data.data.code])?void 0:Va.analytical_assay}, penaltyRate=${null==n?void 0:n.rate}, finalPenaltyRate=${t}, expression='${o}'`),_t.push({commodity:J.data.data.name,analytical_assay:f(null==(Ba=mt[J.data.data.code])?void 0:Ba.analytical_assay,4),deduction_expression:o,assay_uom:null==(Ra=mt[J.data.data.code])?void 0:Ra.assay_uom,penalty_rate:f(null==n?void 0:n.rate,4),penalty_per_uom:a,final_penalty_rate:f(t,4),final_penalty:f((null!=t?t:1)*rt.dry_weight)})}}console.log(`[generateInvoice][parcel=${xa[z]}::invoice type=${i}] evaluated commodities=${JSON.stringify(vt)}`),console.log(`[generateInvoice][parcel=${xa[z]}::invoice type=${i}] evaluated penalties${JSON.stringify(_t)}`);const gt=vt.reduce(((e,a)=>e+h(a.price)),0),$t=vt.reduce(((e,a)=>{var t;return e+h(null==(t=a.treatment_charge)?void 0:t.final_amount)}),0),Dt=_t.reduce(((e,a)=>e+h(a.final_penalty)),0);console.log(`[generateInvoice][parcel=${xa[z]}::invoice type=${i}] TOTAL_REVENUE=${gt}, TOTAL_TREATMENT_CHARGE=${$t}, TOTAL_PENALTIES=${Dt}`);let bt,Et=0;const Pt=!!xa[Z];Pt&&(Et=xa[Z].reduce(((e,a)=>e+a.amount),0),bt={adjustments:xa[Z].map((e=>({description:e.description,amount:f(e.amount)}))),total_adjustments:f(Et)});const Ct=tt[we],St=gt-$t-Dt+Et,At=null!=Ct?St*Ct/100:void 0,Nt=await l.get(`/items/${Ea}/${xa[q]}`,{params:{fields:[Pa]}});Xa(Nt.data.data);const Ot=xa[Q];let Tt;Ot&&(Tt=await l.get(`/items/${Sa}/${Ot}`,{params:{fields:[Aa]}}),function(e){if(console.log("[validateVessel]"),!e)throw new Error("Vessel for parcel not found");if(!e[Aa])throw new Error("No name defined for vessel of the selected parcel")}(Tt.data.data));let Ut=(await l.get(`/items/${Ua}?filter[${Ia}]=${r}`,{params:{fields:["id",Ma]}})).data.data.reduce(((e,a)=>e+(a[Ma]?1:0)),0)+1,It=r;const Mt=Ut.toString().padStart(2,"0"),kt=(xa[z],It.toString().padStart(2,"0")),Ft={Counterparty:Nt.data.data[Pa],Vessel:Tt?Tt.data.data[Aa]:"Vessel TBA","Shipment Date":xa[H]?C(new Date(xa[H])):xa[K]?C(new Date(xa[K])):"N/A","Arrival Date":xa[W]?C(new Date(xa[W])):xa[G]?C(new Date(xa[G])):"N/A",Status:xa[H]?"Unfinalised":"Planned",Revision:"Valuation",Invoice:`${i}:Valuation`,Parcel:`${xa[z]} (#${kt})`,"Invoice Due Date":C(e.dueDate),"Dry Weight":`${f(rt.dry_weight,4)} ${rt.dry_weight_uom}`,"Total Revenues USD":f(gt),"Total Penalties USD":f(Dt+$t),...await La(vt,{dryWeight:rt.dry_weight,dryWeightUom:rt.dry_weight_uom}),"Total Adjustments USD":Pt?bt.total_adjustments:"0.00","Parcel Value USD":f(St),"Parcel Payable Value(Below Line) USD":f(At),"Payments USD":"-","Due Total":"-",metadata:{invoiceTypeRanking:Ja[i]}};return console.log(`[generateInvoice][parcel=${xa[z]}::invoice type=${i}] generated forecast invoice=${JSON.stringify(Ft)}`),Ft}catch(a){if(a instanceof qa)return void console.error(`[generateInvoice][parcel=${e.parcelId}::invoice type=${e.invoiceType}]Non-fatal error: ${a.message}`);throw a}}(e))))),n=function(e){const a=e.reduce(((e,a)=>(e[a.Parcel]||(e[a.Parcel]=[]),e[a.Parcel].push(a),e)),{});Object.keys(a).forEach((e=>{a[e].sort(((e,a)=>e.metadata.invoiceTypeRanking<a.metadata.invoiceTypeRanking?-1:e.metadata.invoiceTypeRanking>a.metadata.invoiceTypeRanking?1:0))})),console.log(`[evaluateDuePaymentsForCashflow] cashflowByParcel=${JSON.stringify(a)}`),Object.keys(a).forEach((e=>{a[e].forEach(((t,o)=>{if(!t["Parcel Payable Value(Below Line) USD"]||"-"===t["Parcel Payable Value(Below Line) USD"])throw new Error(`Parcel ${e} for invoice ${t.Invoice} does not have a Parcel Payable Value(Below Line) USD`);const n=h(t["Parcel Payable Value(Below Line) USD"]);if(isNaN(n))throw new Error(`Parcel ${e} for invoice ${t.Invoice} has an invalid Parcel Payable Value(Below Line) USD of ${t["Parcel Payable Value(Below Line) USD"]}`);if(0===o){t["Payments USD"]=t["Payments USD"]&&"-"!==t["Payments USD"]?t["Payments USD"]:"0.00";const e=h(t["Payments USD"]);t["Due Total"]=f(n-e)}else{if(!a[e][o-1]["Parcel Payable Value(Below Line) USD"]||"-"===a[e][o-1]["Parcel Payable Value(Below Line) USD"])throw new Error(`Parcel ${e} for invoice ${t.Invoice} does not have a Parcel Payable Value(Below Line) USD for the previous invoice`);const r=h(a[e][o-1]["Parcel Payable Value(Below Line) USD"]);if(isNaN(r))throw new Error(`Parcel ${e} for invoice ${t.Invoice} has an invalid Parcel Payable Value(Below Line) USD of ${a[e][o-1]["Parcel Payable Value(Below Line) USD"]} for the previous invoice`);t["Due Total"]=f(n-r),t["Payments USD"]&&"-"!==t["Payments USD"]||(t["Payments USD"]=a[e][o-1]["Payments USD"])}}))})),console.log(`[evaluateDuePaymentsForCashflow] cashflowByParcel=${JSON.stringify(a)}`);const t=Object.keys(a).flatMap((e=>a[e]));return console.log(`[evaluateDuePaymentsForCashflow] cashflowAsJsonWithDueTotal=${JSON.stringify(t)}`),t}(o.filter((e=>!!e))),d=function(e){const a=[...new Set(e.flatMap((e=>Object.keys(e))))],t=e.map((e=>a.map((a=>e[a]||"")).join(",")));return[a.join(","),...t].join("\n")}(n);t("input",n),console.log(`[generateCashflow] cashflow response: ${JSON.stringify(n)}`),console.log(`[generateCashflow] cashflow as csv: ${d}`),i.value=!1,xa(d)}catch(e){r.value=e.message}finally{i.value=!1}},viewDoc:xa,failureReason:r};function xa(e){const a=null!=e?e:s.value.input;console.log(`[viewDoc] csvData=${a}`),function(e){const a=new Blob([e],{type:"text/csv"}),t=URL.createObjectURL(a),o=document.createElement("a");o.href=t,o.download="data.csv",document.body.appendChild(o),o.click(),document.body.removeChild(o)}(a)}async function La(e,a){console.log(`[mapOutCommoditiesForCashflow] commodities=${JSON.stringify(e)};;containedMetalParam=${JSON.stringify(a)}`);return(await Promise.all(e.map((async e=>{var t,o,n,r,i,l,s;const c=await k(e.payable_metal_uom,a.dryWeightUom,e.assay_uom);console.log(`[mapOutCommoditiesForCashflow] commodity=${e.commodity}, containedMetalUnitConversion=${JSON.stringify(c)}`);const d=(null!=(o=null==(t=c.initialConversion)?void 0:t.conversionFactor)?o:1)*(null!=(r=null==(n=c.finalConversion)?void 0:n.conversionFactor)?r:1),u=("%"===e.assay_uom?.01:1)*e.analytical_assay;return{[`${e.commodity} Payable Metal (${e.payable_metal_uom})`]:e.payable_metal,[`${e.commodity} Contained Metal (${e.payable_metal_uom})`]:f(a.dryWeight*u*d),[`${e.commodity} Revenue (USD)`]:e.price,[`${e.commodity} QP Month`]:Wa(new Date(e.qp_start_date)),[`${e.commodity} Price (USD/${e.price_per_uom})`]:e.price_rate,[`${e.commodity} TC (USD)`]:null==(i=e.treatment_charge)?void 0:i.final_amount,[`${e.commodity} TC (USD/${null==(l=e.treatment_charge)?void 0:l.per_uom})`]:null==(s=e.treatment_charge)?void 0:s.final_rate}})))).reduce(((e,a)=>({...e,...a})),{})}function Wa(e){return`${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][e.getMonth()]} ${e.getFullYear()}`}async function Ga(e,a,t,o,n,r=1){var i;if(console.log(`[getCommodityAvgPrice] commodity=${e}, commodityId=${a}, source=${t}, startDate=${o}, endDate=${n}, currency=${r}`),m(e))throw new Error(`Commodity ${e} is not defined for price calcualtion`);if(m(t))throw new Error(`Price method for commodity ${e} is not defined for price calcualtion`);if(m(o))throw new Error(`Start date is not defined for price calcualtion with Price Method #${t} has not been properly defined, please ensure that contract QP for commodity ${e} is properly defined`);if(m(n))throw new Error(`End date is not defined for price calcualtion with Price Method #${t} has not been properly defined, please ensure that contract QP for commodity ${e} is properly defined`);const c=await l.get(`/items/navarch_commodity_price?filter[_and][0][price_method][_eq]=${t}&filter[_and][0][currency][_eq]=${r}&filter[_and][1][date][_between][0]=${S(o)}&filter[_and][1][date][_between][1]=${S(n)}&sort=date`,{params:{fields:[Na,Oa,Ta,"price_method"]}});if((null==(i=c.data)?void 0:i.data)&&Array.isArray(c.data.data)&&c.data.data.length>0){const a=c.data.data[c.data.data.length-1];if(new Date(a[Ta])>=n){return c.data.data.reduce(((a,o)=>{if(!o[Oa]&&!o[Na])throw new Error(`Commodity ${e} for Price Method #${t} on the date of ${o[Ta]} does not have a price, please contact Navarch for assistance`);let n=Number(o[Oa]);if(isNaN(n)&&(n=Number(o[Na])),isNaN(n))throw new Error(`The commodity price for ${e} of Price Method #${t} for the date of ${o[Ta]} is not a valid number, please contact Navarch for assistance`);return a+n}),0)/c.data.data.length}}if(!s.value[F])throw new Error("Please save the Cashflow form first before generating the cashflow doc");const d=await l.get("/items/navarch_forecast_price",{params:{filter:{[ja]:{_eq:a},cashflow_forecast_id:{_eq:s.value[F]}},fields:[Va,ja,Ba,Ra]}});console.log(`[getCommodityAvgPrice] forecast prices=${JSON.stringify(d.data.data)}`),function(e,a){if(!e||!Array.isArray(e)||0===e.length)throw new Error(`No forecast price found for ${a}, please ensure prices have been provided`)}(d.data.data,e);const u=d.data.data.find((e=>{const a=new Date(e[Ba]),t=new Date(e[Ra]);return a<=o&&t>=n}));if(!u)throw new Error(`No single forecast price found for commodity ${e} between ${S(o)} and ${S(n)}, please ensure there is only one price value for this range`);return u[Va]}function Ha(e,a){var t,o,n;if(console.log("[validateCommodityData]"),!e)throw new Error("commodity data response is null");if(!e[ca])throw new Error(`Commodity name for commodity ${null!=(t=e[da])?t:a} is undefined, please contact Navarch for assistance`);if(!e[da])throw new Error(`Commodity code for commodity ${null!=(o=e[ca])?o:a} is not defined, please contact Navarch for assistance`);if(!e[F])throw new Error(`Commodity ID for commodity ${null!=(n=e[ca])?n:a} is not defined, please contact Navarch for assistance`)}function Ka(e,a){if(!e)throw new Error(`Price per UOM for commodity ${a} is not a valid`);if(!e[ha])throw new Error(`Price per UOM for commodity ${a} does not have a valid unit symbol, please contact Navarch for assistance`)}function Qa(e,a){if(!e)throw new Error(`Treatment charge per UOM for commodity ${a} is not a valid`);if(!e[ha])throw new Error(`Treatment charge per UOM for commodity ${a} does not have a valid unit symbol, please contact Navarch for assistance`)}function Ya(e,a){if(!e)throw new Error(`Penalty per UOM for commodity ${a} is not a valid`);if(!e[ha])throw new Error(`Penalty per UOM for commodity ${a} does not have a valid unit symbol, please contact Navarch for assistance`)}function Xa(e){if(console.log("[validateCounterparty]"),!e)throw new Error("Counterparty for parcel not found");if(!e[Pa])throw new Error("No codename defined for counterparty of the selected parcel")}}});const g={key:0},$={key:1};w.render=function(e,a,t,o,n,p){const y=r("v-button"),v=r("v-notice");return i(),l(s,null,[c(' <input :value="value" @input="handleChange($event.target.value)" /> '),c(" create a button only interface for Directus"),e.value?(i(),l("div",$,[d(y,{class:"margin-top-16px",onClick:a[1]||(a[1]=()=>e.viewDoc())},{default:u((()=>[m("View Cashflow ")])),_:1})])):(i(),l("div",g,[d(y,{class:"margin-top-16px",onClick:a[0]||(a[0]=()=>e.generateCashflow()),loading:e.isGeneraingDoc},{default:u((()=>[m("Generate Cashflow")])),_:1},8,["loading"]),e.failureReason?(i(),f(v,{key:0},{default:u((()=>[m(h(e.failureReason),1)])),_:1})):c("v-if",!0)]))],2112)},w.__file="src/interface.vue";var D=a({id:"navarch-docgen-cashflow",name:"Navarch Cashflow Generator Button",icon:"receipt_long",description:"This is my custom interface for Navarch's Cashflow Doc!",component:w,options:null,types:["json"],group:"standard"});export{D as default};
