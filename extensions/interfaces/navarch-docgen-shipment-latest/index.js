import{useApi as t,defineInterface as e}from"@directus/extensions-sdk";import{defineComponent as a,ref as o,inject as n,resolveComponent as i,openBlock as s,createElementBlock as r,Fragment as l,createCommentVNode as u,createVNode as d,withCtx as c,createTextVNode as m,createBlock as g,toDisplayString as h}from"vue";var f=a({props:{value:{type:Object,default:null}},emits:["input"],setup(e,{emit:a}){const i=o(""),s=o(!1),r=t(),l=o(""),u=o(""),d={},c={},m=n("values",o({})),g="id",h="method",f="foreign_key",y="counterparty",v="vessel",w="destination",_="contract",p="bl_date",$="commodity",b="dry_weight",A="final_assay",C="assay_uom",N="lot_number",E="commodity",D="price_per_uom",F="code",P="codename",S="port_name",U="name",V="navarch_unit",M="unit",O="symbol",J="dry_symbol",k="conversionToGram",I="navarch_assay_unit",W="unit",j="conversion_to_ppb",R="composition";return{isGeneraingDoc:s,failureReason:i,viewPdf:G,generatePdf:async function(){var t,e;i.value="",s.value=!0;try{const o=m.value.start_date,n=m.value.end_date,d=m.value.filter_date;if(!o)return i.value="Start date not selected",void(s.value=!1);if(!n)return i.value="End date not selected",void(s.value=!1);if(!d)return i.value="Filter date not selected",void(s.value=!1);let J="";switch(d){case"Arrival Date":J="actual_arrival_date";break;case"Invoice Date":J="invoice_date";break;case"B/L Date":J=p;break;case"Parcel Finalisation Date":J="parcel_finalisation_date";break;default:return i.value="Invalid filter date",void(s.value=!1)}const k=[],I=await r.get(`/items/navarch_parcel?filter[_and][0][_and][0][${J}][_between][0]=${o}&filter[_and][0][_and][0][${J}][_between][1]=${n}`,{params:{fields:["shipment_code",y,"physical_status","financial_status",p,v,w,"assay_results","weight_result",_]}});if(200!==I.status)return console.error(`[generatePdf] parcelResponce status: ${I.status}`),i.value="Failed to fetch parcels",void(s.value=!1);if(0===I.data.data.length)return i.value=`No parcels found within the selected date range of ${o} to ${n} for the filter date ${d}`,void(s.value=!1);for(const t of I.data.data){if(null===t.contract)return i.value=`Contract not selected for parcel with shipment code ${t.shipment_code}`,void(s.value=!1);const e=t.contract,a=await r.get(`/items/navarch_commodity_in_contract?filter[${_}]=${e}&filter[payable_commodity]=true`,{params:{fields:[E,D]}});if(200!==a.status)return console.error(`[generatePdf] commodityInContractResponse status: ${a.status}`),i.value="Failed to fetch payable commodities",void(s.value=!1);if(0===a.data.data.length){console.log(`[generatePdf] No payable commodities found for parcel with shipment code ${t.shipment_code}`);continue}const o=a.data.data.map((t=>t[E])),n=await r.get(`/items/navarch_commodity?filter[id][_in]=${o.join(",")}`,{params:{fields:[g,"name",F]}});if(200!==n.status)return console.error(`[generatePdf] commodityResponse status: ${n.status}`),i.value="Failed to fetch commodities",void(s.value=!1);if(0===n.data.data.length)throw new Error(`[generatePdf] No commodities found for parcel with shipment code ${t.shipment_code}`);if(null===t.assay_results)continue;const d=n.data.data.map((t=>t.code)),m=q((await r.get(`/items/navarch_assay_lot?filter[${f}]=${t.assay_results}&filter[${$}][_in]=${d}&sort[]=${N}`,{params:{fields:[g,h,$,b,A,N,C]}})).data.data);let J,I;if(J||(J=m.Outturn,I="Outturn"),J||(J=m["Inturn Final"],I="Inturn Final"),J||(J=m.Inturn,I="Inturn"),J||(J=m.Estimated,I="Estimated"),J||(J=m.Planned,I="Planned"),!J)throw new Error("No assay lot data found for all assay methods. Please ensure assay lot data has been entered in the selected parcel.");if(console.log("assayByLatestMethod=",JSON.stringify(J)),null===t.weight_result)continue;const W=K((await r.get(`/items/navarch_weight_lot?filter[${f}]=${t.weight_result}&sort[]=lot_number`,{params:{fields:[g,"dry_weight","wet_weight",h,"moisture","wet_weight_uom","dry_weight_uom"]}})).data.data);let j;if(j||(j=W.find((t=>"Outturn"===t.method))),j||(j=W.find((t=>"Inturn Final"===t.method))),j||(j=W.find((t=>"Inturn"===t.method))),j||(j=W.find((t=>"Estimated"===t.method))),j||(j=W.find((t=>"Planned"===t.method))),!j)throw new Error("No weight lot data found for all weight methods. Please ensure weight lot data has been entered in the selected parcel.");if(void 0===j.dry_weight||null===j.dry_weight||void 0===j.wet_weight||null===j.wet_weight||void 0===j.moisture||null===j.moisture||void 0===j.dry_weight_uom||null===j.dry_weight_uom||void 0===j.wet_weight_uom||null===j.wet_weight_uom||void 0===j.method||null===j.method)throw new Error("One of the fields for weight lots is undefined");""===l.value&&(l.value=j.dry_weight_uom),""===u.value&&(u.value=j.wet_weight_uom);const R=await r.get(`/items/navarch_counterparty/${t[y]}`,{params:{fields:[P]}}),G=await r.get(`/items/navarch_world_port/${t[w]}`,{params:{fields:[S]}}),T=t[v];let B;T&&(B=await r.get(`/items/navarch_vessel/${T}`,{params:{fields:[U]}}));const z=n.data.data.reduce(((t,e)=>(t[e.code]=e.name,t)),{});console.log("commodityCodeToNameMap=",JSON.stringify(z));const Y=a.data.data.map((t=>t[D])),Q=(await r.get(`/items/${V}?filter[${M}][_in]=${Y.join(",")}`,{params:{fields:[M,O]}})).data.data.reduce(((t,e)=>(t[e[M]]=e[O],t)),{});a.data.data.forEach((t=>{const e=n.data.data.find((e=>e[g]===t[E]))[F];if(!c[e]){const a=Q[t[D]];c[e]=a}})),console.log("commodityCodeToMetalUomMap=",JSON.stringify(c));const X=await H(j.dry_weight_uom,l.value),Z=j.wet_weight*X,tt=j.dry_weight*X,et={name:t.shipment_code,counterparty:R.data.data[P],port:G.data.data[S],vessel:B?B.data.data[U]:"N/A",phy_status:t.physical_status,fin_status:t.financial_status,shipment_date:x(new Date(t[p])),weight_source:j.method,wet_weight:Z,moisture:j.moisture,dry_weight:tt,assay_source:I,assays:await L(J,z,c,tt)};k.push(et)}const W={start_date:T(new Date(o)),end_date:T(new Date(n)),filter_date:d,parcels:k,wet_weight_uom:null==(t=u.value)?void 0:t.toUpperCase(),dry_weight_uom:null==(e=l.value)?void 0:e.toUpperCase()},j=await r.post("/generate/shipment-latest",W);if(200!==j.status)return console.log(`[generatePdf] response status: ${j.status}`),i.value=j.data,void(s.value=!1);const R=j.data;a("input",{...W,doc_name:R}),s.value=!1,G(R)}catch(t){i.value=t.message,s.value=!1}}};function G(t){const a=null!=t?t:e.value.doc_name;console.log(`[viewPdf] doc name: ${a}`);const o=`/display-doc?filepath=${encodeURIComponent(`/data/uploads/${a}.pdf`)}`;window.open(o)}async function L(t,e,a,o){const n=Object.keys(t);return await Promise.all(n.map((async n=>{const i=t[n];d[n]||(d[n]=i.assay_uom);const s=await async function(t,e){if(null==t||null==e)return 1;if(t===e)return 1;const a=await r.get(`/items/${I}?filter[${W}]=${t}`,{params:{fields:[j]}});if(0===a.data.data.length||void 0===a.data.data[0][j]||null===a.data.data[0][j])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for source weight unit ${t}. Ensure that the symbol is correct and is a weight unit symbol`);const o=await r.get(`/items/${I}?filter[${W}]=${e}`,{params:{fields:[j]}});if(0===o.data.data.length||void 0===o.data.data[0][j]||null===o.data.data[0][j])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for the target weight unit ${e}. Ensure that the symbol is correct and is a weight unit symbol`);const n=parseFloat(a.data.data[0][j]);if(isNaN(n))throw new Error(`[getAssayUnitConversionValue] source weight unit ${t} conversion value=${n} is not a number`);console.log(`[getAssayUnitConversionValue] source unit conversion value=${n}`);const i=parseFloat(o.data.data[0][j]);if(isNaN(i))throw new Error(`[getAssayUnitConversionValue] target weight unit ${t} conversion value=${i} is not a number`);return console.log(`[getAssayUnitConversionValue] target unit conversion value=${i}`),console.log("[getAssayUnitConversionValue] returning "+n/i),n/i}(i.assay_uom,d[n]),u=await async function(t,e,a){const o=await r.get(`/items/${V}?filter[${J}]=${e}`,{params:{fields:[O]}});if(!o.data.data||!o.data.data[0]||!o.data.data[0][O])throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] Dry weight uom not found for symbol ${e}`);const n=o.data.data[0][O];if("%"===a)return n===t?.01:await H(n,t);let i=a.split("/");if(1==i.length){const t=await async function(t){const e=await r.get(`/items/${I}`,{params:{fields:[W,R],filter:{[R]:{_nnull:!0},[W]:{_eq:t}}}});if(200!==e.status||!e.data||0===e.data.data.length)throw new Error("[getAssayUnitComposition] no assay units found with composition");return e.data.data[0][R]}(a);if(!t)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${a} does not have a composition`);i=t.split("/")}if(i.length>2||0===i.length)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${a} is not in the format of 'unit1/unit2'`);const s=i[0],l=i[1];let u=1;if(l!==n){const t=await H(n,l);if(isNaN(t)||0===t)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] conversion value=${t} for original weight unit ${n} and assay unit denominator ${l} is not a number or is zero`);u*=t}if(s!==t){const e=await H(s,t);if(isNaN(e)||0===e)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] conversion value=${e} for evaluated contained metal uom ${s} and target weight unit ${t} is not a number or is zero`);u*=e}return console.log(`[getConversionValuesAndUnitsForPayableMetalCalculation] returning conversion value=${u}`),u}(a[n],l.value,i.assay_uom);return{commodity:e[n],code:n,assay:i.analytical_assay*s,assay_uom:d[n],contained_metal:o*i.analytical_assay*u,contained_metal_uom:a[n]}})))}function T(t){const e=t.getDay(),a=t.getDate(),o=t.getMonth(),n=t.getFullYear();return`${["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"][e]}, ${["January","February","March","April","May","June","July","August","September","October","November","December"][o]} ${a}, ${n}`}function x(t){const e=t.getDate(),a=t.getMonth(),o=t.getFullYear().toString().slice(-2);return`${e} ${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][a]} ${o}`}function K(t){console.log("[evaluateWeights]");const e={};for(const a of t)e[a.method]||(console.log(`adding method ${a.method} to weightData object`),e[a.method]=[]),console.log(`adding lot ${a.id} to weightData.${a.method} array`),e[a.method.toString()].push(a);const a=[];for(const t of Object.keys(e)){if(!e[t]){console.log(`method=${t} does not exist in weightData object`);continue}console.log(`adding lots and other values to weights for method=${t}`);const o=B(e[t]);o&&a.push(o)}return a}function B(t){if(console.log("[evaluateWeightData]"),0===t.length)return;const e=Y(t,"dry_weight"),a=Y(t,"wet_weight");return{method:z(t,"method"),lots:t,dry_weight_uom:z(t,"dry_weight_uom"),wet_weight_uom:z(t,"wet_weight_uom"),dry_weight:e,wet_weight:a,moisture:(a-e)/a*100}}function z(t,e){if(console.log("[getFirstValueAsSharedValue]"),0!==t.length)return console.log(`lots[0][${e.toString()}]=${t[0][e.toString()]}`),t[0][e.toString()]}function Y(t,e){return console.log("[evaluateAggregateValue]"),t.reduce(((t,a)=>{var o;return t+(null!=(o=a[e.toString()])?o:0)}),0)}function q(t){var e;console.log("[evaluateAnalyticalAssay]");const a={};for(const e of t)a[e.method]||(a[e.method]={}),a[e.method][e.commodity]||(a[e.method][e.commodity]=[]),null!==e.lot_number?(1===a[e.method][e.commodity].length&&null===a[e.method][e.commodity][0].lot_number&&(a[e.method][e.commodity]=[]),a[e.method][e.commodity].push(e)):null===e.lot_number&&0===a[e.method][e.commodity].length&&a[e.method][e.commodity].push(e);console.log(`[evaluateAnalyticalAssay] group: ${JSON.stringify(a)}}`);const o={};for(const t in a){console.log(`[evaluateAnalyticalAssay] methodKey: ${t}, group[methodKey]: ${JSON.stringify(a[t])}`);for(const n in a[t]){console.log(`[evaluateAnalyticalAssay] commodityKey: ${n}, group[methodKey][commodityKey]: ${JSON.stringify(a[t][n])}`),o[t]=null!=(e=o[t])?e:{},o[t][n]={};const i=a[t][n].reduce(((t,e)=>t+e[b]),0);console.log(`[evaluateAnalyticalAssay] totalDryWeight: ${i} from ${JSON.stringify(a[t][n])}`),o[t][n].analytical_assay=a[t][n].reduce(((t,e)=>t+e[A]*e[b]),0)/(0!==i?i:1),console.log(`[evaluateAnalyticalAssay] analytical assay: ${o[t][n].analytical_assay}`),a[t][n].length>0&&(o[t][n][C]=a[t][n][0][C])}}return console.log(`[evaluateAnalyticalAssay] analyticalAssay: ${JSON.stringify(o)}`),o}async function H(t,e){if(t===e)return 1;const a=await r.get(`/items/${V}?filter[${O}]=${t}`,{params:{fields:[k]}});if(0===a.data.data.length||null===a.data.data[0][k]||void 0===a.data.data[0][k])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for source weight unit ${t}. Ensure that the symbol is correct and is a weight unit symbol`);const o=await r.get(`/items/${V}?filter[${O}]=${e}`,{params:{fields:[k]}});if(0===o.data.data.length||null===o.data.data[0][k]||void 0===o.data.data[0][k])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for the target weight unit ${e}. Ensure that the symbol is correct and is a weight unit symbol`);const n=parseFloat(a.data.data[0][k]);if(isNaN(n))throw new Error(`[getWeightUnitConversionValue] source weight unit ${t} conversion value=${n} is not a number`);const i=parseFloat(o.data.data[0][k]);if(isNaN(i))throw new Error(`[getWeightUnitConversionValue] target weight unit ${e} conversion value=${i} is not a number`);return console.log(`[getWeightUnitConversionValue] source weight unit=${t}, target weight unit=${e}, source weight unit conversion=${n}, target weight unit conversion=${i}`),console.log("[getWeightUnitConversionValue] conversion factor="+n/i),n/i}}});const y={key:0},v={key:1};f.render=function(t,e,a,o,n,f){const w=i("v-button"),_=i("v-notice");return s(),r(l,null,[u(' <input :value="value" @input="handleChange($event.target.value)" /> '),u(" create a button only interface for Directus"),t.value?(s(),r("div",v,[d(w,{class:"margin-top-16px",onClick:e[1]||(e[1]=()=>t.viewPdf())},{default:c((()=>[m("View Shipment Latest Doc ")])),_:1})])):(s(),r("div",y,[d(w,{class:"margin-top-16px",onClick:e[0]||(e[0]=()=>t.generatePdf()),loading:t.isGeneraingDoc},{default:c((()=>[m("Generate Shipment Latest Doc")])),_:1},8,["loading"]),t.failureReason?(s(),g(_,{key:0},{default:c((()=>[m(h(t.failureReason),1)])),_:1})):u("v-if",!0)]))],2112)},f.__file="src/interface.vue";var w=e({id:"navarch-shipment-latest-generator",name:"Shipment Latest Doc Generator",icon:"receipt_long",description:"This is a custom interface for Navarch's Shipment Latest Document Generator Button.",component:f,options:null,types:["json"],group:"standard"});export{w as default};
