import{useApi as t,defineInterface as e}from"@directus/extensions-sdk";import{defineComponent as a,ref as o,inject as n,resolveComponent as i,openBlock as s,createElementBlock as r,Fragment as l,createCommentVNode as d,createVNode as u,withCtx as c,createTextVNode as m,createBlock as g,toDisplayString as h}from"vue";var f=a({props:{value:{type:String,default:null}},emits:["input"],setup(e,{emit:a}){const i=o(""),s=t(),r=o(""),l=o(""),d={},u={},c=n("values",o({})),m="id",g="method",h="foreign_key",f="counterparty",y="vessel",w="destination",v="contract",_="actual_shipment_date",p="commodity",$="dry_weight",b="final_assay",A="assay_uom",C="lot_number",N="commodity",E="price_per_uom",S="code",D="codename",F="port_name",P="name",U="navarch_unit",V="unit",M="symbol",O="dry_symbol",J="conversionToGram",k="navarch_assay_unit",I="unit",W="conversion_to_ppb",j="composition";return{failureReason:i,viewPdf:function(){console.log(JSON.stringify(e.value));const t=e.value.doc_name;console.log(`[viewPdf] doc name: ${t}`);const a=`/display-doc?filepath=${encodeURIComponent(`/data/uploads/${t}.pdf`)}`;window.open(a)},generatePdf:async function(){var t,e;try{const o=c.value.start_date,n=c.value.end_date,d=c.value.filter_date;if(!o)return void(i.value="Start date not selected");if(!n)return void(i.value="End date not selected");if(!d)return void(i.value="Filter date not selected");let O="";switch(d){case"Arrival Date":O="actual_arrival_date";break;case"Shipment Date":O=_;break;case"Invoice Date":O="invoice_date";break;case"B/L Date":O="bl_date";break;case"Parcel Finalisation Date":O="parcel_finalisation_date";break;default:return void(i.value="Invalid filter date")}const J=[],k=await s.get(`/items/navarch_parcel?filter[_and][0][_and][0][${O}][_between][0]=${o}&filter[_and][0][_and][0][${O}][_between][1]=${n}`,{params:{fields:["shipment_code",f,"physical_status","financial_status",_,y,w,"assay_results","weight_result",v]}});if(200!==k.status)return console.error(`[generatePdf] parcelResponce status: ${k.status}`),void(i.value="Failed to fetch parcels");if(0===k.data.data.length)return void(i.value=`No parcels found within the selected date range of ${o} to ${n} for the filter date ${d}`);for(const t of k.data.data){if(null===t.contract)return void(i.value=`Contract not selected for parcel with shipment code ${t.shipment_code}`);const e=t.contract,a=await s.get(`/items/navarch_commodity_in_contract?filter[${v}]=${e}&filter[payable_commodity]=true`,{params:{fields:[N,E]}});if(200!==a.status)return console.error(`[generatePdf] commodityInContractResponse status: ${a.status}`),void(i.value="Failed to fetch payable commodities");if(0===a.data.data.length){console.log(`[generatePdf] No payable commodities found for parcel with shipment code ${t.shipment_code}`);continue}const o=a.data.data.map((t=>t[N])),n=await s.get(`/items/navarch_commodity?filter[id][_in]=${o.join(",")}`,{params:{fields:[m,"name",S]}});if(200!==n.status)return console.error(`[generatePdf] commodityResponse status: ${n.status}`),void(i.value="Failed to fetch commodities");if(0===n.data.data.length)throw new Error(`[generatePdf] No commodities found for parcel with shipment code ${t.shipment_code}`);if(null===t.assay_results)continue;const d=n.data.data.map((t=>t.code)),c=z((await s.get(`/items/navarch_assay_lot?filter[${h}]=${t.assay_results}&filter[${p}][_in]=${d}&sort[]=${C}`,{params:{fields:[m,g,p,$,b,C,A]}})).data.data);let _,O;if(_||(_=c.Outturn,O="Outturn"),_||(_=c["Inturn Final"],O="Inturn Final"),_||(_=c.Inturn,O="Inturn"),_||(_=c.Estimated,O="Estimated"),_||(_=c.Planned,O="Planned"),!_)throw new Error("No assay lot data found for all assay methods. Please ensure assay lot data has been entered in the selected parcel.");if(console.log("assayByLatestMethod=",JSON.stringify(_)),null===t.weight_result)continue;const k=x((await s.get(`/items/navarch_weight_lot?filter[${h}]=${t.weight_result}&sort[]=lot_number`,{params:{fields:[m,"dry_weight","wet_weight",g,"moisture","wet_weight_uom","dry_weight_uom"]}})).data.data);let I;if(I||(I=k.find((t=>"Outturn"===t.method))),I||(I=k.find((t=>"Inturn Final"===t.method))),I||(I=k.find((t=>"Inturn"===t.method))),I||(I=k.find((t=>"Estimated"===t.method))),I||(I=k.find((t=>"Planned"===t.method))),!I)throw new Error("No weight lot data found for all weight methods. Please ensure weight lot data has been entered in the selected parcel.");if(void 0===I.dry_weight||null===I.dry_weight||void 0===I.wet_weight||null===I.wet_weight||void 0===I.moisture||null===I.moisture||void 0===I.dry_weight_uom||null===I.dry_weight_uom||void 0===I.wet_weight_uom||null===I.wet_weight_uom||void 0===I.method||null===I.method)throw new Error("One of the fields for weight lots is undefined");""===r.value&&(r.value=I.dry_weight_uom),""===l.value&&(l.value=I.wet_weight_uom);const W=await s.get(`/items/navarch_counterparty/${t[f]}`,{params:{fields:[D]}}),j=await s.get(`/items/navarch_world_port/${t[w]}`,{params:{fields:[F]}}),L=t[y],K=await s.get(`/items/navarch_vessel/${L}`,{params:{fields:[P]}}),G=n.data.data.reduce(((t,e)=>(t[e.code]=e.name,t)),{});console.log("commodityCodeToNameMap=",JSON.stringify(G));const B=a.data.data.map((t=>t[E])),q=(await s.get(`/items/${U}?filter[${V}][_in]=${B.join(",")}`,{params:{fields:[V,M]}})).data.data.reduce(((t,e)=>(t[e[V]]=e[M],t)),{});a.data.data.forEach((t=>{const e=n.data.data.find((e=>e[m]===t[N]))[S];if(!u[e]){const a=q[t[E]];u[e]=a}})),console.log("commodityCodeToMetalUomMap=",JSON.stringify(u));const H=await Y(I.dry_weight_uom,r.value),Q=I.wet_weight*H,X=I.dry_weight*H,Z={name:t.shipment_code,counterparty:W.data.data[D],port:j.data.data[F],vessel:K.data.data[P],phy_status:t.physical_status,fin_status:t.financial_status,shipment_date:T(new Date(t.actual_shipment_date)),weight_source:I.method,wet_weight:Q,moisture:I.moisture,dry_weight:X,assay_source:O,assays:await R(_,G,u,X)};J.push(Z)}const I={start_date:L(new Date(o)),end_date:L(new Date(n)),filter_date:d,parcels:J,wet_weight_uom:null==(t=l.value)?void 0:t.toUpperCase(),dry_weight_uom:null==(e=r.value)?void 0:e.toUpperCase()},W=await s.post("/generate/shipment-latest",I);if(200!==W.status)return console.log(`[generatePdf] response status: ${W.status}`),void(i.value=W.data);const j=W.data;a("input",{...I,doc_name:j})}catch(t){i.value=t.message}}};async function R(t,e,a,o){const n=Object.keys(t);return await Promise.all(n.map((async n=>{const i=t[n];d[n]||(d[n]=i.assay_uom);const l=await async function(t,e){if(null==t||null==e)return 1;if(t===e)return 1;const a=await s.get(`/items/${k}?filter[${I}]=${t}`,{params:{fields:[W]}});if(0===a.data.data.length||void 0===a.data.data[0][W]||null===a.data.data[0][W])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for source weight unit ${t}. Ensure that the symbol is correct and is a weight unit symbol`);const o=await s.get(`/items/${k}?filter[${I}]=${e}`,{params:{fields:[W]}});if(0===o.data.data.length||void 0===o.data.data[0][W]||null===o.data.data[0][W])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for the target weight unit ${e}. Ensure that the symbol is correct and is a weight unit symbol`);const n=parseFloat(a.data.data[0][W]);if(isNaN(n))throw new Error(`[getAssayUnitConversionValue] source weight unit ${t} conversion value=${n} is not a number`);console.log(`[getAssayUnitConversionValue] source unit conversion value=${n}`);const i=parseFloat(o.data.data[0][W]);if(isNaN(i))throw new Error(`[getAssayUnitConversionValue] target weight unit ${t} conversion value=${i} is not a number`);return console.log(`[getAssayUnitConversionValue] target unit conversion value=${i}`),console.log("[getAssayUnitConversionValue] returning "+n/i),n/i}(i.assay_uom,d[n]),u=await async function(t,e,a){const o=await s.get(`/items/${U}?filter[${O}]=${e}`,{params:{fields:[M]}});if(!o.data.data||!o.data.data[0]||!o.data.data[0][M])throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] Dry weight uom not found for symbol ${e}`);const n=o.data.data[0][M];if("%"===a)return n===t?.01:await Y(n,t);let i=a.split("/");if(1==i.length){const t=await async function(t){const e=await s.get(`/items/${k}`,{params:{fields:[I,j],filter:{[j]:{_nnull:!0},[I]:{_eq:t}}}});if(200!==e.status||!e.data||0===e.data.data.length)throw new Error("[getAssayUnitComposition] no assay units found with composition");return e.data.data[0][j]}(a);if(!t)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${a} does not have a composition`);i=t.split("/")}if(i.length>2||0===i.length)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${a} is not in the format of 'unit1/unit2'`);const r=i[0],l=i[1];let d=1;if(l!==n){const t=await Y(n,l);if(isNaN(t)||0===t)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] conversion value=${t} for original weight unit ${n} and assay unit denominator ${l} is not a number or is zero`);d*=t}if(r!==t){const e=await Y(r,t);if(isNaN(e)||0===e)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] conversion value=${e} for evaluated contained metal uom ${r} and target weight unit ${t} is not a number or is zero`);d*=e}return console.log(`[getConversionValuesAndUnitsForPayableMetalCalculation] returning conversion value=${d}`),d}(a[n],r.value,i.assay_uom);return{commodity:e[n],code:n,assay:i.analytical_assay*l,assay_uom:d[n],contained_metal:o*i.analytical_assay*u,contained_metal_uom:a[n]}})))}function L(t){const e=t.getDay(),a=t.getDate(),o=t.getMonth(),n=t.getFullYear();return`${["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"][e]}, ${["January","February","March","April","May","June","July","August","September","October","November","December"][o]} ${a}, ${n}`}function T(t){const e=t.getDate(),a=t.getMonth(),o=t.getFullYear().toString().slice(-2);return`${e} ${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][a]} ${o}`}function x(t){console.log("[evaluateWeights]");const e={};for(const a of t)e[a.method]||(console.log(`adding method ${a.method} to weightData object`),e[a.method]=[]),console.log(`adding lot ${a.id} to weightData.${a.method} array`),e[a.method.toString()].push(a);const a=[];for(const t of Object.keys(e)){if(!e[t]){console.log(`method=${t} does not exist in weightData object`);continue}console.log(`adding lots and other values to weights for method=${t}`);const o=K(e[t]);o&&a.push(o)}return a}function K(t){if(console.log("[evaluateWeightData]"),0===t.length)return;const e=B(t,"dry_weight"),a=B(t,"wet_weight");return{method:G(t,"method"),lots:t,dry_weight_uom:G(t,"dry_weight_uom"),wet_weight_uom:G(t,"wet_weight_uom"),dry_weight:e,wet_weight:a,moisture:(a-e)/a*100}}function G(t,e){if(console.log("[getFirstValueAsSharedValue]"),0!==t.length)return console.log(`lots[0][${e.toString()}]=${t[0][e.toString()]}`),t[0][e.toString()]}function B(t,e){return console.log("[evaluateAggregateValue]"),t.reduce(((t,a)=>{var o;return t+(null!=(o=a[e.toString()])?o:0)}),0)}function z(t){var e;console.log("[evaluateAnalyticalAssay]");const a={};for(const e of t)a[e.method]||(a[e.method]={}),a[e.method][e.commodity]||(a[e.method][e.commodity]=[]),null!==e.lot_number?(1===a[e.method][e.commodity].length&&null===a[e.method][e.commodity][0].lot_number&&(a[e.method][e.commodity]=[]),a[e.method][e.commodity].push(e)):null===e.lot_number&&0===a[e.method][e.commodity].length&&a[e.method][e.commodity].push(e);console.log(`[evaluateAnalyticalAssay] group: ${JSON.stringify(a)}}`);const o={};for(const t in a){console.log(`[evaluateAnalyticalAssay] methodKey: ${t}, group[methodKey]: ${JSON.stringify(a[t])}`);for(const n in a[t]){console.log(`[evaluateAnalyticalAssay] commodityKey: ${n}, group[methodKey][commodityKey]: ${JSON.stringify(a[t][n])}`),o[t]=null!=(e=o[t])?e:{},o[t][n]={};const i=a[t][n].reduce(((t,e)=>t+e[$]),0);console.log(`[evaluateAnalyticalAssay] totalDryWeight: ${i} from ${JSON.stringify(a[t][n])}`),o[t][n].analytical_assay=a[t][n].reduce(((t,e)=>t+e[b]*e[$]),0)/(0!==i?i:1),console.log(`[evaluateAnalyticalAssay] analytical assay: ${o[t][n].analytical_assay}`),a[t][n].length>0&&(o[t][n][A]=a[t][n][0][A])}}return console.log(`[evaluateAnalyticalAssay] analyticalAssay: ${JSON.stringify(o)}`),o}async function Y(t,e){if(t===e)return 1;const a=await s.get(`/items/${U}?filter[${M}]=${t}`,{params:{fields:[J]}});if(0===a.data.data.length||null===a.data.data[0][J]||void 0===a.data.data[0][J])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for source weight unit ${t}. Ensure that the symbol is correct and is a weight unit symbol`);const o=await s.get(`/items/${U}?filter[${M}]=${e}`,{params:{fields:[J]}});if(0===o.data.data.length||null===o.data.data[0][J]||void 0===o.data.data[0][J])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for the target weight unit ${e}. Ensure that the symbol is correct and is a weight unit symbol`);const n=parseFloat(a.data.data[0][J]);if(isNaN(n))throw new Error(`[getWeightUnitConversionValue] source weight unit ${t} conversion value=${n} is not a number`);const i=parseFloat(o.data.data[0][J]);if(isNaN(i))throw new Error(`[getWeightUnitConversionValue] target weight unit ${e} conversion value=${i} is not a number`);return console.log(`[getWeightUnitConversionValue] source weight unit=${t}, target weight unit=${e}, source weight unit conversion=${n}, target weight unit conversion=${i}`),console.log("[getWeightUnitConversionValue] conversion factor="+n/i),n/i}}});const y={key:0},w={key:1};f.render=function(t,e,a,o,n,f){const v=i("v-button"),_=i("v-notice");return s(),r(l,null,[d(' <input :value="value" @input="handleChange($event.target.value)" /> '),d(" create a button only interface for Directus"),t.value?(s(),r("div",w,[u(v,{class:"margin-top-16px",onClick:e[1]||(e[1]=()=>t.viewPdf())},{default:c((()=>[m("View Shipment Latest Doc ")])),_:1})])):(s(),r("div",y,[u(v,{class:"margin-top-16px",onClick:e[0]||(e[0]=()=>t.generatePdf())},{default:c((()=>[m("Generate Shipment Latest Doc")])),_:1}),t.failureReason?(s(),g(_,{key:0},{default:c((()=>[m(h(t.failureReason),1)])),_:1})):d("v-if",!0)]))],2112)},f.__file="src/interface.vue";var v=e({id:"navarch-shipment-latest-generator",name:"Shipment Latest Doc Generator",icon:"receipt_long",description:"This is a custom interface for Navarch's Shipment Latest Document Generator Button.",component:f,options:null,types:["json"],group:"standard"});export{v as default};
