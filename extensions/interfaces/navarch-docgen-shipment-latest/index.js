import{useApi as t,defineInterface as e}from"@directus/extensions-sdk";import{defineComponent as a,ref as o,inject as n,resolveComponent as i,openBlock as s,createElementBlock as r,Fragment as l,createCommentVNode as u,createVNode as d,withCtx as c,createTextVNode as m,createBlock as g,toDisplayString as h}from"vue";var f=a({props:{value:{type:Object,default:null}},emits:["input"],setup(e,{emit:a}){const i=o(""),s=o(!1),r=t(),l=o(""),u=o(""),d={},c={},m=n("values",o({})),g="id",h="method",f="foreign_key",v="counterparty",y="vessel",w="destination",_="contract",p="bl_date",$="invoice",b="parcel",A="invoice_date",C="commodity",N="dry_weight",D="final_assay",E="assay_uom",F="lot_number",P="commodity",S="price_per_uom",U="code",V="codename",O="port_name",M="name",J="navarch_unit",k="unit",I="symbol",W="dry_symbol",j="conversionToGram",R="navarch_assay_unit",x="unit",G="conversion_to_ppb",L="composition";return{isGeneraingDoc:s,failureReason:i,viewPdf:T,generatePdf:async function(){var t,e;i.value="",s.value=!0;try{const o=m.value.start_date,n=m.value.end_date,d=m.value.filter_date;if(!o)return i.value="Start date not selected",void(s.value=!1);if(!n)return i.value="End date not selected",void(s.value=!1);if(!d)return i.value="Filter date not selected",void(s.value=!1);let W,j="",R=!1;switch(d){case"Arrival Date":j="actual_arrival_date";break;case"Invoice Date":R=!0;break;case"B/L Date":j=p;break;case"Parcel Finalisation Date":j="parcel_finalisation_date";break;default:return i.value="Invalid filter date",void(s.value=!1)}if(R){const t=await r.get(`/items/navarch_invoice?filter[${$}][_nnull]=true`,{params:{fields:[b,$]}});if(200!==t.status)return console.error(`[generatePdf] invoiceResponse status: ${t.status}`),i.value="Failed to fetch invoices for filter date Invoice Date",void(s.value=!1);const e=t.data.data.filter((t=>{if(!t[$][A])return!1;const e=new Date(t[$][A]);return e>=new Date(o)&&e<=new Date(n)})).map((t=>t[b])).filter(((t,e,a)=>a.indexOf(t)===e));W=`filter[id][_in]=${e.join(",")}`}else W=`filter[_and][0][_and][0][${j}][_between][0]=${o}&filter[_and][0][_and][0][${j}][_between][1]=${n}`;const x=await r.get(`/items/navarch_parcel?${W}`,{params:{fields:["shipment_code",v,"physical_status","financial_status",p,y,w,"assay_results","weight_result",_]}});if(200!==x.status)return console.error(`[generatePdf] parcelResponce status: ${x.status}`),i.value="Failed to fetch parcels",void(s.value=!1);if(0===x.data.data.length)return i.value=`No parcels found within the selected date range of ${o} to ${n} for the filter date ${d}`,void(s.value=!1);const G=[];for(const t of x.data.data){if(null===t.contract)return i.value=`Contract not selected for parcel with shipment code ${t.shipment_code}`,void(s.value=!1);const e=t.contract,a=await r.get(`/items/navarch_commodity_in_contract?filter[${_}]=${e}&filter[payable_commodity]=true`,{params:{fields:[P,S]}});if(200!==a.status)return console.error(`[generatePdf] commodityInContractResponse status: ${a.status}`),i.value="Failed to fetch payable commodities",void(s.value=!1);if(0===a.data.data.length){console.log(`[generatePdf] No payable commodities found for parcel with shipment code ${t.shipment_code}`);continue}const o=a.data.data.map((t=>t[P])),n=await r.get(`/items/navarch_commodity?filter[id][_in]=${o.join(",")}`,{params:{fields:[g,"name",U]}});if(200!==n.status)return console.error(`[generatePdf] commodityResponse status: ${n.status}`),i.value="Failed to fetch commodities",void(s.value=!1);if(0===n.data.data.length)throw new Error(`[generatePdf] No commodities found for parcel with shipment code ${t.shipment_code}`);if(null===t.assay_results)continue;const d=n.data.data.map((t=>t.code)),m=X((await r.get(`/items/navarch_assay_lot?filter[${f}]=${t.assay_results}&filter[${C}][_in]=${d}&sort[]=${F}`,{params:{fields:[g,h,C,N,D,F,E]}})).data.data);let $,b;if($||($=m.Outturn,b="Outturn"),$||($=m["Inturn Final"],b="Inturn Final"),$||($=m.Inturn,b="Inturn"),$||($=m.Estimated,b="Estimated"),$||($=m.Planned,b="Planned"),!$)throw new Error("No assay lot data found for all assay methods. Please ensure assay lot data has been entered in the selected parcel.");if(console.log("assayByLatestMethod=",JSON.stringify($)),null===t.weight_result)continue;const A=Y((await r.get(`/items/navarch_weight_lot?filter[${f}]=${t.weight_result}&sort[]=lot_number`,{params:{fields:[g,"dry_weight","wet_weight",h,"moisture","wet_weight_uom","dry_weight_uom"]}})).data.data);let W;if(W||(W=A.find((t=>"Outturn"===t.method))),W||(W=A.find((t=>"Inturn Final"===t.method))),W||(W=A.find((t=>"Inturn"===t.method))),W||(W=A.find((t=>"Estimated"===t.method))),W||(W=A.find((t=>"Planned"===t.method))),!W)throw new Error("No weight lot data found for all weight methods. Please ensure weight lot data has been entered in the selected parcel.");if(void 0===W.dry_weight||null===W.dry_weight||void 0===W.wet_weight||null===W.wet_weight||void 0===W.moisture||null===W.moisture||void 0===W.dry_weight_uom||null===W.dry_weight_uom||void 0===W.wet_weight_uom||null===W.wet_weight_uom||void 0===W.method||null===W.method)throw new Error("One of the fields for weight lots is undefined");""===l.value&&(l.value=W.dry_weight_uom),""===u.value&&(u.value=W.wet_weight_uom);const j=await r.get(`/items/navarch_counterparty/${t[v]}`,{params:{fields:[V]}}),R=await r.get(`/items/navarch_world_port/${t[w]}`,{params:{fields:[O]}}),x=t[y];let L;x&&(L=await r.get(`/items/navarch_vessel/${x}`,{params:{fields:[M]}}));const T=n.data.data.reduce(((t,e)=>(t[e.code]=e.name,t)),{});console.log("commodityCodeToNameMap=",JSON.stringify(T));const B=a.data.data.map((t=>t[S])),q=(await r.get(`/items/${J}?filter[${k}][_in]=${B.join(",")}`,{params:{fields:[k,I]}})).data.data.reduce(((t,e)=>(t[e[k]]=e[I],t)),{});a.data.data.forEach((t=>{const e=n.data.data.find((e=>e[g]===t[P]))[U];if(!c[e]){const a=q[t[S]];c[e]=a}})),console.log("commodityCodeToMetalUomMap=",JSON.stringify(c));const H=await Z(W.dry_weight_uom,l.value),Q=W.wet_weight*H,tt=W.dry_weight*H,et={name:t.shipment_code,counterparty:j.data.data[V],port:R.data.data[O],vessel:L?L.data.data[M]:"N/A",phy_status:t.physical_status,fin_status:t.financial_status,shipment_date:z(new Date(t[p])),weight_source:W.method,wet_weight:Q,moisture:W.moisture,dry_weight:tt,assay_source:b,assays:await K($,T,c,tt)};G.push(et)}const L={start_date:B(new Date(o)),end_date:B(new Date(n)),filter_date:d,parcels:G,wet_weight_uom:null==(t=u.value)?void 0:t.toUpperCase(),dry_weight_uom:null==(e=l.value)?void 0:e.toUpperCase()},q=await r.post("/generate/shipment-latest",L);if(200!==q.status)return console.log(`[generatePdf] response status: ${q.status}`),i.value=q.data,void(s.value=!1);const H=q.data;a("input",{...L,doc_name:H}),s.value=!1,T(H)}catch(t){i.value=t.message,s.value=!1}}};function T(t){const a=null!=t?t:e.value.doc_name;console.log(`[viewPdf] doc name: ${a}`);const o=`/display-doc?filepath=${encodeURIComponent(`/data/uploads/${a}.pdf`)}`;window.open(o)}async function K(t,e,a,o){const n=Object.keys(t);return await Promise.all(n.map((async n=>{const i=t[n];d[n]||(d[n]=i.assay_uom);const s=await async function(t,e){if(null==t||null==e)return 1;if(t===e)return 1;const a=await r.get(`/items/${R}?filter[${x}]=${t}`,{params:{fields:[G]}});if(0===a.data.data.length||void 0===a.data.data[0][G]||null===a.data.data[0][G])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for source weight unit ${t}. Ensure that the symbol is correct and is a weight unit symbol`);const o=await r.get(`/items/${R}?filter[${x}]=${e}`,{params:{fields:[G]}});if(0===o.data.data.length||void 0===o.data.data[0][G]||null===o.data.data[0][G])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for the target weight unit ${e}. Ensure that the symbol is correct and is a weight unit symbol`);const n=parseFloat(a.data.data[0][G]);if(isNaN(n))throw new Error(`[getAssayUnitConversionValue] source weight unit ${t} conversion value=${n} is not a number`);console.log(`[getAssayUnitConversionValue] source unit conversion value=${n}`);const i=parseFloat(o.data.data[0][G]);if(isNaN(i))throw new Error(`[getAssayUnitConversionValue] target weight unit ${t} conversion value=${i} is not a number`);return console.log(`[getAssayUnitConversionValue] target unit conversion value=${i}`),console.log("[getAssayUnitConversionValue] returning "+n/i),n/i}(i.assay_uom,d[n]),u=await async function(t,e,a){const o=await r.get(`/items/${J}?filter[${W}]=${e}`,{params:{fields:[I]}});if(!o.data.data||!o.data.data[0]||!o.data.data[0][I])throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] Dry weight uom not found for symbol ${e}`);const n=o.data.data[0][I];if("%"===a)return n===t?.01:await Z(n,t);let i=a.split("/");if(1==i.length){const t=await async function(t){const e=await r.get(`/items/${R}`,{params:{fields:[x,L],filter:{[L]:{_nnull:!0},[x]:{_eq:t}}}});if(200!==e.status||!e.data||0===e.data.data.length)throw new Error("[getAssayUnitComposition] no assay units found with composition");return e.data.data[0][L]}(a);if(!t)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${a} does not have a composition`);i=t.split("/")}if(i.length>2||0===i.length)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${a} is not in the format of 'unit1/unit2'`);const s=i[0],l=i[1];let u=1;if(l!==n){const t=await Z(n,l);if(isNaN(t)||0===t)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] conversion value=${t} for original weight unit ${n} and assay unit denominator ${l} is not a number or is zero`);u*=t}if(s!==t){const e=await Z(s,t);if(isNaN(e)||0===e)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] conversion value=${e} for evaluated contained metal uom ${s} and target weight unit ${t} is not a number or is zero`);u*=e}return console.log(`[getConversionValuesAndUnitsForPayableMetalCalculation] returning conversion value=${u}`),u}(a[n],l.value,i.assay_uom);return{commodity:e[n],code:n,assay:i.analytical_assay*s,assay_uom:d[n],contained_metal:o*i.analytical_assay*u,contained_metal_uom:a[n]}})))}function B(t){const e=t.getDay(),a=t.getDate(),o=t.getMonth(),n=t.getFullYear();return`${["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"][e]}, ${["January","February","March","April","May","June","July","August","September","October","November","December"][o]} ${a}, ${n}`}function z(t){const e=t.getDate(),a=t.getMonth(),o=t.getFullYear().toString().slice(-2);return`${e} ${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][a]} ${o}`}function Y(t){console.log("[evaluateWeights]");const e={};for(const a of t)e[a.method]||(console.log(`adding method ${a.method} to weightData object`),e[a.method]=[]),console.log(`adding lot ${a.id} to weightData.${a.method} array`),e[a.method.toString()].push(a);const a=[];for(const t of Object.keys(e)){if(!e[t]){console.log(`method=${t} does not exist in weightData object`);continue}console.log(`adding lots and other values to weights for method=${t}`);const o=q(e[t]);o&&a.push(o)}return a}function q(t){if(console.log("[evaluateWeightData]"),0===t.length)return;const e=Q(t,"dry_weight"),a=Q(t,"wet_weight");return{method:H(t,"method"),lots:t,dry_weight_uom:H(t,"dry_weight_uom"),wet_weight_uom:H(t,"wet_weight_uom"),dry_weight:e,wet_weight:a,moisture:(a-e)/a*100}}function H(t,e){if(console.log("[getFirstValueAsSharedValue]"),0!==t.length)return console.log(`lots[0][${e.toString()}]=${t[0][e.toString()]}`),t[0][e.toString()]}function Q(t,e){return console.log("[evaluateAggregateValue]"),t.reduce(((t,a)=>{var o;return t+(null!=(o=a[e.toString()])?o:0)}),0)}function X(t){var e;console.log("[evaluateAnalyticalAssay]");const a={};for(const e of t)a[e.method]||(a[e.method]={}),a[e.method][e.commodity]||(a[e.method][e.commodity]=[]),null!==e.lot_number?(1===a[e.method][e.commodity].length&&null===a[e.method][e.commodity][0].lot_number&&(a[e.method][e.commodity]=[]),a[e.method][e.commodity].push(e)):null===e.lot_number&&0===a[e.method][e.commodity].length&&a[e.method][e.commodity].push(e);console.log(`[evaluateAnalyticalAssay] group: ${JSON.stringify(a)}}`);const o={};for(const t in a){console.log(`[evaluateAnalyticalAssay] methodKey: ${t}, group[methodKey]: ${JSON.stringify(a[t])}`);for(const n in a[t]){console.log(`[evaluateAnalyticalAssay] commodityKey: ${n}, group[methodKey][commodityKey]: ${JSON.stringify(a[t][n])}`),o[t]=null!=(e=o[t])?e:{},o[t][n]={};const i=a[t][n].reduce(((t,e)=>t+e[N]),0);console.log(`[evaluateAnalyticalAssay] totalDryWeight: ${i} from ${JSON.stringify(a[t][n])}`),o[t][n].analytical_assay=a[t][n].reduce(((t,e)=>t+e[D]*e[N]),0)/(0!==i?i:1),console.log(`[evaluateAnalyticalAssay] analytical assay: ${o[t][n].analytical_assay}`),a[t][n].length>0&&(o[t][n][E]=a[t][n][0][E])}}return console.log(`[evaluateAnalyticalAssay] analyticalAssay: ${JSON.stringify(o)}`),o}async function Z(t,e){if(t===e)return 1;const a=await r.get(`/items/${J}?filter[${I}]=${t}`,{params:{fields:[j]}});if(0===a.data.data.length||null===a.data.data[0][j]||void 0===a.data.data[0][j])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for source weight unit ${t}. Ensure that the symbol is correct and is a weight unit symbol`);const o=await r.get(`/items/${J}?filter[${I}]=${e}`,{params:{fields:[j]}});if(0===o.data.data.length||null===o.data.data[0][j]||void 0===o.data.data[0][j])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for the target weight unit ${e}. Ensure that the symbol is correct and is a weight unit symbol`);const n=parseFloat(a.data.data[0][j]);if(isNaN(n))throw new Error(`[getWeightUnitConversionValue] source weight unit ${t} conversion value=${n} is not a number`);const i=parseFloat(o.data.data[0][j]);if(isNaN(i))throw new Error(`[getWeightUnitConversionValue] target weight unit ${e} conversion value=${i} is not a number`);return console.log(`[getWeightUnitConversionValue] source weight unit=${t}, target weight unit=${e}, source weight unit conversion=${n}, target weight unit conversion=${i}`),console.log("[getWeightUnitConversionValue] conversion factor="+n/i),n/i}}});const v={key:0},y={key:1};f.render=function(t,e,a,o,n,f){const w=i("v-button"),_=i("v-notice");return s(),r(l,null,[u(' <input :value="value" @input="handleChange($event.target.value)" /> '),u(" create a button only interface for Directus"),t.value?(s(),r("div",y,[d(w,{class:"margin-top-16px",onClick:e[1]||(e[1]=()=>t.viewPdf())},{default:c((()=>[m("View Shipment Latest Doc ")])),_:1})])):(s(),r("div",v,[d(w,{class:"margin-top-16px",onClick:e[0]||(e[0]=()=>t.generatePdf()),loading:t.isGeneraingDoc},{default:c((()=>[m("Generate Shipment Latest Doc")])),_:1},8,["loading"]),t.failureReason?(s(),g(_,{key:0},{default:c((()=>[m(h(t.failureReason),1)])),_:1})):u("v-if",!0)]))],2112)},f.__file="src/interface.vue";var w=e({id:"navarch-shipment-latest-generator",name:"Shipment Latest Doc Generator",icon:"receipt_long",description:"This is a custom interface for Navarch's Shipment Latest Document Generator Button.",component:f,options:null,types:["json"],group:"standard"});export{w as default};
