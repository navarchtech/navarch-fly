import{useApi as t,defineInterface as e}from"@directus/extensions-sdk";import{defineComponent as a,ref as o,inject as n,resolveComponent as i,openBlock as s,createElementBlock as r,Fragment as l,createCommentVNode as d,createVNode as u,withCtx as c,createTextVNode as m,createBlock as g,toDisplayString as h}from"vue";var f=a({props:{value:{type:Object,default:null}},emits:["input"],setup(e,{emit:a}){const i=o(""),s=o(!1),r=o(!1),l=t(),d=o(""),u=o(""),c={},m={},g=n("values",o({})),h="id",f="method",v="foreign_key",y="counterparty",w="vessel",p="destination",_="contract",$="bl_date",b="invoice",C="parcel",A="invoice_date",N="logo",E="commodity",D="dry_weight",S="final_assay",F="assay_uom",P="lot_number",U="commodity",V="price_per_uom",O="code",M="codename",k="port_name",J="name",I="navarch_unit",j="unit",x="symbol",T="dry_symbol",W="conversionToGram",R="navarch_assay_unit",G="unit",L="conversion_to_ppb",B="composition";return{isGeneraingDoc:s,failureReason:i,viewPdf:K,copy:async function(){r.value=!0;const{id:t,user_created:e,date_created:a,user_updated:o,date_updated:n,shipment_latest:s,...d}=g.value;console.log(`[shipment latest::copy] requestBody=${JSON.stringify(d)}`);const u=await l.post("/items/navarch_shipment_latest",d);if(200!==u.status)return console.log(`[shipment latest::copy] copy response status: ${u.status}`),void(i.value=`Failed to duplicate shipment latest with status ${u.status}`);r.value=!1,window.open(`/admin/content/navarch_shipment_latest/${u.data.data.id}`)},isCopying:r,generatePdf:async function(){var t,e,o;i.value="",s.value=!0;try{const n=g.value.start_date,r=g.value.end_date,c=g.value.filter_date;if(!n)return i.value="Start date not selected",void(s.value=!1);if(!r)return i.value="End date not selected",void(s.value=!1);if(!c)return i.value="Filter date not selected",void(s.value=!1);let T,W="",R=!1;switch(c){case"Arrival Date":W="actual_arrival_date";break;case"Invoice Date":R=!0;break;case"B/L Date":W=$;break;case"Parcel Finalisation Date":W="parcel_finalisation_date";break;default:return i.value="Invalid filter date",void(s.value=!1)}if(R){const t=await l.get(`/items/navarch_invoice?filter[${b}][_nnull]=true`,{params:{fields:[C,b]}});if(200!==t.status)return console.error(`[generatePdf] invoiceResponse status: ${t.status}`),i.value="Failed to fetch invoices for filter date Invoice Date",void(s.value=!1);const e=t.data.data.filter((t=>{if(!t[b][A])return!1;const e=new Date(t[b][A]);return e>=new Date(n)&&e<=new Date(r)})).map((t=>t[C])).filter(((t,e,a)=>a.indexOf(t)===e));T=`filter[id][_in]=${e.join(",")}`}else T=`filter[_and][0][_and][0][${W}][_between][0]=${n}&filter[_and][0][_and][0][${W}][_between][1]=${r}`;const G=await l.get(`/items/navarch_parcel?${T}`,{params:{fields:["shipment_code",y,"physical_status","financial_status",$,w,p,"assay_results","weight_result",_]}});if(200!==G.status)return console.error(`[generatePdf] parcelResponce status: ${G.status}`),i.value="Failed to fetch parcels",void(s.value=!1);if(0===G.data.data.length)return i.value=`No parcels found within the selected date range of ${n} to ${r} for the filter date ${c}`,void(s.value=!1);const L=[];for(const t of G.data.data){if(null===t.contract)return i.value=`Contract not selected for parcel with shipment code ${t.shipment_code}`,void(s.value=!1);const e=t.contract,a=await l.get(`/items/navarch_commodity_in_contract?filter[${_}]=${e}&filter[payable_commodity]=true`,{params:{fields:[U,V]}});if(200!==a.status)return console.error(`[generatePdf] commodityInContractResponse status: ${a.status}`),i.value="Failed to fetch payable commodities",void(s.value=!1);if(0===a.data.data.length){console.log(`[generatePdf] No payable commodities found for parcel with shipment code ${t.shipment_code}`);continue}const o=a.data.data.map((t=>t[U])),n=await l.get(`/items/navarch_commodity?filter[id][_in]=${o.join(",")}`,{params:{fields:[h,"name",O]}});if(200!==n.status)return console.error(`[generatePdf] commodityResponse status: ${n.status}`),i.value="Failed to fetch commodities",void(s.value=!1);if(0===n.data.data.length)throw new Error(`[generatePdf] No commodities found for parcel with shipment code ${t.shipment_code}`);if(null===t.assay_results)continue;const r=n.data.data.map((t=>t.code)),c=tt((await l.get(`/items/navarch_assay_lot?filter[${v}]=${t.assay_results}&filter[${E}][_in]=${r}&sort[]=${P}`,{params:{fields:[h,f,E,D,S,P,F]}})).data.data);let g,b;if(g||(g=c.Outturn,b="Outturn"),g||(g=c["Inturn Final"],b="Inturn Final"),g||(g=c.Inturn,b="Inturn"),g||(g=c.Estimated,b="Estimated"),g||(g=c.Planned,b="Planned"),!g)throw new Error("No assay lot data found for all assay methods. Please ensure assay lot data has been entered in the selected parcel.");if(console.log("assayByLatestMethod=",JSON.stringify(g)),null===t.weight_result)continue;const C=H((await l.get(`/items/navarch_weight_lot?filter[${v}]=${t.weight_result}&sort[]=lot_number`,{params:{fields:[h,"dry_weight","wet_weight",f,"moisture","wet_weight_uom","dry_weight_uom"]}})).data.data);let A;if(A||(A=C.find((t=>"Outturn"===t.method))),A||(A=C.find((t=>"Inturn Final"===t.method))),A||(A=C.find((t=>"Inturn"===t.method))),A||(A=C.find((t=>"Estimated"===t.method))),A||(A=C.find((t=>"Planned"===t.method))),!A)throw new Error("No weight lot data found for all weight methods. Please ensure weight lot data has been entered in the selected parcel.");if(void 0===A.dry_weight||null===A.dry_weight||void 0===A.wet_weight||null===A.wet_weight||void 0===A.moisture||null===A.moisture||void 0===A.dry_weight_uom||null===A.dry_weight_uom||void 0===A.wet_weight_uom||null===A.wet_weight_uom||void 0===A.method||null===A.method)throw new Error("One of the fields for weight lots is undefined");""===d.value&&(d.value=A.dry_weight_uom),""===u.value&&(u.value=A.wet_weight_uom);const N=await l.get(`/items/navarch_counterparty/${t[y]}`,{params:{fields:[M]}}),T=await l.get(`/items/navarch_world_port/${t[p]}`,{params:{fields:[k]}}),W=t[w];let R;W&&(R=await l.get(`/items/navarch_vessel/${W}`,{params:{fields:[J]}}));const G=n.data.data.reduce(((t,e)=>(t[e.code]=e.name,t)),{});console.log("commodityCodeToNameMap=",JSON.stringify(G));const B=a.data.data.map((t=>t[V])),K=(await l.get(`/items/${I}?filter[${j}][_in]=${B.join(",")}`,{params:{fields:[j,x]}})).data.data.reduce(((t,e)=>(t[e[j]]=e[x],t)),{});a.data.data.forEach((t=>{const e=n.data.data.find((e=>e[h]===t[U]))[O];if(!m[e]){const a=K[t[V]];m[e]=a}})),console.log("commodityCodeToMetalUomMap=",JSON.stringify(m));const z=await et(A.dry_weight_uom,d.value),Q=A.wet_weight*z,X=A.dry_weight*z,Z={name:t.shipment_code,counterparty:N.data.data[M],port:T.data.data[k],vessel:R?R.data.data[J]:"N/A",phy_status:t.physical_status,fin_status:t.financial_status,shipment_date:Y(new Date(t[$])),weight_source:A.method,wet_weight:Q,moisture:A.moisture,dry_weight:X,assay_source:b,assays:await q(g,G,m,X)};L.push(Z)}const B={company_logo:null!=(t=(await l.get("/items/navarch_company",{params:{fields:[N]}})).data.data[N])?t:void 0,start_date:z(new Date(n)),end_date:z(new Date(r)),filter_date:c,parcels:L,wet_weight_uom:null==(e=u.value)?void 0:e.toUpperCase(),dry_weight_uom:null==(o=d.value)?void 0:o.toUpperCase()},Q=await l.post("/generate/shipment-latest",B);if(200!==Q.status)return console.log(`[generatePdf] response status: ${Q.status}`),i.value=Q.data,void(s.value=!1);const X=Q.data;a("input",{...B,doc_name:X}),s.value=!1,K(X)}catch(t){i.value=t.message,s.value=!1}}};function K(t){const a=null!=t?t:e.value.doc_name;console.log(`[viewPdf] doc name: ${a}`);const o=`/display-doc?docname=${encodeURIComponent(`${a}.pdf`)}`;window.open(o)}async function q(t,e,a,o){const n=Object.keys(t);return await Promise.all(n.map((async n=>{const i=t[n];c[n]||(c[n]=i.assay_uom);const s=await async function(t,e){if(null==t||null==e)return 1;if(t===e)return 1;const a=await l.get(`/items/${R}?filter[${G}]=${t}`,{params:{fields:[L]}});if(0===a.data.data.length||void 0===a.data.data[0][L]||null===a.data.data[0][L])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for source weight unit ${t}. Ensure that the symbol is correct and is a weight unit symbol`);const o=await l.get(`/items/${R}?filter[${G}]=${e}`,{params:{fields:[L]}});if(0===o.data.data.length||void 0===o.data.data[0][L]||null===o.data.data[0][L])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for the target weight unit ${e}. Ensure that the symbol is correct and is a weight unit symbol`);const n=parseFloat(a.data.data[0][L]);if(isNaN(n))throw new Error(`[getAssayUnitConversionValue] source weight unit ${t} conversion value=${n} is not a number`);console.log(`[getAssayUnitConversionValue] source unit conversion value=${n}`);const i=parseFloat(o.data.data[0][L]);if(isNaN(i))throw new Error(`[getAssayUnitConversionValue] target weight unit ${t} conversion value=${i} is not a number`);return console.log(`[getAssayUnitConversionValue] target unit conversion value=${i}`),console.log("[getAssayUnitConversionValue] returning "+n/i),n/i}(i.assay_uom,c[n]),r=await async function(t,e,a){const o=await l.get(`/items/${I}?filter[${T}]=${e}`,{params:{fields:[x]}});if(!o.data.data||!o.data.data[0]||!o.data.data[0][x])throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] Dry weight uom not found for symbol ${e}`);const n=o.data.data[0][x];if("%"===a)return n===t?.01:await et(n,t);let i=a.split("/");if(1==i.length){const t=await async function(t){const e=await l.get(`/items/${R}`,{params:{fields:[G,B],filter:{[B]:{_nnull:!0},[G]:{_eq:t}}}});if(200!==e.status||!e.data||0===e.data.data.length)throw new Error("[getAssayUnitComposition] no assay units found with composition");return e.data.data[0][B]}(a);if(!t)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${a} does not have a composition`);i=t.split("/")}if(i.length>2||0===i.length)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${a} is not in the format of 'unit1/unit2'`);const s=i[0],r=i[1];let d=1;if(r!==n){const t=await et(n,r);if(isNaN(t)||0===t)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] conversion value=${t} for original weight unit ${n} and assay unit denominator ${r} is not a number or is zero`);d*=t}if(s!==t){const e=await et(s,t);if(isNaN(e)||0===e)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] conversion value=${e} for evaluated contained metal uom ${s} and target weight unit ${t} is not a number or is zero`);d*=e}return console.log(`[getConversionValuesAndUnitsForPayableMetalCalculation] returning conversion value=${d}`),d}(a[n],d.value,i.assay_uom);return{commodity:e[n],code:n,assay:i.analytical_assay*s,assay_uom:c[n],contained_metal:o*i.analytical_assay*r,contained_metal_uom:a[n]}})))}function z(t){const e=t.getDay(),a=t.getDate(),o=t.getMonth(),n=t.getFullYear();return`${["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"][e]}, ${["January","February","March","April","May","June","July","August","September","October","November","December"][o]} ${a}, ${n}`}function Y(t){const e=t.getDate(),a=t.getMonth(),o=t.getFullYear().toString().slice(-2);return`${e} ${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][a]} ${o}`}function H(t){console.log("[evaluateWeights]");const e={};for(const a of t)e[a.method]||(console.log(`adding method ${a.method} to weightData object`),e[a.method]=[]),console.log(`adding lot ${a.id} to weightData.${a.method} array`),e[a.method.toString()].push(a);const a=[];for(const t of Object.keys(e)){if(!e[t]){console.log(`method=${t} does not exist in weightData object`);continue}console.log(`adding lots and other values to weights for method=${t}`);const o=Q(e[t]);o&&a.push(o)}return a}function Q(t){if(console.log("[evaluateWeightData]"),0===t.length)return;const e=Z(t,"dry_weight"),a=Z(t,"wet_weight");return{method:X(t,"method"),lots:t,dry_weight_uom:X(t,"dry_weight_uom"),wet_weight_uom:X(t,"wet_weight_uom"),dry_weight:e,wet_weight:a,moisture:(a-e)/a*100}}function X(t,e){if(console.log("[getFirstValueAsSharedValue]"),0!==t.length)return console.log(`lots[0][${e.toString()}]=${t[0][e.toString()]}`),t[0][e.toString()]}function Z(t,e){return console.log("[evaluateAggregateValue]"),t.reduce(((t,a)=>{var o;return t+(null!=(o=a[e.toString()])?o:0)}),0)}function tt(t){var e;console.log("[evaluateAnalyticalAssay]");const a={};for(const e of t)a[e.method]||(a[e.method]={}),a[e.method][e.commodity]||(a[e.method][e.commodity]=[]),null!==e.lot_number?(1===a[e.method][e.commodity].length&&null===a[e.method][e.commodity][0].lot_number&&(a[e.method][e.commodity]=[]),a[e.method][e.commodity].push(e)):null===e.lot_number&&0===a[e.method][e.commodity].length&&a[e.method][e.commodity].push(e);console.log(`[evaluateAnalyticalAssay] group: ${JSON.stringify(a)}}`);const o={};for(const t in a){console.log(`[evaluateAnalyticalAssay] methodKey: ${t}, group[methodKey]: ${JSON.stringify(a[t])}`);for(const n in a[t]){console.log(`[evaluateAnalyticalAssay] commodityKey: ${n}, group[methodKey][commodityKey]: ${JSON.stringify(a[t][n])}`),o[t]=null!=(e=o[t])?e:{},o[t][n]={};const i=a[t][n].reduce(((t,e)=>t+e[D]),0);console.log(`[evaluateAnalyticalAssay] totalDryWeight: ${i} from ${JSON.stringify(a[t][n])}`),o[t][n].analytical_assay=a[t][n].reduce(((t,e)=>t+e[S]*e[D]),0)/(0!==i?i:1),console.log(`[evaluateAnalyticalAssay] analytical assay: ${o[t][n].analytical_assay}`),a[t][n].length>0&&(o[t][n][F]=a[t][n][0][F])}}return console.log(`[evaluateAnalyticalAssay] analyticalAssay: ${JSON.stringify(o)}`),o}async function et(t,e){if(t===e)return 1;const a=await l.get(`/items/${I}?filter[${x}]=${t}`,{params:{fields:[W]}});if(0===a.data.data.length||null===a.data.data[0][W]||void 0===a.data.data[0][W])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for source weight unit ${t}. Ensure that the symbol is correct and is a weight unit symbol`);const o=await l.get(`/items/${I}?filter[${x}]=${e}`,{params:{fields:[W]}});if(0===o.data.data.length||null===o.data.data[0][W]||void 0===o.data.data[0][W])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for the target weight unit ${e}. Ensure that the symbol is correct and is a weight unit symbol`);const n=parseFloat(a.data.data[0][W]);if(isNaN(n))throw new Error(`[getWeightUnitConversionValue] source weight unit ${t} conversion value=${n} is not a number`);const i=parseFloat(o.data.data[0][W]);if(isNaN(i))throw new Error(`[getWeightUnitConversionValue] target weight unit ${e} conversion value=${i} is not a number`);return console.log(`[getWeightUnitConversionValue] source weight unit=${t}, target weight unit=${e}, source weight unit conversion=${n}, target weight unit conversion=${i}`),console.log("[getWeightUnitConversionValue] conversion factor="+n/i),n/i}}});const v={key:0},y={key:1};var w=[],p=[];!function(t,e){if(t&&"undefined"!=typeof document){var a,o=!0===e.prepend?"prepend":"append",n=!0===e.singleTag,i="string"==typeof e.container?document.querySelector(e.container):document.getElementsByTagName("head")[0];if(n){var s=w.indexOf(i);-1===s&&(s=w.push(i)-1,p[s]={}),a=p[s]&&p[s][o]?p[s][o]:p[s][o]=r()}else a=r();65279===t.charCodeAt(0)&&(t=t.substring(1)),a.styleSheet?a.styleSheet.cssText+=t:a.appendChild(document.createTextNode(t))}function r(){var t=document.createElement("style");if(t.setAttribute("type","text/css"),e.attributes)for(var a=Object.keys(e.attributes),n=0;n<a.length;n++)t.setAttribute(a[n],e.attributes[a[n]]);var s="prepend"===o?"afterbegin":"beforeend";return i.insertAdjacentElement(s,t),t}}(".margin-top-16px[data-v-64969d30] {\n  margin-top: 16px;\n}",{}),f.render=function(t,e,a,o,n,f){const w=i("v-button"),p=i("v-notice");return s(),r(l,null,[d(' <input :value="value" @input="handleChange($event.target.value)" /> '),d(" create a button only interface for Directus"),t.value?(s(),r("div",y,[u(w,{onClick:e[1]||(e[1]=()=>t.viewPdf())},{default:c((()=>[m("View Shipment Latest Doc ")])),_:1})])):(s(),r("div",v,[u(w,{onClick:e[0]||(e[0]=()=>t.generatePdf()),loading:t.isGeneraingDoc},{default:c((()=>[m("Generate Shipment Latest Doc")])),_:1},8,["loading"]),t.failureReason?(s(),g(p,{key:0},{default:c((()=>[m(h(t.failureReason),1)])),_:1})):d("v-if",!0)])),u(w,{class:"margin-top-16px",onClick:e[2]||(e[2]=()=>t.copy()),loading:t.isCopying},{default:c((()=>[m("Copy")])),_:1},8,["loading"])],64)},f.__scopeId="data-v-64969d30",f.__file="src/interface.vue";var _=e({id:"navarch-shipment-latest-generator",name:"Shipment Latest Doc Generator",icon:"receipt_long",description:"This is a custom interface for Navarch's Shipment Latest Document Generator Button.",component:f,options:null,types:["json"],group:"standard"});export{_ as default};
