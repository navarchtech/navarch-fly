import{useApi as e,defineInterface as t}from"@directus/extensions-sdk";import{defineComponent as a,inject as n,ref as o,resolveComponent as r,resolveDirective as i,openBlock as s,createElementBlock as l,Fragment as d,createElementVNode as u,withDirectives as c,createBlock as p,withCtx as f,createTextVNode as v,toDisplayString as y,createCommentVNode as g}from"vue";const m="navarch_assay_report",h="avg",_={[h]:"",parcel:"Parcel",lot_number:"Lot Number",commodity:"Commodity",method:"Method",dry_weight:"Dry Weight",dry_weight_uom:"Dry Weight UOM",assay_uom:"Assay UOM",contained_metal_uom:"Contained Metal UOM",seller_assay:"Seller Assay",contained_seller_weight:"Contained Metal (Seller)",buyer_assay:"Buyer Assay",contained_buyer_weight:"Contained Metal (Buyer)",difference:"Difference",contained_difference_weight:"Contained Metal (Difference)",splitting_limit:"Splitting Limit",umpire_assay:"Umpire Assay",to_umpire:"To Umpire",umpire_name:"Umpire Name",losing_party:"Losing Party",final_assay:"Final Assay"},w=[h,"parcel","lot_number","commodity","method"],$="contained_metal_uom",b="contained_seller_weight",C="contained_buyer_weight",A="contained_difference_weight",M="id",D="related_parcel",U="lot_number",k="method",N="contract",S="shipment_code",x="commodity",B="dry_weight",E="dry_weight_uom",O="difference",R="splitting_limit",F="seller_assay",W="buyer_assay",I="umpire_assay",T="assay_uom",V="final_assay",j="code",L="commodity",G="contract",P="payable_metal_uom",z="unit",J="symbol",q="parcel",H={dwt:1.5551739,g:1,kg:1e3,kt:1e9,mt:1e6,mg:.001,Mt:1e12,lb:453.59238,st:907185,t:1e6,oz:31.103477},K={"kg(d)":"kg",dkt:"kt",dmt:"mt",dmg:"mg",dMt:"Mt",dt:"t"},Q={Dwt:["dwt","t"],"g/t":["g","t"],"oz/t":["oz","t"],ppb:["g","t"],ppm:["kg","t"]};function X(e){return null==e}function Y(e,t=2,a=!1){if(null==e||isNaN(e))return null;const n=a&&e<0;return n&&(e*=-1),Math.round(e*Math.pow(10,t))/Math.pow(10,t)*(n?-1:1)}function Z(e,t=2,a=!0){if(isNaN(e)||null==e)return"-";const n=Math.round(e*Math.pow(10,t))/Math.pow(10,t),[o,r]=n.toString().split("."),i=o?o.replace(/\B(?=(\d{3})+(?!\d))/g,","):"0";if(!r&&!a)return i;return`${i}.${(null!=r?r:"").padEnd(t,"0")}`}function ee(e,t,a=!0){var n,o;if(e===t)return{conversionValue:1,isConvertByMultiplication:!0};const r=H[e],i=H[t];return r<i?{conversionValue:a?null!=(n=Y(i/r,4))?n:1:i/r,isConvertByMultiplication:!1}:{conversionValue:a?null!=(o=Y(r/i,4))?o:1:r/i,isConvertByMultiplication:!0}}function te(e,t,a){if(void 0===e||void 0===t||null===e||null===t)return;const n=e.split("/"),o=t.split("/");if(n.length>2||o.length>2)throw new Error(`[getConversionUnit] sourceUnit=${e} and targetUnit=${t} must be in the format of 'unit1/unit2', an extra '/' was found`);if(1===n.length&&1===o.length)return a?`${o[0]}/${n[0]}`:`${n[0]}/${o[0]}`;if(1===n.length){const e=o[0]===n[0]?"":`${o[1]}(${n[1]})`,t=o[1];return""===t?a?e:`/${e}`:a?`${e}/${t}`:`${t}/${e}`}if(1===o.length){const e=n[1],t=n[0]===o[0]?"":`${n[1]}(${o[0]})`;return""===t?a?e:`/${e}`:a?`${e}/${t}`:`${t}/${e}`}{const e=n[0]===o[0],t=n[1]===o[1],r=e||""===n[0],i=e||""===o[0],s=t||""===n[1],l=t||""===o[1],d=!s&&!i,u=!r&&!l,c=`${s?"":n[1]}${d?"(":""}${i?"":`${o[0]}`}${d?")":""}`,p=`${r?"":n[0]}${u?"(":""}${l?"":`${o[1]}`}${u?")":""}`;return""===p?a?c:`/${c}`:a?`${c}/${p}`:`${p}/${c}`}}var ae=a({props:{value:{type:String,default:null}},emits:["input"],setup(t,{emit:a}){const r=e(),i=n("values",o({})),s=o(!1),l=o(!1),d=o(null),u=o(t.value);return{documentData:u,generateDocument:async function(){s.value=!0,d.value=null;try{const{filter_date:e,start_date:t,end_date:a}=i.value;if(!e||!t||!a)return d.value="Please provide valid dates for all fields.",void(s.value=!1);let n;if("invoice_date"===e){const o=await r.get("/items/navarch_invoices",{params:{fields:[q],filter:{[e]:{_between:[t,a]}},limit:-1}});if(200!==o.status)return void(d.value="Failed to fetch parcel data, please try again.");if(!o.data.data||0===o.data.data.length)return d.value="No invoices found with Invoice Dates that fall within the selected date range.",void(s.value=!1);n={[M]:{_in:o.data.data.map(e=>e[q])}}}else{let o=!1,r="INVALID_FIELD_NAME";switch(e){case"bl_date":r="estimated_shipment_date",o=!0;break;case"actual_arrival_date":r="estimate_arrival_date",o=!0}n=o?{_or:[{[e]:{_between:[t,a]}},{_and:[{[e]:{_null:!0}},{[r]:{_between:[t,a]}}]}]}:{[e]:{_between:[t,a]}}}const o=await r.get("/items/navarch_parcel",{params:{fields:[M,S,N],filter:n,limit:-1}});if(200!==o.status)return void(d.value="Failed to fetch parcel data, please try again.");if(!o.data.data||0===o.data.data.length)return d.value="No parcels found that falls in the provided date range for the selected filter date.",void(s.value=!1);console.log(`[navarch-docgen-assayreport::generateDocument] ${o.data.data.length} parcels found with ${e} in the selected date range.`);const l=await r.get("/items/navarch_assay_lot",{params:{fields:[D,U,x,k,B,E,T,F,W,O,R,"to_umpire",I,"umpire_name","losing_party",V],filter:{[D]:{_in:o.data.data.map(e=>e[M])}},sort:[D,x,U],limit:-1}});if(200!==l.status)return void(d.value="Failed to fetch assay data, please try again.");if(!l.data.data||0===l.data.data.length)return d.value="No assay data found for the parcels in the provided date range for the selected filter date.",void(s.value=!1);const f=o.data.data.reduce((e,t)=>(e[t[M]]=t[S],e),{}),v={},y={},g=new Set,w=new Set;for(const e of o.data.data){const t=e[N];if(v[e[M]]=e[N],!y[t]){y[t]={};const e=await r.get("/items/navarch_commodity_in_contract",{params:{filter:{[G]:{_eq:t}},fields:[L,P]}});for(const a of e.data.data)y[t][a[L]]=a[P],w.add(a[L]),g.add(a[P])}}const H=(await r.get("/items/navarch_commodity",{params:{fields:[M,j],filter:{id:{_in:Array.from(w)}},limit:-1}})).data.data.reduce((e,t)=>(e[t[j]]=t[M],e),{}),Q=(await r.get("/items/navarch_unit",{params:{filter:{[z]:{_in:Array.from(g)}},fields:[z,J]}})).data.data.reduce((e,t)=>(e[t[z]]=t[J],e),{}),Y=function(e){if(!Array.isArray(e)||0===e.length)return console.warn(`[navarch-docgen-assayreport::cleanUpAssayData] No assay data found or invalid format. Data=${JSON.stringify(e)}`),[];const t=Object.keys(_);return e.map(e=>{const a={};for(const n of t)X(e[n])?a[n]="":a[n]=n!==B&&n!==F&&n!==b&&n!==W&&n!==C&&n!==O&&n!==A&&n!==R&&n!==I&&n!==V?e[n]:Z(e[n],4,!0);return""===a[U]&&(a[h]="Average"),a})}(function(e){const t=e.reduce((e,t)=>{const a=t[D];return e[a]?e[a].push(t):e[a]=[t],e},{});let a;for(const e in t){const n=t[e];if(n.find(e=>"Outturn"===e[k]))a="Outturn";else if(n.find(e=>"Inturn Final"===e[k]))a="Inturn Final";else if(n.find(e=>"Inturn"===e[k]))a="Inturn";else if(n.find(e=>"Planned"===e[k]))a="Planned";else{if(!n.find(e=>"Estimated"===e[k]))throw new Error(`Unknown assay method found: ${n[0][k]}`);a="Estimated"}t[e]=n.filter(e=>e[k]===a),a=void 0}return Object.values(t).flat()}(l.data.data).map(e=>{var t,a,n,o,r,i;const{related_parcel:s,...l}=e,d=null!=(t=K[l[E]])?t:l[E],u=null!=(a=v[s])?a:-1,p=null!=(n=H[l[x]])?n:-1,g=null!=(i=Q[null!=(r=null==(o=y[u])?void 0:o[p])?r:""])?i:"oz";return{[h]:"",parcel:f[s],[$]:g,[b]:c(l[B],d,g,l[F],l[T]),[C]:c(l[B],d,g,l[W],l[T]),[A]:c(l[B],d,g,l[O],l[T]),...l}}));if(u.value=Y,i.value[M]){const{id:e,user_created:t,date_created:a,user_updated:n,date_updated:o,...s}=i.value,l=await r.patch(`/items/${m}/${e}`,{...s,assay_report:u.value});if(200!==l.status)return console.log(`[navarch-docgen-assayreport::generateDocument] update response status: ${l.status}`),void(d.value=`Failed to update assay report with status ${l.status}`)}else{const e=await r.post(`/items/${m}`,{...i.value,assay_report:u.value});if(200!==e.status)return console.log(`[navarch-docgen-assayreport::generateDocument] create response status: ${e.status}`),void(d.value=`Failed to create assay report with status ${e.status}`);const{id:t}=e.data.data;window.open(`/admin/content/${m}/${t}`)}p(Y)}catch(e){console.error("[navarch-docgen-assayreport::generateDocument] Error generating document:",e),d.value=`Error generating document: ${e}`}finally{s.value=!1}},downloadDoc:p,copy:async function(){l.value=!0;const{id:e,user_created:t,date_created:a,user_updated:n,date_updated:o,assay:s,...u}=i.value;console.log(`[navarch-docgen-assayreport::copy] requestBody=${JSON.stringify(u)}`);const c=await r.post("/items/navarch_assay_report",u);if(200!==c.status)return console.log(`[navarch-docgen-assayreport::copy] copy response status: ${c.status}`),void(d.value=`Failed to duplicate assay report with status ${c.status}`);l.value=!1,window.open(`/admin/content/navarch_assay_report/${c.data.data.id}`)},clearDocument:function(){u.value=null,d.value=null,a("input",null)},isGeneraingDoc:s,isCopying:l,failureReason:d};function c(e,t,a,n,o){const r=function(e,t,a,n=!0){if("%"===e){if(t===a)return{initialAssayConversion:{conversionValue:100,isConvertByMultiplication:!1}};const e=ee(t,a,n);return e.conversionUOM=te(t,a,e.isConvertByMultiplication),{finalWeightConversion:e}}let o=e.split("/");if(1===o.length&&(o=Q[e],!o))throw new Error(`[getConversionFactorForAssayUnitToMultiplySourceWeightUnitIntoTargetWeightUnit] assay unit composition for assayUnit=${e} is undefined`);if(2!==o.length)throw new Error(`[getConversionFactorForAssayUnitToMultiplySourceWeightUnitIntoTargetWeightUnit] assay unit composition for assayUnit=${e} must be in the format of 'weightUnit1/weightUnit2'`);const[r,i]=o,s={};return i!==t&&(s.initialAssayConversion=ee(t,i,n),s.initialAssayConversion.conversionUOM=te(t,i,s.initialAssayConversion.isConvertByMultiplication)),r!==t&&(s.finalWeightConversion=ee(r,a,n),s.finalWeightConversion.conversionUOM=te(r,a,s.finalWeightConversion.isConvertByMultiplication)),s}(o,t,a);if(X(e)||X(n))return null;let i=e*n;return r.initialAssayConversion&&(r.initialAssayConversion.isConvertByMultiplication?i*=r.initialAssayConversion.conversionValue:i/=r.initialAssayConversion.conversionValue),r.finalWeightConversion&&(r.finalWeightConversion.isConvertByMultiplication?i*=r.finalWeightConversion.conversionValue:i/=r.finalWeightConversion.conversionValue),Y(i,4)}function p(e){try{const t=function(e){const t=[],a=Object.keys(e[0]),{fields:n}=i.value,o=w.concat(a.filter(e=>n.includes(e)));t.push(o.map(e=>_[e]).join(",")),console.log(`[navarch-docgen-assayreport::convertJsonToCsv] Selected fields for CSV: ${JSON.stringify(o)}`);for(const a of e){const e=o.map(e=>`"${String(a[e]).replace(/"/g,'\\"')}"`);t.push(e.join(","))}return t.join("\n")}(null!=e?e:u.value),a=i.value.start_date,n=i.value.end_date;!function(e,t){const a=new Blob([e],{type:"text/csv"}),n=URL.createObjectURL(a),o=document.createElement("a");o.href=n,o.download=`${t}.csv`,document.body.appendChild(o),o.click(),document.body.removeChild(o)}(t,`Assay Report - ${i.value.filter_date} - ${a} ~ ${n}`)}catch(e){console.error("Error downloading Assay Report:",e),d.value="Error downloading Assay Report: "+e}}}});const ne={class:"margin-top-16px"};var oe=[],re=[];!function(e,t){if(e&&"undefined"!=typeof document){var a,n=!0===t.prepend?"prepend":"append",o=!0===t.singleTag,r="string"==typeof t.container?document.querySelector(t.container):document.getElementsByTagName("head")[0];if(o){var i=oe.indexOf(r);-1===i&&(i=oe.push(r)-1,re[i]={}),a=re[i]&&re[i][n]?re[i][n]:re[i][n]=s()}else a=s();65279===e.charCodeAt(0)&&(e=e.substring(1)),a.styleSheet?a.styleSheet.cssText+=e:a.appendChild(document.createTextNode(e))}function s(){var e=document.createElement("style");if(e.setAttribute("type","text/css"),t.attributes)for(var a=Object.keys(t.attributes),o=0;o<a.length;o++)e.setAttribute(a[o],t.attributes[a[o]]);var i="prepend"===n?"afterbegin":"beforeend";return r.insertAdjacentElement(i,e),e}}(".margin-top-16px[data-v-64969d30] {\n  margin-top: 16px;\n}\n.margin-left-16px[data-v-64969d30] {\n  margin-left: 16px;\n}\n.secondary-button[data-v-64969d30] {\n  --v-button-background-color: var(--background-page);\n  --v-button-color: var(--primary);\n  border: 1px solid var(--primary);\n  border-radius: var(--border-radius);\n}\n.secondary-button[data-v-64969d30]:disabled {\n  border-radius: var(--border-radius);\n}\n.secondary-button[data-v-64969d30]:hover {\n  border-color: var(--v-button-background-color-hover);\n  --v-button-color: inherit;\n}",{}),ae.render=function(e,t,a,n,o,m){const h=r("v-button"),_=r("v-notice"),w=i("tooltip");return s(),l(d,null,[u("div",ne,[e.documentData?c((s(),p(h,{key:1,onClick:t[1]||(t[1]=()=>e.downloadDoc(e.documentData))},{default:f(()=>[v(" Download Assay Report ")]),_:1})),[[w,"Download the Assay Report."]]):c((s(),p(h,{key:0,onClick:t[0]||(t[0]=()=>e.generateDocument()),loading:e.isGeneraingDoc},{default:f(()=>[v(" Generate & Save Assay Report ")]),_:1},8,["loading"])),[[w,"Generate and saves the Assay Report based on the selected date range for the selected filter date. Valid dates must be provided for start and end dates."]]),c((s(),p(h,{class:"margin-left-16px secondary-button",onClick:t[2]||(t[2]=()=>e.copy()),loading:e.isCopying},{default:f(()=>[v("Copy")]),_:1},8,["loading"])),[[w,"Create a copy of this form with all the fields except the Assay Report. To regenerate another Assay Report with minor changes to the input data."]]),c((s(),p(h,{class:"margin-left-16px secondary-button",onClick:t[3]||(t[3]=()=>e.clearDocument())},{default:f(()=>[v("Clear")]),_:1})),[[w,"Clear the generated Assay Report (if already generated) to regenerate again."]])]),e.failureReason?(s(),p(_,{key:0,class:"margin-top-16px"},{default:f(()=>[v(y(e.failureReason),1)]),_:1})):g("v-if",!0)],64)},ae.__scopeId="data-v-64969d30",ae.__file="src/interface.vue";var ie=t({id:"navarch-docgen-assayreport",name:"Navarch Assay Report Generator Button",icon:"receipt_long",description:"Navarch Assay Report Generator Button",component:ae,options:null,types:["json"],group:"standard"});export{ie as default};
