import{useApi as e,defineInterface as a}from"@directus/extensions-sdk";import{defineComponent as t,ref as n,inject as o,resolveComponent as i,openBlock as r,createElementBlock as s,Fragment as l,createCommentVNode as c,createVNode as d,withCtx as u,createTextVNode as v,createBlock as p,toDisplayString as g}from"vue";var f=(e=>(e[e.Advance=0]="Advance",e[e["Second Advance"]=1]="Second Advance",e[e["Third Advance"]=2]="Third Advance",e[e["Fourth Advance"]=3]="Fourth Advance",e[e.Provisional=4]="Provisional",e[e["Second Provisional"]=5]="Second Provisional",e[e["Third Provisional"]=6]="Third Provisional",e[e["Fourth Provisional"]=7]="Fourth Provisional",e[e.Final=8]="Final",e))(f||{}),m=t({props:{value:{type:Object,default:null}},emits:["input"],setup(a,{emit:t}){const i=n(""),r=n(!1),s=n(""),l=n(""),c=e(),d=o("values",n({})),u="navarch_invoices",v="parcel",p="invoice_type",g="invoice_date",m="invoice",y="navarch_parcel",h="contract",_="mine",w="name",$="code",D="codename",b="navarch_unit",P="symbol",E="conversionToGram";return{isGeneraingDoc:r,failureReason:i,generatePdf:async function(){var e;i.value="",r.value=!0;try{const a=d.value.start_date,n=d.value.end_date,o=d.value.filter_date,h=d.value.invoice_type;if(!a)return i.value="Start date not selected",void(r.value=!1);if(!n)return i.value="End date not selected",void(r.value=!1);if(!o)return i.value="Filter date not selected",void(r.value=!1);if(!h)return i.value="Invoice type not selected",void(r.value=!1);let _="";switch(o){case"Arrival Date":_="actual_arrival_date";break;case"Invoice Date":_=g;break;case"B/L Date":_="bl_date";break;case"Parcel Finalisation Date":_="parcel_finalisation_date";break;default:return i.value="Invalid filter date",void(r.value=!1)}console.log(`[generatePenaltyElementsDoc] filter date=${_}`);const b={[m]:{_nnull:!0}};if(_===g)b[g]={_between:[a,n]};else{const e=await c.get(`/items/${y}`,{params:{filter:{_and:[{[_]:{_between:[a,n]}}]},fields:["id"]}});if(200!==e.status)return console.error(`[generateLoadportDisportComparisonDoc] parcelResponce status: ${e.status}`),i.value="Failed to fetch parcels",void(r.value=!1);if(0===e.data.data.length)return i.value=`No parcels found within the selected date range of ${a} to ${n} with a non-null Invoice Date`,void(r.value=!1);const t=e.data.data[0].id;b[v]={_in:t}}const P=(await c.get(`/items/${u}`,{params:{filter:b,fields:[v,p]}})).data.data.map((e=>({parcel:e[v],invoiceType:e[p]}))).reduce(((e,a)=>(e[a.parcel]||(e[a.parcel]=[]),e[a.parcel].push(a.invoiceType),e)),{});let E={};if("First Issued Invoice"===h)E=Object.keys(P).reduce(((e,a)=>{const t=P[a].reduce(((e,a)=>f[a]<e?f[a]:e),8);return e[a]=f[t],e}),{});else{if("Latest Issued Invoice"!==h)return i.value="Invalid invoice type",void(r.value=!1);E=Object.keys(P).reduce(((e,a)=>{const t=P[a].reduce(((e,a)=>f[a]>e?f[a]:e),0);return e[a]=f[t],e}),{})}console.log(`[generatePenaltyElementsDoc] invoice type parcel combo=${JSON.stringify(E)}`);const S={_or:Object.keys(E).map((e=>({_and:[{[v]:{_eq:e}},{[p]:{_eq:E[e]}},{[m]:{_nnull:!0}}]})))};console.log(`[generatePenaltyElementsDoc] invoice data filter=${JSON.stringify(S)}`);const A=await c.get(`/items/${u}`,{params:{filter:S,fields:["id",v,p,m]}});if(console.log(`[generatePenaltyElementsDoc] invoice ids fetched=${A.data.data.map((e=>e.id)).join(", ")}`),200!==A.status)return console.error(`[generateLoadportDisportComparisonDoc] invoicesResponse status: ${A.status}`),i.value="Failed to fetch invoices",void(r.value=!1);if(0===A.data.data.length)return i.value="No invoices found for parcels within the selected date range",void(r.value=!1);const I=A.data.data.reduce(((e,a)=>{const t=a[m];""===s.value&&(s.value=t.dry_weight_uom);const n=t.penalties;if(!n||!n.penalties||0===n.penalties.length)return e;""===l.value&&(console.debug(`[generatePenaltyElementsDoc] penalties=${JSON.stringify(n)}`),l.value=`${t.currency}/${n.penalties[0].penalty_per_uom}`);const o=n.penalties.map((e=>e.commodity));return[...e,...o]}),[]).filter(((e,a,t)=>t.indexOf(e)===a));console.log(`[generatePenaltyElementsDoc] penalty commodities=${I.join(", ")}`);const O=I.map(((e,a)=>`filter[_or][${a}][${w}]=${e}`)).join("&").replace(/ /g,"%20"),T=await c.get(`/items/navarch_commodity?${O}`,{params:{fields:[w,$,"id"]}});console.log(`commodity mapping response: ${JSON.stringify(T.data.data)}`);const j=T.data.data.reduce(((e,a)=>(e[a[w]]={code:a[$],id:a.id},e)),{}),U=[];for(const e of A.data.data){const a=e[m].penalties;if(!a||!a.penalties)continue;const t=a.penalties,n=(await c.get(`/items/navarch_counterparty?filter[name]=${e[m].buyer}`,{params:{fields:[D]}})).data.data[0][D],o=e[m].dry_weight.replace(/,/g,""),i=await N(e[m].dry_weight_uom,s.value);console.log(`[generatePenaltyElementsDoc] dry weight conversion factor=${i}`),U.push({id:e[v],name:e[m].shipment_code,vessel:e[m].vessel,invoice_type:e.invoice_type,dry_weight:parseFloat(o)*i,penalties:await Promise.all(t.map((async a=>await C(a,n,e[v],j))))})}const J=A.data.data[0][m].currency,V={start_date:k(new Date(a)),end_date:k(new Date(n)),filter_date:o,invoice_type:h,parcels:U,dry_weight_uom:null==(e=s.value)?void 0:e.toUpperCase(),penalty_rate_uom:l.value,currency:J},W=await c.post("/generate/penalty-elements",V);if(200!==W.status)return console.log(`[generateLoadportDisportComparisonDoc] response status: ${W.status}`),i.value=W.data,void(r.value=!1);const G=W.data;t("input",{...V,doc_name:G}),r.value=!1,F(G)}catch(e){console.error("[generatePenaltyElements] error=",e),i.value=e,r.value=!1}},viewPdf:F};function F(e){const t=null!=e?e:a.value.doc_name;console.log(`[viewPdf] doc name: ${t}`);const n=`/display-doc?filepath=${encodeURIComponent(`/data/uploads/${t}.pdf`)}`;window.open(n)}async function C(e,a,t,n){const o=(await c.get(`/items/${y}/${t}`,{params:{fields:[h]}})).data.data[h];if(!o)throw new Error(`[generatePenalty] no contract found for parcel with id ${t}`);const i=await c.get(`/items/navarch_contract/${o}`,{params:{fields:[_]}});if(!i.data.data[_])throw new Error(`No mine found for contract with id ${o}`);const r=l.value.split("/")[1],s=await N(e.penalty_per_uom,r);return{mine:i.data.data[_],commodity_code:n[e.commodity].code,counterparty:a,assay:parseFloat(e.analytical_assay.replace(/,/g,"")),assay_uom:e.assay_uom,penalty_rate:parseFloat(e.final_penalty_rate.replace(/,/g,""))/s,penalty_amount:parseFloat(e.final_penalty.replace(/,/g,""))}}function k(e){const a=e.getDay(),t=e.getDate(),n=e.getMonth(),o=e.getFullYear();return`${["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"][a]}, ${["January","February","March","April","May","June","July","August","September","October","November","December"][n]} ${t}, ${o}`}async function N(e,a){if(e===a)return 1;const t=await c.get(`/items/${b}?filter[${P}]=${e}`,{params:{fields:[E]}});if(0===t.data.data.length||null===t.data.data[0][E]||void 0===t.data.data[0][E])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for source weight unit ${e}. Ensure that the symbol is correct and is a weight unit symbol`);const n=await c.get(`/items/${b}?filter[${P}]=${a}`,{params:{fields:[E]}});if(0===n.data.data.length||null===n.data.data[0][E]||void 0===n.data.data[0][E])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for the target weight unit ${a}. Ensure that the symbol is correct and is a weight unit symbol`);const o=parseFloat(t.data.data[0][E]);if(isNaN(o))throw new Error(`[getWeightUnitConversionValue] source weight unit ${e} conversion value=${o} is not a number`);const i=parseFloat(n.data.data[0][E]);if(isNaN(i))throw new Error(`[getWeightUnitConversionValue] target weight unit ${a} conversion value=${i} is not a number`);return console.log(`[getWeightUnitConversionValue] source weight unit=${e}, target weight unit=${a}, source weight unit conversion=${o}, target weight unit conversion=${i}`),console.log("[getWeightUnitConversionValue] conversion factor="+o/i),o/i}}});const y={key:0},h={key:1};m.render=function(e,a,t,n,o,f){const m=i("v-button"),_=i("v-notice");return r(),s(l,null,[c(' <input :value="value" @input="handleChange($event.target.value)" /> '),c(" create a button only interface for Directus"),e.value?(r(),s("div",h,[d(m,{class:"margin-top-16px",onClick:a[1]||(a[1]=()=>e.viewPdf())},{default:u((()=>[v("View Penalty Elements Doc ")])),_:1})])):(r(),s("div",y,[d(m,{class:"margin-top-16px",onClick:a[0]||(a[0]=()=>e.generatePdf()),loading:e.isGeneraingDoc},{default:u((()=>[v("Generate Penalty Elements Doc")])),_:1},8,["loading"]),e.failureReason?(r(),p(_,{key:0},{default:u((()=>[v(g(e.failureReason),1)])),_:1})):c("v-if",!0)]))],2112)},m.__file="src/interface.vue";var _=a({id:"navarch-penalty-elements-generator",name:"Penalty Elements Doc Generator",icon:"receipt_long",description:"This is a custom interface for Navarch's Penalty Elements Document Generator Button.",component:m,options:null,types:["json"],group:"standard"});export{_ as default};
