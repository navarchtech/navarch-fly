import{useApi as a,defineInterface as e}from"@directus/extensions-sdk";import{defineComponent as t,ref as n,inject as o,resolveComponent as i,openBlock as r,createElementBlock as l,Fragment as s,createCommentVNode as d,createVNode as c,withCtx as u,createTextVNode as m,createBlock as _,toDisplayString as f}from"vue";var v=(a=>(a.BRACKET="Brackets",a.MIN_DEDUCTION="Minimum Deduction",a.MAX_CAP="Maximum Cap",a))(v||{}),y=(a=>(a.PERCENTAGE="Percentage",a.FRACTIONAL="Fractional",a))(y||{}),h=(a=>(a.WET_WEIGHT="wet_weight",a.MOISTURE="moisture",a.DRY_WEIGHT="dry_weight",a))(h||{}),g=(a=>(a.METHOD="method",a.WET_WEIGHT_UOM="wet_weight_uom",a.MOISTURE_UOM="moisture_uom",a.DRY_WEIGHT_UOM="dry_weight_uom",a))(g||{}),p=t({props:{value:{type:String,default:null}},emits:["input"],setup(e,{emit:t}){const i=n(""),r=a(),l=o("values",n({}));function s(a){if(console.log("[evaluateWeightData]"),0===a.length)return;const e=c(a,h.DRY_WEIGHT),t=c(a,h.WET_WEIGHT);return{method:d(a,g.METHOD),lots:a,dry_weight_uom:d(a,g.DRY_WEIGHT_UOM),wet_weight_uom:d(a,g.WET_WEIGHT_UOM),dry_weight:e,wet_weight:t,moisture:(t-e)/t*100}}function d(a,e){if(console.log("[getFirstValueAsSharedValue]"),0!==a.length)return console.log(`lots[0][${e.toString()}]=${a[0][e.toString()]}`),a[0][e.toString()]}function c(a,e){return console.log("[evaluateAggregateValue]"),a.reduce(((a,t)=>{var n;return a+(null!=(n=t[e.toString()])?n:0)}),0)}function u(a){if(console.log("[validateCommodityData]"),!a)throw new Error("commodity data response is null");if(!a.name)throw new Error(`commodity data response 'name'=${a.name} is undefined`);if(!a.code)throw new Error(`commodity data response 'code'=${a.code} is undefined`)}function m(a,e=2,t=!0){if(console.log("[formatNumber]"),isNaN(a)||null===a)return"-";const n=Math.round(a*Math.pow(10,e))/Math.pow(10,e),[o,i]=n.toString().split("."),r=o.replace(/\B(?=(\d{3})+(?!\d))/g,",");if(!i&&!t)return r;return`${r}.${(null!=i?i:"").padEnd(e,"0")}`}function _(a){if(console.log("[parseNumber]"),!a)return 0;const e=parseFloat(a.replace(/,/g,""));return console.log(`[parseNumber] number: ${a} to ${e}`),e}function f(a,e){var t;if(console.log("[findBracket]"),1===a.length){if(e>=(null!=(t=a[0].lower_threshold)?t:0)&&(null===a[0].upper_threshold||void 0===a[0].upper_threshold||e<a[0].upper_threshold))return a[0];throw new Error(`[findBracket] value=${e} does not fall within the only bracket: ${JSON.stringify(a[0])}`)}return a.find((a=>{var t,n;const o=e>(null!=(t=a.lower_threshold)?t:0)&&(null===a.upper_threshold||void 0===a.upper_threshold||e<a.upper_threshold)||a.lower_threshold_inclusive&&e===(null!=(n=a.lower_threshold)?n:0)||a.upper_threshold_inclusive&&e===a.upper_threshold;return console.log(`[findBracket] value=${e} for bracket: ${JSON.stringify(a)}? match=${!!o}`),o}))}function p(a,e){var t,n,o,i,r,l,s;console.log("[evaluateFinalValueFromBrackets]");const d=(a-(null!=(t=e.initial_adjustment)?t:0)*(null!=(n=e.initial_adjustment_conversion_factor)?n:1))*(null!=(o=e.rate)?o:0)*(e.rate_type===y.PERCENTAGE?.01:1)+(null!=(i=e.final_adjustment)?i:0)*(null!=(r=e.final_adjustment_conversion_factor)?r:1);switch(e.bracket_type){case v.MIN_DEDUCTION:if(null===e.comparator||void 0===e.comparator)throw new Error("Minimum deduction not found");const t=e.comparator*(null!=(l=e.comparator_conversion_factor)?l:1);return a-d<t?a-t:d;case v.MAX_CAP:if(null===e.comparator||void 0===e.comparator)throw new Error("Maximum cap not found");const n=e.comparator*(null!=(s=e.comparator_conversion_factor)?s:1);return d>n?n:d;case v.BRACKET:return d;default:throw new Error(`bracket type ${e.bracket_type} is not supported`)}}async function $(a,e,t){var n,o,i,r,l,s,d,c;if(console.log("[evaluatePayableAssay]"),!t||0===t.length)return{};const u=f(t,a);if(!u)throw new Error(`Bracket not found for value ${a}, please ensure the brackets for all commodities defined in the contract cover all range of possible values for payable assays`);let _,h,g=1;u.initial_adjustment_uom&&void 0!==u.initial_adjustment_uom&&null!==u.initial_adjustment_uom&&u.initial_adjustment_uom!==e&&(g=await T(u.initial_adjustment_uom,e),_=M(u.initial_adjustment_uom,e));let $,w=1;u.bracket_type===v.MAX_CAP?(h=null!=(n=u.maximum_cap)?n:0,void 0!==u.maximum_cap_uom&&null!==u.maximum_cap_uom&&u.maximum_cap_uom!==e&&(w=await T(u.maximum_cap_uom,e),$=M(u.maximum_cap_uom,e))):u.bracket_type===v.MIN_DEDUCTION&&(h=null!=(o=u.minimum_deduction)?o:0,void 0!==u.minimum_deduction_uom&&null!==u.minimum_deduction_uom&&u.minimum_deduction_uom!==e&&(w=await T(u.minimum_deduction_uom,e),$=M(u.minimum_deduction_uom,e)));const b=p(a,{bracket_type:u.bracket_type,rate:null!=(i=u.rate)?i:1,rate_type:null!=(r=u.rate_type)?r:y.FRACTIONAL,initial_adjustment:null!=(l=u.initial_adjustment)?l:0,initial_adjustment_conversion_factor:g,comparator:h,comparator_conversion_factor:w});let E="";const C=void 0!==u.initial_adjustment&&null!==u.initial_adjustment;if(u.bracket_type===v.BRACKET)E=`${C?"(":""}${m(a,4)}${null!=e?e:""}${C?` - ${m(u.initial_adjustment,4)}${null!=(s=u.initial_adjustment_uom)?s:`${null!=e?e:""}`}`:""}${C&&1!==g?` * ${m(g,4)}${_}`:""}${C?")":""} * ${m(u.rate,4)}${u.rate_type===y.PERCENTAGE?"/100":`/${m(1,4)}`}`;else if(u.bracket_type===v.MIN_DEDUCTION){E=b===a-h*w?`${m(a,4)}${null!=e?e:""} - ${m(h,4)}${null!=e?e:""}${1!==w?` * ${m(w,4)}${$}`:""}`:`${C?"(":""}${m(a,4)}${null!=e?e:""}${C?` - ${m(u.initial_adjustment,4)}${null!=(d=u.initial_adjustment_uom)?d:`${null!=e?e:""}`}`:""}${C&&1!==g?` * ${m(g,4)}${_}`:""}${C?")":""} * ${m(u.rate,4)}${u.rate_type===y.PERCENTAGE?"/100":`/${m(1,4)}`}`}else{if(u.bracket_type!==v.MAX_CAP)throw new Error(`[buildPayableAssayExpression] unknown bracket method: ${u.bracket_type}`);E=b===h*w?`${m(h,4)}${null!=e?e:""}${1!==w?` * ${m(w,4)}${$}`:""}`:`${C?"(":""}${m(a,4)}${null!=e?e:""}${C?` - ${m(u.initial_adjustment,4)}${null!=(c=u.initial_adjustment_uom)?c:`${null!=e?e:""}`}`:""}${C&&1!==g?` * ${m(g,4)}${_}`:""}${C?")":""} * ${m(u.rate,4)}${u.rate_type===y.PERCENTAGE?"/100":`/${m(1,4)}`}`}return{payableAssay:b,expression:E}}console.log("[main] formValues=",l);const w="above the lower threshold, plus",b="below the upper threshold, minus";function E(a,e,t){var n,o,i,r;if(console.log("[evaluateTreatmentCharge]"),!t||!t.length)return;const l=f(t,a);if(!l)throw new Error(`Bracket not found for value ${a}, please ensure the brackets for all commodities defined in the contract cover all range of possible values for treatment charge`);let s=0,d=1;if(l.use_btc)d=0,s=0;else if(d=null!=(n=l.rate)?n:1,l.for_every_unit===w)s=null!=(o=l.lower_threshold)?o:0;else{if(l.for_every_unit!==b)throw new Error(`[evaluateTreatmentCharge] unknown for_every_unit: ${l.for_every_unit}`);s=null!=(i=l.upper_threshold)?i:0}const c={bracket_type:v.BRACKET,rate:d,rate_type:y.FRACTIONAL,initial_adjustment:s,final_adjustment:null!=(r=l.base_treatment_charge)?r:0};return console.log(`[evaluateTreatmentCharge] bracketForEvaluation: ${JSON.stringify(c)}`),{finalValue:p(a,c),baseTreatmentCharge:l.base_treatment_charge}}function C(a,e,t,n){var o,i,r;if(console.log("[evaluatePenalty]"),!e||!e.length)return{};const l=f(e,a);if(!l)throw new Error(`[evaluatePenalty] Bracket not found for value ${a}, please ensure the brackets for all commodities defined in the contract cover all range of possible values for penalty`);let s=0,d=1;if(l.no_penalty)d=0,s=0;else if(d=null!=(o=l.rate)?o:1,l.for_every_unit===w)s=null!=(i=l.lower_threshold)?i:0;else{if(l.for_every_unit!==b)throw new Error(`[evaluatePenalty] unknown for_every_unit: ${l.for_every_unit}`);s=null!=(r=l.upper_threshold)?r:0}const c={bracket_type:v.BRACKET,rate:d,rate_type:y.FRACTIONAL,initial_adjustment:s,final_adjustment:0};console.log(`[evaluatePenalty] bracketForEvaluation: ${JSON.stringify(c)}`);const u=p(a,c),_=null!=c.initial_adjustment;let h="";return h=l.rate&&0!==l.rate?`${_?"(":""}${m(a,4)}${_?` - ${m(s,4)})`:""} / ${m(1,4)} * ${null!=t?t:""} ${m(d,4)}/${null!=n?n:""}`:"No penalty",{penalty:u,expression:h,bracket:l}}function I(a){return a.toLowerCase().split(" ").map((a=>a.charAt(0).toUpperCase()+a.slice(1))).join(" ")}function A(a){const e=a.getDate(),t=a.getMonth(),n=a.getFullYear();return`${e} ${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][t]} ${n}`}function N(a,e,t=!1){const n=new Date(a.valueOf());let o=e-(t?1:0);for(;o>0;)n.setDate(n.getDate()-1),0!==n.getDay()&&6!==n.getDay()&&(o-=1);return n}function D(a,e){const t=new Date(a.valueOf());return t.setMonth(t.getMonth()+e,1),t}function S(a,e){const t=new Date(a.valueOf());return t.setMonth(t.getMonth()+e+1,0),t}async function O(a,e,t,n,o="USD"){switch(e){case"LME Zinc Cash Settlement":return 2607.5;case"London Bullion Market Silver Spot":return 25.768;case"London Gold Average Daily":return 1413.795;case"London Spot Silver":return 15.745;default:return 1128.5}}async function k(a,e){if(a===e)return 1;const t=await r.get(`/items/${ga}?filter[${pa}]=${a}`,{params:{fields:[Ea]}});if(0===t.data.data.length||null===t.data.data[0][Ea]||void 0===t.data.data[0][Ea])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for source weight unit ${a}. Ensure that the symbol is correct and is a weight unit symbol`);const n=await r.get(`/items/${ga}?filter[${pa}]=${e}`,{params:{fields:[Ea]}});if(0===n.data.data.length||null===n.data.data[0][Ea]||void 0===n.data.data[0][Ea])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for the target weight unit ${e}. Ensure that the symbol is correct and is a weight unit symbol`);const o=parseFloat(t.data.data[0][Ea]);if(isNaN(o))throw new Error(`[getWeightUnitConversionValue] source weight unit ${a} conversion value=${o} is not a number`);const i=parseFloat(n.data.data[0][Ea]);if(isNaN(i))throw new Error(`[getWeightUnitConversionValue] target weight unit ${e} conversion value=${i} is not a number`);return o/i}async function T(a,e){if(null==a||null==e)return 1;if(a===e)return 1;const t=await r.get(`/items/${Ca}?filter[${Ia}]=${a}`,{params:{fields:[Aa]}});if(0===t.data.data.length||void 0===t.data.data[0][Aa]||null===t.data.data[0][Aa])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for source weight unit ${a}. Ensure that the symbol is correct and is a weight unit symbol`);const n=await r.get(`/items/${Ca}?filter[${Ia}]=${e}`,{params:{fields:[Aa]}});if(0===n.data.data.length||void 0===n.data.data[0][Aa]||null===n.data.data[0][Aa])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for the target weight unit ${e}. Ensure that the symbol is correct and is a weight unit symbol`);const o=parseFloat(t.data.data[0][Aa]);if(isNaN(o))throw new Error(`[getAssayUnitConversionValue] source weight unit ${a} conversion value=${o} is not a number`);console.log(`[getAssayUnitConversionValue] source unit conversion value=${o}`);const i=parseFloat(n.data.data[0][Aa]);if(isNaN(i))throw new Error(`[getAssayUnitConversionValue] target weight unit ${a} conversion value=${i} is not a number`);return console.log(`[getAssayUnitConversionValue] target unit conversion value=${i}`),console.log("[getAssayUnitConversionValue] returning "+o/i),o/i}function M(a,e){if(void 0===a||void 0===e||null===a||null===e)return;const t=a.split("/"),n=e.split("/");if(t.length>2||n.length>2)throw new Error(`[getConversionUnit] sourceUnit=${a} and targetUnit=${e} must be in the format of 'unit1/unit2', an extra '/' was found`);if(1===t.length&&1===n.length)return`${n[0]}/${t[0]}`;if(1===t.length){const a=n[0]===t[0]?"":`${n[1]}(${t[1]})`,e=n[1];return""===e?a:`${a}/${e}`}if(1===n.length){const a=t[1],e=t[0]===n[0]?"":`${t[1]}(${n[0]})`;return""===e?a:`${a}/${e}`}{const a=t[0]===n[0],e=t[1]===n[1],o=a||""===t[0],i=a||""===n[0],r=e||""===t[1],l=e||""===n[1],s=!r&&!i,d=!o&&!l,c=`${r?"":t[1]}${s?"(":""}${i?"":`${n[0]}`}${s?")":""}`,u=`${o?"":t[0]}${d?"(":""}${l?"":`${n[1]}`}${d?")":""}`;return""===u?c:`${c}/${u}`}}async function F(a,e,t){const n=await r.get(`/items/${ga}?filter[${$a}]=${e}`,{params:{fields:[pa]}});if(!n.data.data||!n.data.data[0]||!n.data.data[0][pa])throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] Dry weight uom not found for symbol ${e}`);const o=n.data.data[0][pa];if("%"===t){if(o===a)return{};const e=M(o,a);if(!e)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] no conversion unit found for dry weight unit ${o} and target weight unit ${a}`);return{finalConversion:{conversionFactor:await k(o,a),conversionUom:e}}}let i=t.split("/");if(1==i.length){const a=await async function(a){const e=await r.get(`/items/${Ca}`,{params:{fields:[Ia,Na],filter:{[Na]:{_nnull:!0},[Ia]:{_eq:a}}}});if(200!==e.status||!e.data||0===e.data.data.length)throw new Error("[getAssayUnitComposition] no assay units found with composition");return e.data.data[0][Na]}(t);if(!a)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${t} does not have a composition`);i=a.split("/")}if(i.length>2||0===i.length)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${t} is not in the format of 'unit1/unit2'`);const l=i[0],s=i[1],d={};if(s!==o){const a=M(o,s);if(!a)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] no conversion unit found for dry weight unit ${o} and assay unit denominator unit ${s}`);d.initialConversion={conversionFactor:await k(o,s),conversionUom:a}}if(l!==a){const e=M(l,a);if(!e)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] no conversion unit found for target weight unit ${a} and assay unit numerator unit ${l}`);d.finalConversion={conversionFactor:await k(l,a),conversionUom:e}}return d}const U="foreign_key",j="lot_number",P="method",R="contract",V="counterparty",x="assay_results",J="weight_result",B="actual_arrival_date",W="bl_date",G="invoice_date",L="estimated_shipment_date",q="actual_shipment_date",H="vessel",K="origin",Y="destination",X="shipment_code",Q="adjustments",z="parcel_finalisation_date",Z="dry_weight",aa="final_assay",ea="assay_uom",ta="invoice_type",na="pay_percent",oa="pa_days",ia="pa_day_type",ra="pa_ref_day",la="pa_final_inv_ref_day",sa="pp_days",da="pp_day_type",ca="pp_ref_day",ua="related_commodity_in_contract",ma="lower_threshold",_a="lower_threshold_inclusive",fa="upper_threshold",va="upper_threshold_inclusive",ya="rate",ha="name",ga="navarch_unit",pa="symbol",$a="dry_symbol",wa="dry_unit",ba="wet_unit",Ea="conversionToGram",Ca="navarch_assay_unit",Ia="unit",Aa="conversion_to_ppb",Na="composition",Da="name",Sa="navarch_address_id",Oa="name",ka="line_1",Ta="line_2",Ma="city",Fa="state",Ua="country",ja="zip",Pa="phone_code",Ra="phone_number",Va="email",xa="signatory_name",Ja="signatory_title",Ba="remittance_details",Wa="navarch_country",Ga="name",La="phone_code",qa="line_1",Ha="line_2",Ka="city",Ya="state",Xa="country",Qa="zip",za="name",Za="navarch_world_port",ae="port_name",ee="country",te="navarch_invoices",ne="parcel",oe="invoice",ie="document_type",re="revision_invoice",le="invoice_type";return{invoiceUrl:l.value,generateInvoice:async function(){var a,e,n,o,d,c,f,v,y,h,g,p,w,b,k,T,M,Ea,Ca,Ia,Aa,Na,se,de,ce,ue,me,_e,fe,ve,ye,he,ge,pe;i.value="";try{console.log("[generateInvoice] formValues=",l);const $e=l.value[ne],we=l.value[le],be=await r.get(`/items/navarch_parcel/${$e}`,{params:{fields:[x,J,R,V,B,W,G,L,q,H,K,Y,X,Q]}});console.log(`parcelResponce.data.data=${JSON.stringify(be.data.data)}`);const Ee=be.data.data[x],Ce=be.data.data[J],Ie=be.data.data[R],Ae=await r.get(`/items/navarch_contract_payment_information?filter[related_contract]=${Ie}`,{params:{fields:[ta,na,oa,ia,ra,la,sa,da,ca]}});if(Ae.data.data&&0===Ae.data.data.length)return void(i.value="No invoice type found for the contract");const Ne=Ae.data.data.find((a=>a[ta]===we));if(!Ne)return void(i.value=`Cannot find payment information for ${we} in the contract, please ensure that data for it has been entered and saved`);const De=await r.get(`/items/navarch_assay_lot?filter[${U}]=${Ee}&sort[]=${j}`,{params:{fields:["id","commodity",P,Z,aa,"lot_number",ea]}});console.log(`assayLotResponse.data.data=${JSON.stringify(De.data.data)}`);const Se=await r.get(`/items/navarch_weight_lot?filter[${U}]=${Ce}&sort[]=${j}`,{params:{fields:["id","dry_weight","wet_weight",P,"moisture","wet_weight_uom","dry_weight_uom"]}});console.log(`weightLotResponse.data.data=${JSON.stringify(Se.data.data)}`);const Oe=function(a){console.log("[evaluateWeights]");const e={};for(const t of a)e[t.method]||(console.log(`adding method ${t.method} to weightData object`),e[t.method]=[]),console.log(`adding lot ${t.id} to weightData.${t.method} array`),e[t.method.toString()].push(t);const t=[];for(const a of Object.keys(e)){if(!e[a]){console.log(`method=${a} does not exist in weightData object`);continue}console.log(`adding lots and other values to weights for method=${a}`);const n=s(e[a]);n&&t.push(n)}return t}(Se.data.data),ke=l.value.weight_method;let Te=Oe.find((a=>a.method===ke));if(Te||(Te=Oe.find((a=>"Outturn"===a.method))),Te||(Te=Oe.find((a=>"Inturn Final"===a.method))),Te||(Te=Oe.find((a=>"Inturn"===a.method))),Te||(Te=Oe.find((a=>"Estimated"===a.method))),Te||(Te=Oe.find((a=>"Planned"===a.method))),!Te)throw new Error("No weight lot data found for all weight methods. Please ensure weight lot data has been entered in the selected parcel.");if(void 0===Te.dry_weight||null===Te.dry_weight||void 0===Te.wet_weight||null===Te.wet_weight||void 0===Te.moisture||null===Te.moisture||void 0===Te.dry_weight_uom||null===Te.dry_weight_uom||void 0===Te.wet_weight_uom||null===Te.wet_weight_uom||void 0===Te.method||null===Te.method)throw new Error("One of the fields for weight lots is undefined");const Me=await r.get(`/items/${ga}?filter[${$a}]=${Te.dry_weight_uom}`,{params:{fields:[wa]}}),Fe=await r.get(`/items/${ga}?filter[wet_symbol]=${Te.wet_weight_uom}`,{params:{fields:[ba]}});if(!Me.data.data||!Me.data.data[0]||!Me.data.data[0][wa])throw new Error(`Dry weight uom not found for symbol ${Te.dry_weight_uom}`);if(!Fe.data.data||!Fe.data.data[0]||!Fe.data.data[0][ba])throw new Error(`Wet weight uom not found for symbol ${Te.wet_weight_uom}`);const Ue=Me.data.data[0][wa],je=0===Ue.indexOf("dry")?Ue:`dry ${Ue}`,Pe=Fe.data.data[0][ba],Re=0===Pe.indexOf("wet")?Pe:`wet ${Pe}`,Ve=function(a){var e;console.log("[evaluateAnalyticalAssay]");const t={};for(const e of a)t[e.method]||(t[e.method]={}),t[e.method][e.commodity]||(t[e.method][e.commodity]=[]),null!==e.lot_number?(1===t[e.method][e.commodity].length&&null===t[e.method][e.commodity][0].lot_number&&(t[e.method][e.commodity]=[]),t[e.method][e.commodity].push(e)):null===e.lot_number&&0===t[e.method][e.commodity].length&&t[e.method][e.commodity].push(e);console.log(`[evaluateAnalyticalAssay] group: ${JSON.stringify(t)}}`);const n={};for(const a in t){console.log(`[evaluateAnalyticalAssay] methodKey: ${a}, group[methodKey]: ${JSON.stringify(t[a])}`);for(const o in t[a]){console.log(`[evaluateAnalyticalAssay] commodityKey: ${o}, group[methodKey][commodityKey]: ${JSON.stringify(t[a][o])}`),n[a]=null!=(e=n[a])?e:{},n[a][o]={};const i=t[a][o].reduce(((a,e)=>a+e[Z]),0);console.log(`[evaluateAnalyticalAssay] totalDryWeight: ${i} from ${JSON.stringify(t[a][o])}`),n[a][o].analytical_assay=t[a][o].reduce(((a,e)=>a+e[aa]*e[Z]),0)/(0!==i?i:1),console.log(`[evaluateAnalyticalAssay] analytical assay: ${n[a][o].analytical_assay}`),t[a][o].length>0&&(n[a][o][ea]=t[a][o][0][ea])}}return console.log(`[evaluateAnalyticalAssay] analyticalAssay: ${JSON.stringify(n)}`),n}(De.data.data),xe=l.value.assay_method;let Je;if(xe&&(Je=Ve[xe.toString()]),Je||(Je=Ve.Outturn),Je||(Je=Ve["Inturn Final"]),Je||(Je=Ve.Inturn),Je||(Je=Ve.Estimated),Je||(Je=Ve.Planned),!Je)throw new Error("No assay lot data found for all assay methods. Please ensure assay lot data has been entered in the selected parcel.");console.log(`WEIGHT: ${JSON.stringify(Te)}`),console.log(`ASSAYS: ${JSON.stringify(Je)}`);const Be=await r.get(`/items/navarch_contract/${Ie}`,{params:{fields:["contract_currency"]}}),We=(await r.get(`/items/navarch_currency/${Be.data.data.contract_currency}`,{params:{fields:["code"]}})).data.data.code,Ge=await r.get(`/items/navarch_commodity_in_contract?filter[${R}]=${Ie}`,{params:{fields:["id","commodity","primary_commodity","price_method","quotational_periods","payable_assay_rates","treatment_charge_rates","penalty_rates","penalty_per_uom","price_per_uom","treatment_charge_per_uom"]}});console.log(`\tcommodityInContractResponse: ${JSON.stringify(Ge.data.data)}`);const Le=[],qe=[];let He="";for(const{id:t,commodity:i,primary_commodity:l,price_method:s,quotational_periods:_,price_per_uom:I,penalty_per_uom:U,treatment_charge_per_uom:j}of Ge.data.data){const P=await r.get(`/items/navarch_commodity/${i}`,{params:{fields:[ha,"code"]}});if(u(P.data.data),!Je[P.data.data.code]){console.log(`[generateInvoice] no analytical assay for commodity ${P.data.data.code} found, skipping...`);continue}if(l&&(He=P.data.data[ha]),null!==_){const i=_;console.log(`\tquotationalPeriods: ${JSON.stringify(i)}`);const l=Array.isArray(i)?i.find((a=>a.default)):null;if(!l)throw new Error(`No default quotational period found for commodity ${P.data.data.code}`);const u=i.filter((a=>!a.default)).map((a=>`${a.qp_period} ${a.qp_code}`)),C=[`${l.qp_period} ${l.qp_code}`,...u].join(", ");console.log(`[generateInvoice] evaluate payable assay for ${P.data.data.code} with an analytical assay=${null==(a=Je[P.data.data.code])?void 0:a.analytical_assay}`);const U=await r.get(`/items/navarch_payable_assay_bracket?filter[${ua}]=${t}`,{params:{fields:["bracket_type",ma,_a,fa,va,ya,"rate_type","initial_adjustment","initial_adjustment_uom","minimum_deduction","minimum_deduction_uom","maximum_cap","maximum_cap_uom"]}}),{payableAssay:R,expression:V}=await $(null==(e=Je[P.data.data.code])?void 0:e.analytical_assay,null==(n=Je[P.data.data.code])?void 0:n.assay_uom,U.data.data);let x,J;if("Final"!==we){const a={invoice_type:we,days:Ne[sa],day_type:Ne[da],ref_day:Ne[ca]};if(!a)throw new Error(`[generateInvoice] No provisional pricing found for invoice type ${we}`);let e;switch(a.ref_day){case"Arrival Date":e=B;break;case"B/L Date":e=W;break;case"Invoice Date":e=G;break;case"Actual Shipment Date":e=q;break;case"Estimated Shipment Date":e=L;break;default:throw new Error(`[generateInvoice] Invalid ref_day ${a.ref_day}`)}if(J=new Date(be.data.data[e]),null==J||null==J)throw new Error(`[generateInvoice] Invalid ref_day ${a.ref_day}`);const t=parseInt(a.days),n=a.day_type;switch(n){case"Business Day(s)":x=N(J,t,!0);break;case"Calendar Day(s)":x=new Date(J.valueOf()),x.setDate(x.getDate()-t);break;default:throw new Error(`[generateInvoice] Invalid day_type ${n}`)}}else{let a;switch(l.qp_code){case"MAMA":a=B;break;case"MOSS":a=L;break;case"MOS":case"MOAS":a=q;break;default:throw new Error(`[generateInvoice] Unsupported QP code ${l.qp_code}, currently only supports MAMA, MOS, MOSS, and MOAS`)}const e=new Date(be.data.data[a]);if(null==e)throw new Error(`[generateInvoice] Invalid reference day for ${a} from ${l.qp_code}`);if(x=D(e,l.qp_period),x.valueOf()>Date.now())throw new Error(`[generateInvoice] Start date for provisional pricing ${x} based on default QP has not occurred yet`);if(J=S(e,l.qp_period),J.valueOf()>Date.now())throw new Error(`[generateInvoice] End date for provisional pricing ${J} based on default QP has not occurred yet`)}console.log(`[generateInvoice] provisional pricing date range: ${x.toString()} - ${J.toString()}`);const H=await O(P.data.data.code,s);let K;const Y=await r.get(`/items/navarch_treatment_charge_bracket?filter[${ua}]=${t}`,{params:{fields:[ma,_a,fa,va,"base_treatment_charge","use_btc","for_every_unit",ya]}});void 0!==Y.data.data&&null!==Y.data.data&&Y.data.data.length>0&&(K=await E(H,null==(o=Je[P.data.data.code])||o.assay_uom,Y.data.data));const X=(await r.get(`/items/${ga}/${I}`,{params:{fields:[pa]}})).data.data[pa];let Q;if(K){Q=(await r.get(`/items/${ga}/${j}`,{params:{fields:[pa]}})).data.data[pa]}const z=await F(X,Te.dry_weight_uom,null==(d=Je[P.data.data.code])?void 0:d.assay_uom);console.log(`[generateInvoice] payableMetalConversion for commodity ${P.data.data.name}: ${JSON.stringify(z)}`),z.initialConversion=1===(null==(c=z.initialConversion)?void 0:c.conversionFactor)?void 0:z.initialConversion,z.finalConversion=1===(null==(f=z.finalConversion)?void 0:f.conversionFactor)?void 0:z.finalConversion,Le.push({commodity:P.data.data.name,analytical_assay:m(null==(v=Je[P.data.data.code])?void 0:v.analytical_assay,4),deduction_expression:V,payable_assay:m(R,4),assay_uom:null==(y=Je[P.data.data.code])?void 0:y.assay_uom,payable_metal:m(Te.dry_weight*(null!=(g=null==(h=z.initialConversion)?void 0:h.conversionFactor)?g:1)*(null!=R?R:1)*(null!=(w=null==(p=z.finalConversion)?void 0:p.conversionFactor)?w:1)*("%"!==(null==(b=Je[P.data.data.code])?void 0:b.assay_uom)?1:.01),4),payable_metal_expression:`${m(Te.dry_weight,4)}${Te.dry_weight_uom}${z.initialConversion?` * ${m(z.initialConversion.conversionFactor,4)}${z.initialConversion.conversionUom}`:""} * ${m(null!=R?R:1,4)}${"%"!==(null==(k=Je[P.data.data.code])?void 0:k.assay_uom)?`${null==(T=Je[P.data.data.code])?void 0:T.assay_uom}`:" / 100"}${z.finalConversion?` * ${m(z.finalConversion.conversionFactor,4)}${z.finalConversion.conversionUom}`:""}`,payable_metal_uom:X,qp:C,qp_date_range:`${A(x)} - ${A(J)}`,price_method:s,price_rate:m(H,4),price_per_uom:X,price:m(Te.dry_weight*(null!=(Ea=null==(M=z.initialConversion)?void 0:M.conversionFactor)?Ea:1)*(null!=R?R:1)*(null!=(Ia=null==(Ca=z.finalConversion)?void 0:Ca.conversionFactor)?Ia:1)*("%"!==(null==(Aa=Je[P.data.data.code])?void 0:Aa.assay_uom)?1:.01)*H),treatment_charge:K?{rate:m(K.baseTreatmentCharge,4),discount:m((null!=(Na=K.baseTreatmentCharge)?Na:0)-(null!=(se=K.finalValue)?se:0),4),final_rate:m(K.finalValue,4),per_uom:Q,final_amount:m(Te.dry_weight*(null!=(de=K.finalValue)?de:1))}:void 0,final_total:m(Te.dry_weight*(null!=(ue=null==(ce=z.initialConversion)?void 0:ce.conversionFactor)?ue:1)*(null!=R?R:1)*(null!=(_e=null==(me=z.finalConversion)?void 0:me.conversionFactor)?_e:1)*("%"!==(null==(fe=Je[P.data.data.code])?void 0:fe.assay_uom)?1:.01)*H-(K?1:0)*(Te.dry_weight*(null!=(ve=null==K?void 0:K.finalValue)?ve:1)))})}const R=await r.get(`/items/navarch_penalty_bracket?filter[${ua}]=${t}`,{params:{fields:[ma,_a,fa,va,"no_penalty","for_every_unit",ya]}});if(R.data.data.length>0){if(null===U)throw new Error(`[generateInvoice] penalty_per_uom is null for ${P.data.data.code}`);const a=(await r.get(`/items/${ga}/${U}`,{params:{fields:[pa]}})).data.data[pa],{penalty:e,expression:t,bracket:n}=await C(null==(ye=Je[P.data.data.code])?void 0:ye.analytical_assay,R.data.data,We,a);console.log(`[generateInvoice] evaluate penalty for ${P.data.data.code} with an analytical assay=${null==(he=Je[P.data.data.code])?void 0:he.analytical_assay}, penaltyRate=${null==n?void 0:n.rate}, finalPenaltyRate=${e}, expression='${t}'`),qe.push({commodity:P.data.data.name,analytical_assay:m(null==(ge=Je[P.data.data.code])?void 0:ge.analytical_assay,4),deduction_expression:t,assay_uom:null==(pe=Je[P.data.data.code])?void 0:pe.assay_uom,penalty_rate:m(null==n?void 0:n.rate,4),penalty_per_uom:a,final_penalty_rate:m(e,4),final_penalty:m((null!=e?e:1)*Te.dry_weight)})}}console.log(`[generateInvoice] COMMODITIES: ${JSON.stringify(Le)}`),console.log(`[generateInvoice] PENALTIES: ${JSON.stringify(qe)}`);const Ke=Le.reduce(((a,e)=>a+_(e.price)),0),Ye=Le.reduce(((a,e)=>{var t;return a+_(null==(t=e.treatment_charge)?void 0:t.final_amount)}),0),Xe=qe.reduce(((a,e)=>a+_(e.final_penalty)),0);console.log(`[generateInvoice] TOTAL_REVENUE=${Ke}, TOTAL_TREATMENT_CHARGE=${Ye}, TOTAL_PENALTIES=${Xe}`);let Qe,ze=0;const Ze=!!be.data.data[Q];Ze&&(ze=be.data.data[Q].reduce(((a,e)=>a+e.amount),0),Qe={adjustments:be.data.data[Q].map((a=>({description:a.description,amount:m(a.amount)}))),total_adjustments:m(ze)});const at=Ne[na],et=Ke-Ye-Xe+ze,tt=null!=at?et*at/100:void 0,nt=await r.get(`/items/navarch_counterparty/${be.data.data[V]}`,{params:{fields:[Da]}}),ot=await r.get(`/items/navarch_counterparty_navarch_address?filter[navarch_counterparty_id]=${be.data.data[V]}`,{params:{fields:[Sa]}}),it=be.data.data[H],rt=await r.get(`/items/navarch_vessel/${it}`,{params:{fields:[za]}}),lt=(await r.get("/items/navarch_company",{params:{fields:[Oa,ka,Ta,Ma,Fa,ja,Ua,Pa,Ra,Va,xa,Ja,Ba]}})).data.data,st=lt[Oa],dt=(lt[Va],(await r.get(`/items/${Wa}/${lt[Pa]}`,{params:{fields:[La]}})).data.data[La]),ct=lt[Ra],ut=lt[ka],mt=lt[Ta]?`,\n${lt[Ta]}`:"",_t=lt[Ma]?`,\n${lt[Ma]}`:"",ft=lt[Fa]?`,\n${lt[Fa]}`:"",vt=await r.get(`/items/${Wa}/${lt[Ua]}`,{params:{fields:[Ga]}}),yt=vt.data.data[Ga]?`, ${vt.data.data[Ga]}`:"",ht=`${ut}${mt}${_t}${lt[ja]?` ${lt[ja]}`:""}${ft}${yt}`,gt=ot.data.data[0][Sa],pt=await r.get(`/items/navarch_address/${gt}`,{params:{fields:[qa,Ha,Ka,Ya,Xa,Qa]}}),$t=pt.data.data[qa],wt=pt.data.data[Ha]?`,\n${pt.data.data[Ha]}`:"",bt=pt.data.data[Ka]?`,\n${pt.data.data[Ka]}`:"",Et=pt.data.data[Ya]?`,\n${pt.data.data[Ya]}`:"",Ct=await r.get(`/items/${Wa}/${pt.data.data[Xa]}`,{params:{fields:[Ga]}}),It=Ct.data.data[Ga]?`, ${Ct.data.data[Ga]}`:"",At=`${$t}${wt}${bt}${pt.data.data[Qa]?` ${pt.data.data[Qa]}`:""}${Et}${It}`,Nt=await r.get(`/items/${Za}/${be.data.data[K]}`,{params:{fields:[ae,ee]}}),Dt=await r.get(`/items/${Za}/${be.data.data[Y]}`,{params:{fields:[ae,ee]}});let St=(await r.get(`/items/${te}?filter[${ne}]=${$e}`,{params:{fields:["id",oe]}})).data.data.reduce(((a,e)=>a+(e[oe]?1:0)),0)+1,Ot=$e;const kt=St.toString().padStart(2,"0"),Tt=`${be.data.data[X]} (#${kt})`,Mt=Ot.toString().padStart(2,"0"),Ft={invoice_type:we,days:Ne[oa],day_type:Ne[ia],ref_day:"Final"===we?Ne[la]:Ne[ra]};if(!Ft)throw new Error(`Contract does not have a payment advice for invoice type ${we}`);let Ut;switch(Ft.ref_day){case"Arrival Date":Ut=B;break;case"B/L Date":Ut=W;break;case"Invoice Date":Ut=G;break;case"Actual Shipment Date":Ut=q;break;case"Estimated Shipment Date":Ut=L;break;case"Parcel Finalisation":if(void 0===be.data.data[z]||null===be.data.data[z])throw new Error("[generateInvoice] Parcel has not been finalised, please fill in the the parcel finalisation date in the parcel form.");Ut=z;break;default:throw new Error(`[generateInvoice] Invalid ref_day for payment advice ${Ft.ref_day}`)}const jt=new Date(be.data.data[Ut]);if(null==jt)throw new Error(`[generateInvoice] Invalid ref_day for payment advice ${Ft.ref_day}`);const Pt=parseInt(Ft.days),Rt=Ft.day_type;let Vt;switch(Rt){case"Business Day(s)":Vt=function(a,e,t=!1){const n=new Date(a.valueOf());let o=e-(t?1:0);for(;o>0;)n.setDate(n.getDate()+1),0!==n.getDay()&&6!==n.getDay()&&(o-=1);return n}(jt,Pt,!0);break;case"Calendar Day(s)":Vt=new Date(jt.valueOf()),Vt.setDate(Vt.getDate()+Pt);break;default:throw new Error(`[generateInvoice] Invalid day_type for payment advice ${Rt}`)}console.log(`[generateInvoice] payment advice due date: ${Vt.toString()}`);const xt=A(Vt);let Jt,Bt,Wt,Gt;if(l.value[re]){const a=await r.get(`/items/${te}/${l.value[re]}`,{params:{fields:[ne,oe,le,ie]}});if(console.log(`[generateInvoice] revisionParcelResponse: ${JSON.stringify(a.data)}`),200!==a.status||!a.data.data)throw new Error(`[generateInvoice] Failed to get invoice ${l.value[re]}`);if(a.data.data[ne]!==$e)throw new Error(`[generateInvoice] Parcel ID mismatch between this invoice with parcel ${$e}, and the revision invoice ${l.value[re]} with parcel id ${a.data.data[ne]}`);if(!a.data.data[oe])throw new Error(`[generateInvoice] No invoice pdf has been generated yet for invoice ${l.value[re]}`);if(!a.data.data[le])throw new Error(`[generateInvoice] No invoice type found for the revision invoice ${l.value[re]}`);Wt=a.data.data[le],Gt=a.data.data[ie];const e=a.data.data[oe];if(console.log(`[generateInvoice] revisionInvoiceData: ${JSON.stringify(e)}`),Jt=e.invoice_number,!Jt||""===Jt)throw new Error(`[generateInvoice] Could not find invoice number in revision invoice ${l.value[re]}`);const t=e.balance_in_sellers_favor.replace(/,/g,"");if(Bt=parseFloat(t),!Bt||isNaN(Bt))throw new Error(`[generateInvoice] Total payment=${e.balance_in_sellers_favor} found is not convertible to monetary amount for revision invoice ${l.value[re]}`)}const Lt=null!=tt?tt-(null!=Bt?Bt:0):void 0,qt={seller:st,seller_address:ht,seller_phone_number:`+${dt} ${ct}`,signatory:{signatoryName:lt[xa],signatoryTitle:lt[Ja],company:st},remittance:lt[Ba],buyer:nt.data.data[Da],buyer_address:At,shipment_code:be.data.data[X],vessel:rt.data.data[za],bl_date:A(new Date(be.data.data[W])),invoice_type:we,invoice_date:A(new Date(be.data.data[G])),revision:Jt&&Bt?Gt:void 0,invoice_number:Tt,parcel:`${be.data.data[X]} (#${Mt})`,port_of_loading:`${Nt.data.data[ae]}, ${Nt.data.data[ee]}`,port_of_discharge:`${Dt.data.data[ae]}, ${Dt.data.data[ee]}`,primary_commodity:`${He} Concentrates`,due_date:xt,wet_weight:m(Te.wet_weight,4),wet_weight_uom:Te.wet_weight_uom,wet_weight_uom_name:I(Re),moisture:m(Te.moisture,4),moisture_uom:"%",dry_weight:m(Te.dry_weight,4),dry_weight_uom:Te.dry_weight_uom,dry_weight_uom_name:I(je),total_revenue:m(Ke),total_deductions:m(Xe+Ye),currency:We,commodities:Le,penalties:{penalties:qe,total_penalties:m(Xe)},adjustments:Ze?Qe:void 0,invoice_value:m(et),payable_percentage:m(at),payable_amount:m(tt),payment_received_source:Jt&&Bt&&Gt?`${Wt}.${Gt}.${Jt}`:void 0,payment_received:Jt&&Bt?m(Bt):void 0,balance_in_sellers_favor:m(Lt)};console.log(`[generateInvoice] invoice request body: ${JSON.stringify(qt)}`);const Ht=await r.post("/generate/invoice",qt);if(200!==Ht.status)return console.log(`[generateInvoice] invoice response status: ${Ht.status}`),void(i.value=Ht.data);const Kt={...qt,doc_name:Ht.data};t("input",Kt),console.log(`[generateInvoice] invoice response: ${JSON.stringify(l.value)}`)}catch(a){return console.log(`generating invoice went wrong due to: ${a}`),void(i.value=a)}},viewInvoice:function(){const a=JSON.parse(e.value).doc_name;console.log(`[viewInvoice] doc name: ${a}`);const t=`/display-doc?filepath=${encodeURIComponent(`/data/uploads/${a}.pdf`)}`;window.open(t)},failureReason:i}}});const $={key:0},w={key:1};p.render=function(a,e,t,n,o,v){const y=i("v-button"),h=i("v-notice");return r(),l(s,null,[d(' <input :value="value" @input="handleChange($event.target.value)" /> '),d(" create a button only interface for Directus"),a.value?(r(),l("div",w,[c(y,{class:"margin-top-16px",onClick:e[1]||(e[1]=()=>a.viewInvoice())},{default:u((()=>[m("View Invoice ")])),_:1})])):(r(),l("div",$,[c(y,{class:"margin-top-16px",onClick:e[0]||(e[0]=()=>a.generateInvoice())},{default:u((()=>[m("Generate Invoice")])),_:1}),a.failureReason?(r(),_(h,{key:0},{default:u((()=>[m(f(a.failureReason),1)])),_:1})):d("v-if",!0)]))],2112)},p.__file="src/interface.vue";var b=e({id:"invoice_generator_button",name:"Generate Invoice Button",icon:"receipt_long",description:"This is a custom interface for Navarch's Invoice Generator Button.",component:p,options:null,types:["json"],group:"standard"});export{b as default};
