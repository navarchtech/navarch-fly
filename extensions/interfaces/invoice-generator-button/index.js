import{useApi as e,defineInterface as t}from"@directus/extensions-sdk";import{defineComponent as a,ref as o,inject as n,resolveComponent as r,openBlock as i,createElementBlock as l,Fragment as s,createCommentVNode as d,createVNode as c,withCtx as u,createTextVNode as f,createBlock as m,toDisplayString as h}from"vue";var p=(e=>(e.BRACKET="Brackets",e.MIN_DEDUCTION="Minimum Deduction",e.MAX_CAP="Maximum Cap",e))(p||{}),_=(e=>(e.PERCENTAGE="Percentage",e.FRACTIONAL="Fractional",e))(_||{}),y=(e=>(e.WET_WEIGHT="wet_weight",e.MOISTURE="moisture",e.DRY_WEIGHT="dry_weight",e))(y||{}),v=(e=>(e.METHOD="method",e.WET_WEIGHT_UOM="wet_weight_uom",e.MOISTURE_UOM="moisture_uom",e.DRY_WEIGHT_UOM="dry_weight_uom",e))(v||{}),w=a({props:{value:{type:Object,default:null}},emits:["input"],setup(t,{emit:a}){const r=o(""),i=o(!1),l=e(),s=n("values",o({}));function d(e){if(console.log("[evaluateWeightData]"),0===e.length)return;const t=u(e,y.DRY_WEIGHT),a=u(e,y.WET_WEIGHT);return{method:c(e,v.METHOD),lots:e,dry_weight_uom:c(e,v.DRY_WEIGHT_UOM),wet_weight_uom:c(e,v.WET_WEIGHT_UOM),dry_weight:t,wet_weight:a,moisture:(a-t)/a*100}}function c(e,t){if(console.log("[getFirstValueAsSharedValue]"),0!==e.length)return console.log(`lots[0][${t.toString()}]=${e[0][t.toString()]}`),e[0][t.toString()]}function u(e,t){return console.log("[evaluateAggregateValue]"),e.reduce(((e,a)=>{var o;return e+(null!=(o=a[t.toString()])?o:0)}),0)}function f(e){return null==e}function m(e,t=2,a=!0){if(console.log("[formatNumber]"),isNaN(e)||null===e)return"-";const o=Math.round(e*Math.pow(10,t))/Math.pow(10,t),[n,r]=o.toString().split("."),i=n.replace(/\B(?=(\d{3})+(?!\d))/g,",");if(!r&&!a)return i;return`${i}.${(null!=r?r:"").padEnd(t,"0")}`}function h(e){if(console.log("[parseNumber]"),!e)return 0;const t=parseFloat(e.replace(/,/g,""));return console.log(`[parseNumber] number: ${e} to ${t}`),t}function w(e,t){var a;if(console.log("[findBracket]"),1===e.length){if(t>=(null!=(a=e[0].lower_threshold)?a:0)&&(null===e[0].upper_threshold||void 0===e[0].upper_threshold||t<e[0].upper_threshold))return e[0];throw new Error(`[findBracket] value=${t} does not fall within the only bracket: ${JSON.stringify(e[0])}`)}return e.find((e=>{var a,o;const n=t>(null!=(a=e.lower_threshold)?a:0)&&(null===e.upper_threshold||void 0===e.upper_threshold||t<e.upper_threshold)||e.lower_threshold_inclusive&&t===(null!=(o=e.lower_threshold)?o:0)||e.upper_threshold_inclusive&&t===e.upper_threshold;return console.log(`[findBracket] value=${t} for bracket: ${JSON.stringify(e)}? match=${!!n}`),n}))}function g(e,t){var a,o,n,r,i,l,s;console.log("[evaluateFinalValueFromBrackets]");const d=(e-(null!=(a=t.initial_adjustment)?a:0)*(null!=(o=t.initial_adjustment_conversion_factor)?o:1))*(null!=(n=t.rate)?n:0)*(t.rate_type===_.PERCENTAGE?.01:1)+(null!=(r=t.final_adjustment)?r:0)*(null!=(i=t.final_adjustment_conversion_factor)?i:1);switch(t.bracket_type){case p.MIN_DEDUCTION:if(null===t.comparator||void 0===t.comparator)throw new Error("Minimum deduction not found");const a=t.comparator*(null!=(l=t.comparator_conversion_factor)?l:1);return e-d<a?e-a:d;case p.MAX_CAP:if(null===t.comparator||void 0===t.comparator)throw new Error("Maximum cap not found");const o=t.comparator*(null!=(s=t.comparator_conversion_factor)?s:1);return d>o?o:d;case p.BRACKET:return d;default:throw new Error(`bracket type ${t.bracket_type} is not supported`)}}async function $(e,t,a){var o,n,r,i,l,s,d,c;if(console.log("[evaluatePayableAssay]"),!a||0===a.length)return{};const u=w(a,e);if(!u)throw new Error(`Bracket not found for value ${e}, please ensure the brackets for all commodities defined in the contract cover all range of possible values for payable assays`);let f,h,y=1;u.initial_adjustment_uom&&void 0!==u.initial_adjustment_uom&&null!==u.initial_adjustment_uom&&u.initial_adjustment_uom!==t&&(y=await M(u.initial_adjustment_uom,t),f=P(u.initial_adjustment_uom,t));let v,$=1;u.bracket_type===p.MAX_CAP?(h=null!=(o=u.maximum_cap)?o:0,void 0!==u.maximum_cap_uom&&null!==u.maximum_cap_uom&&u.maximum_cap_uom!==t&&($=await M(u.maximum_cap_uom,t),v=P(u.maximum_cap_uom,t))):u.bracket_type===p.MIN_DEDUCTION&&(h=null!=(n=u.minimum_deduction)?n:0,void 0!==u.minimum_deduction_uom&&null!==u.minimum_deduction_uom&&u.minimum_deduction_uom!==t&&($=await M(u.minimum_deduction_uom,t),v=P(u.minimum_deduction_uom,t)));const E=g(e,{bracket_type:u.bracket_type,rate:null!=(r=u.rate)?r:1,rate_type:null!=(i=u.rate_type)?i:_.FRACTIONAL,initial_adjustment:null!=(l=u.initial_adjustment)?l:0,initial_adjustment_conversion_factor:y,comparator:h,comparator_conversion_factor:$});let b="";const C=void 0!==u.initial_adjustment&&null!==u.initial_adjustment;if(u.bracket_type===p.BRACKET)b=`${C?"(":""}${m(e,4)}${null!=t?t:""}${C?` - ${m(u.initial_adjustment,4)}${null!=(s=u.initial_adjustment_uom)?s:`${null!=t?t:""}`}`:""}${C&&1!==y?` * ${m(y,4)}${f}`:""}${C?")":""} * ${m(u.rate,4)}${u.rate_type===_.PERCENTAGE?"/100":`/${m(1,4)}`}`;else if(u.bracket_type===p.MIN_DEDUCTION){b=E===e-h*$?`${m(e,4)}${null!=t?t:""} - ${m(h,4)}${null!=t?t:""}${1!==$?` * ${m($,4)}${v}`:""}`:`${C?"(":""}${m(e,4)}${null!=t?t:""}${C?` - ${m(u.initial_adjustment,4)}${null!=(d=u.initial_adjustment_uom)?d:`${null!=t?t:""}`}`:""}${C&&1!==y?` * ${m(y,4)}${f}`:""}${C?")":""} * ${m(u.rate,4)}${u.rate_type===_.PERCENTAGE?"/100":`/${m(1,4)}`}`}else{if(u.bracket_type!==p.MAX_CAP)throw new Error(`[buildPayableAssayExpression] unknown bracket method: ${u.bracket_type}`);b=E===h*$?`${m(h,4)}${null!=t?t:""}${1!==$?` * ${m($,4)}${v}`:""}`:`${C?"(":""}${m(e,4)}${null!=t?t:""}${C?` - ${m(u.initial_adjustment,4)}${null!=(c=u.initial_adjustment_uom)?c:`${null!=t?t:""}`}`:""}${C&&1!==y?` * ${m(y,4)}${f}`:""}${C?")":""} * ${m(u.rate,4)}${u.rate_type===_.PERCENTAGE?"/100":`/${m(1,4)}`}`}return{payableAssay:E,expression:b}}console.log("[main] formValues=",s);const E="above the lower threshold, plus",b="below the upper threshold, minus";function C(e,t,a){var o,n,r,i;if(console.log("[evaluateTreatmentCharge]"),!a||!a.length)return;const l=w(a,e);if(!l)throw new Error(`Bracket not found for value ${e}, please ensure the brackets for all commodities defined in the contract cover all range of possible values for treatment charge`);let s=0,d=1;if(l.use_btc)d=0,s=0;else if(d=null!=(o=l.rate)?o:1,l.for_every_unit===E)s=null!=(n=l.lower_threshold)?n:0;else{if(l.for_every_unit!==b)throw new Error(`[evaluateTreatmentCharge] unknown for_every_unit: ${l.for_every_unit}`);s=null!=(r=l.upper_threshold)?r:0}const c={bracket_type:p.BRACKET,rate:d,rate_type:_.FRACTIONAL,initial_adjustment:s,final_adjustment:null!=(i=l.base_treatment_charge)?i:0};return console.log(`[evaluateTreatmentCharge] bracketForEvaluation: ${JSON.stringify(c)}`),{finalValue:g(e,c),baseTreatmentCharge:l.base_treatment_charge}}function N(e,t,a,o){var n,r,i;if(console.log("[evaluatePenalty]"),!t||!t.length)return{};const l=w(t,e);if(!l)throw new Error(`[evaluatePenalty] Bracket not found for value ${e}, please ensure the brackets for all commodities defined in the contract cover all range of possible values for penalty`);let s=0,d=1;if(l.no_penalty)d=0,s=0;else if(d=null!=(n=l.rate)?n:1,l.for_every_unit===E)s=null!=(r=l.lower_threshold)?r:0;else{if(l.for_every_unit!==b)throw new Error(`[evaluatePenalty] unknown for_every_unit: ${l.for_every_unit}`);s=null!=(i=l.upper_threshold)?i:0}const c={bracket_type:p.BRACKET,rate:d,rate_type:_.FRACTIONAL,initial_adjustment:s,final_adjustment:0};console.log(`[evaluatePenalty] bracketForEvaluation: ${JSON.stringify(c)}`);const u=g(e,c),f=null!=c.initial_adjustment;let h="";return h=l.rate&&0!==l.rate?`${f?"(":""}${m(e,4)}${f?` - ${m(s,4)})`:""} / ${m(1,4)} * ${null!=a?a:""} ${m(d,4)}/${null!=o?o:""}`:"No penalty",{penalty:u,expression:h,bracket:l}}function A(e){return e.toLowerCase().split(" ").map((e=>e.charAt(0).toUpperCase()+e.slice(1))).join(" ")}function D(e){const t=e.getDate(),a=e.getMonth(),o=e.getFullYear();return`${t} ${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][a]} ${o}`}function I(e,t=!0){const a=e.getMonth()+1,o=e.getDate();return`${e.getFullYear()}${t?"-":" "}${a<10?"0":""}${a}${t?"-":" "}${o<10?"0":""}${o}`}function O(e,t,a=!1){const o=new Date(e.valueOf());let n=t-(a?1:0);for(;n>0;)o.setDate(o.getDate()-1),0!==o.getDay()&&6!==o.getDay()&&(n-=1);return o}function T(e,t){const a=new Date(e.valueOf());return a.setMonth(a.getMonth()+t,1),a}function S(e,t){const a=new Date(e.valueOf());return a.setMonth(a.getMonth()+t+1,0),a}async function k(e,t){if(e===t)return 1;const a=await l.get(`/items/${Ce}?filter[${Ne}]=${e}`,{params:{fields:[Oe]}});if(0===a.data.data.length||null===a.data.data[0][Oe]||void 0===a.data.data[0][Oe])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for source weight unit ${e}. Ensure that the symbol is correct and is a weight unit symbol`);const o=await l.get(`/items/${Ce}?filter[${Ne}]=${t}`,{params:{fields:[Oe]}});if(0===o.data.data.length||null===o.data.data[0][Oe]||void 0===o.data.data[0][Oe])throw new Error(`[getWeightUnitConversionValue] failed to get conversion value for the target weight unit ${t}. Ensure that the symbol is correct and is a weight unit symbol`);const n=parseFloat(a.data.data[0][Oe]);if(isNaN(n))throw new Error(`[getWeightUnitConversionValue] source weight unit ${e} conversion value=${n} is not a number`);const r=parseFloat(o.data.data[0][Oe]);if(isNaN(r))throw new Error(`[getWeightUnitConversionValue] target weight unit ${t} conversion value=${r} is not a number`);return n/r}async function M(e,t){if(null==e||null==t)return 1;if(e===t)return 1;const a=await l.get(`/items/${Te}?filter[${Se}]=${e}`,{params:{fields:[ke]}});if(0===a.data.data.length||void 0===a.data.data[0][ke]||null===a.data.data[0][ke])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for source weight unit ${e}. Ensure that the symbol is correct and is a weight unit symbol`);const o=await l.get(`/items/${Te}?filter[${Se}]=${t}`,{params:{fields:[ke]}});if(0===o.data.data.length||void 0===o.data.data[0][ke]||null===o.data.data[0][ke])throw new Error(`[getAssayUnitConversionValue] failed to get conversion value for the target weight unit ${t}. Ensure that the symbol is correct and is a weight unit symbol`);const n=parseFloat(a.data.data[0][ke]);if(isNaN(n))throw new Error(`[getAssayUnitConversionValue] source weight unit ${e} conversion value=${n} is not a number`);console.log(`[getAssayUnitConversionValue] source unit conversion value=${n}`);const r=parseFloat(o.data.data[0][ke]);if(isNaN(r))throw new Error(`[getAssayUnitConversionValue] target weight unit ${e} conversion value=${r} is not a number`);return console.log(`[getAssayUnitConversionValue] target unit conversion value=${r}`),console.log("[getAssayUnitConversionValue] returning "+n/r),n/r}function P(e,t){if(void 0===e||void 0===t||null===e||null===t)return;const a=e.split("/"),o=t.split("/");if(a.length>2||o.length>2)throw new Error(`[getConversionUnit] sourceUnit=${e} and targetUnit=${t} must be in the format of 'unit1/unit2', an extra '/' was found`);if(1===a.length&&1===o.length)return`${o[0]}/${a[0]}`;if(1===a.length){const e=o[0]===a[0]?"":`${o[1]}(${a[1]})`,t=o[1];return""===t?e:`${e}/${t}`}if(1===o.length){const e=a[1],t=a[0]===o[0]?"":`${a[1]}(${o[0]})`;return""===t?e:`${e}/${t}`}{const e=a[0]===o[0],t=a[1]===o[1],n=e||""===a[0],r=e||""===o[0],i=t||""===a[1],l=t||""===o[1],s=!i&&!r,d=!n&&!l,c=`${i?"":a[1]}${s?"(":""}${r?"":`${o[0]}`}${s?")":""}`,u=`${n?"":a[0]}${d?"(":""}${l?"":`${o[1]}`}${d?")":""}`;return""===u?c:`${c}/${u}`}}async function U(e,t,a){const o=await l.get(`/items/${Ce}?filter[${Ae}]=${t}`,{params:{fields:[Ne]}});if(!o.data.data||!o.data.data[0]||!o.data.data[0][Ne])throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] Dry weight uom not found for symbol ${t}`);const n=o.data.data[0][Ne];if("%"===a){if(n===e)return{};const t=P(n,e);if(!t)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] no conversion unit found for dry weight unit ${n} and target weight unit ${e}`);return{finalConversion:{conversionFactor:await k(n,e),conversionUom:t}}}let r=a.split("/");if(1==r.length){const e=await async function(e){const t=await l.get(`/items/${Te}`,{params:{fields:[Se,Me],filter:{[Me]:{_nnull:!0},[Se]:{_eq:e}}}});if(200!==t.status||!t.data||0===t.data.data.length)throw new Error("[getAssayUnitComposition] no assay units found with composition");return t.data.data[0][Me]}(a);if(!e)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${a} does not have a composition`);r=e.split("/")}if(r.length>2||0===r.length)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] assay unit ${a} is not in the format of 'unit1/unit2'`);const i=r[0],s=r[1],d={};if(s!==n){const e=P(n,s);if(!e)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] no conversion unit found for dry weight unit ${n} and assay unit denominator unit ${s}`);d.initialConversion={conversionFactor:await k(n,s),conversionUom:e}}if(i!==e){const t=P(i,e);if(!t)throw new Error(`[getConversionValuesAndUnitsForPayableMetalCalculation] no conversion unit found for target weight unit ${e} and assay unit numerator unit ${i}`);d.finalConversion={conversionFactor:await k(i,e),conversionUom:t}}return d}const F="foreign_key",R="lot_number",j="method",V="contract",x="counterparty",J="assay_results",B="weight_result",G="actual_arrival_date",W="bl_date",q="invoice_date",L="estimated_shipment_date",H="actual_shipment_date",K="vessel",Y="origin",Q="destination",X="shipment_code",z="adjustments",Z="parcel_finalisation_date",ee="dry_weight",te="final_assay",ae="assay_uom",oe="contract_currency",ne="invoice_type",re="pay_percent",ie="pa_days",le="pa_day_type",se="pa_ref_day",de="pa_final_inv_ref_day",ce="pp_days",ue="pp_day_type",fe="pp_ref_day",me="commodity",he="price_per_uom",pe="related_commodity_in_contract",_e="lower_threshold",ye="lower_threshold_inclusive",ve="upper_threshold",we="upper_threshold_inclusive",ge="rate",$e="name",Ee="code",be="code",Ce="navarch_unit",Ne="symbol",Ae="dry_symbol",De="dry_unit",Ie="wet_unit",Oe="conversionToGram",Te="navarch_assay_unit",Se="unit",ke="conversion_to_ppb",Me="composition",Pe="name",Ue="navarch_address_id",Fe="name",Re="line_1",je="line_2",Ve="city",xe="state",Je="country",Be="zip",Ge="phone_code",We="phone_number",qe="signatory_name",Le="signatory_title",He="remittance_details",Ke="navarch_country",Ye="name",Qe="phone_code",Xe="line_1",ze="line_2",Ze="city",et="state",tt="country",at="zip",ot="name",nt="navarch_world_port",rt="port_name",it="country",lt="price_pm",st="average_price",dt="date",ct="navarch_invoices",ut="parcel",ft="invoice",mt="document_type",ht="revision_invoice",pt="invoice_type";return{isGeneraingDoc:i,invoiceUrl:s.value,generateInvoice:async function(){var e,t,o,n,c,u,f,p,_,y,v,w,g,E,b,I,k,M,P,Oe,Te,Se,ke,Me,lt,st,dt,Et,bt,Ct,Nt,At,Dt,It;r.value="";try{i.value=!0,console.log("[generateInvoice] formValues=",s);const Ot=s.value[ut];if(!Ot)return r.value="Parcel not selected for invoice document generation",void(i.value=!1);const Tt=s.value[pt],St=await l.get(`/items/navarch_parcel/${Ot}`,{params:{fields:[J,B,V,x,G,W,q,L,H,K,Y,Q,X,z]}});console.log(`parcelResponce.data.data=${JSON.stringify(St.data.data)}`),function(e){if(!e)throw new Error("Parcel data not found, please ensure the selected parcel still exists");if(!e[V])throw new Error("The selected parcel does not have a contract, please ensure that the contract field for the parcel is not empty");if(!e[x])throw new Error("The selected parcel does not have a counterparty, please ensure that the counterparty field for the parcel is not empty");if(!e[J])throw new Error("The selected parcel does not have assay results");if(!e[B])throw new Error("The selected parcel does not have weight results");if(!e[Y])throw new Error("The selected parcel does not have an origin port");if(!e[Q])throw new Error("The selected parcel does not have a destination port");if(!e[X])throw new Error("The selected parcel does not have a shipment code")}(St.data.data);const kt=St.data.data[J],Mt=St.data.data[B],Pt=St.data.data[V],Ut=await l.get(`/items/navarch_contract_payment_information?filter[related_contract]=${Pt}`,{params:{fields:[ne,re,ie,le,se,de,ce,ue,fe]}});if(Ut.data.data&&0===Ut.data.data.length)return r.value="No invoice type found for the contract",void(i.value=!1);const Ft=Ut.data.data.find((e=>e[ne]===Tt));if(!Ft)return r.value=`Cannot find payment information for ${Tt} in the contract, please ensure that data for it has been entered and saved`,void(i.value=!1);const Rt=await l.get(`/items/navarch_weight_lot?filter[${F}]=${Mt}&sort[]=${R}`,{params:{fields:["id","dry_weight","wet_weight",j,"moisture","wet_weight_uom","dry_weight_uom"]}});console.log(`weightLotResponse.data.data=${JSON.stringify(Rt.data.data)}`),function(e){if(!e||0===e.length)throw new Error("No weight lots found for the selected parcel")}(Rt.data.data);const jt=function(e){console.log("[evaluateWeights]");const t={};for(const a of e)t[a.method]||(console.log(`adding method ${a.method} to weightData object`),t[a.method]=[]),console.log(`adding lot ${a.id} to weightData.${a.method} array`),t[a.method.toString()].push(a);const a=[];for(const e of Object.keys(t)){if(!t[e]){console.log(`method=${e} does not exist in weightData object`);continue}console.log(`adding lots and other values to weights for method=${e}`);const o=d(t[e]);o&&a.push(o)}return a}(Rt.data.data),Vt=s.value.weight_method;let xt=jt.find((e=>e.method===Vt));if(xt||(xt=jt.find((e=>"Outturn"===e.method))),xt||(xt=jt.find((e=>"Inturn Final"===e.method))),xt||(xt=jt.find((e=>"Inturn"===e.method))),xt||(xt=jt.find((e=>"Estimated"===e.method))),xt||(xt=jt.find((e=>"Planned"===e.method))),!xt)throw new Error("No weight lot data found for all weight methods. Please ensure weight lot data has been entered in the selected parcel.");if(void 0===xt.dry_weight||null===xt.dry_weight||void 0===xt.wet_weight||null===xt.wet_weight||void 0===xt.moisture||null===xt.moisture||void 0===xt.dry_weight_uom||null===xt.dry_weight_uom||void 0===xt.wet_weight_uom||null===xt.wet_weight_uom||void 0===xt.method||null===xt.method)throw new Error("One of the fields for weight lots is undefined");const Jt=await l.get(`/items/${Ce}?filter[${Ae}]=${xt.dry_weight_uom}`,{params:{fields:[De]}}),Bt=await l.get(`/items/${Ce}?filter[wet_symbol]=${xt.wet_weight_uom}`,{params:{fields:[Ie]}});if(!Jt.data.data||!Jt.data.data[0]||!Jt.data.data[0][De])throw new Error(`Dry weight uom not found for symbol ${xt.dry_weight_uom}`);if(!Bt.data.data||!Bt.data.data[0]||!Bt.data.data[0][Ie])throw new Error(`Wet weight uom not found for symbol ${xt.wet_weight_uom}`);const Gt=Jt.data.data[0][De],Wt=0===Gt.indexOf("dry")?Gt:`dry ${Gt}`,qt=Bt.data.data[0][Ie],Lt=0===qt.indexOf("wet")?qt:`wet ${qt}`,Ht=await l.get(`/items/navarch_assay_lot?filter[${F}]=${kt}&sort[]=${R}`,{params:{fields:["id","commodity",j,ee,te,"lot_number",ae]}});console.log(`assayLotResponse.data.data=${JSON.stringify(Ht.data.data)}`),function(e){if(!e||0===e.length)throw new Error("No assay lots found for the selected parcel")}(Ht.data.data);const Kt=function(e){var t;console.log("[evaluateAnalyticalAssay]");const a={};for(const t of e)a[t.method]||(a[t.method]={}),a[t.method][t.commodity]||(a[t.method][t.commodity]=[]),null!==t.lot_number?(1===a[t.method][t.commodity].length&&null===a[t.method][t.commodity][0].lot_number&&(a[t.method][t.commodity]=[]),a[t.method][t.commodity].push(t)):null===t.lot_number&&0===a[t.method][t.commodity].length&&a[t.method][t.commodity].push(t);console.log(`[evaluateAnalyticalAssay] group: ${JSON.stringify(a)}}`);const o={};for(const e in a){console.log(`[evaluateAnalyticalAssay] methodKey: ${e}, group[methodKey]: ${JSON.stringify(a[e])}`);for(const n in a[e]){console.log(`[evaluateAnalyticalAssay] commodityKey: ${n}, group[methodKey][commodityKey]: ${JSON.stringify(a[e][n])}`),o[e]=null!=(t=o[e])?t:{},o[e][n]={};const r=a[e][n].reduce(((e,t)=>e+t[ee]),0);console.log(`[evaluateAnalyticalAssay] totalDryWeight: ${r} from ${JSON.stringify(a[e][n])}`),o[e][n].analytical_assay=a[e][n].reduce(((e,t)=>e+t[te]*t[ee]),0)/(0!==r?r:1),console.log(`[evaluateAnalyticalAssay] analytical assay: ${o[e][n].analytical_assay}`),a[e][n].length>0&&(o[e][n][ae]=a[e][n][0][ae])}}return console.log(`[evaluateAnalyticalAssay] analyticalAssay: ${JSON.stringify(o)}`),o}(Ht.data.data),Yt=s.value.assay_method;let Qt;if(Yt&&(Qt=Kt[Yt.toString()]),Qt||(Qt=Kt.Outturn),Qt||(Qt=Kt["Inturn Final"]),Qt||(Qt=Kt.Inturn),Qt||(Qt=Kt.Estimated),Qt||(Qt=Kt.Planned),!Qt)throw new Error("No assay lot data found for all assay methods. Please ensure assay lot data has been entered in the selected parcel.");console.log(`WEIGHT: ${JSON.stringify(xt)}`),console.log(`ASSAYS: ${JSON.stringify(Qt)}`);const Xt=await l.get(`/items/navarch_contract/${Pt}`,{params:{fields:[oe]}});!function(e){if(!e)throw new Error("Contract data not found, please ensure the selected contract still exists");if(!e[oe])throw new Error("The selected contract does not have a set currency, please ensure that the currency field for the contract is not empty")}(Xt.data.data);const zt=await l.get(`/items/navarch_currency/${Xt.data.data.contract_currency}`,{params:{fields:[be]}});!function(e){if(!e)throw new Error("Currency data not found, please ensure the selected currency still exists");if(!e[be])throw new Error("The selected currency in the contract is not valid")}(zt.data.data);const Zt=zt.data.data.code,ea=await l.get(`/items/navarch_commodity_in_contract?filter[contract]=${Pt}`,{params:{fields:["id",me,"primary_commodity","price_method","quotational_periods","payable_assay_rates","treatment_charge_rates","penalty_rates","penalty_per_uom",he,"treatment_charge_per_uom"]}});!function(e){if(!e||0===e.length)throw new Error("No commodity data found in selected contract for parcel");if(!e.every((e=>e[me])))throw new Error("The selected contract has an undefined commodity, please ensure that the 'Commodity' field for all commodites in the contract is not empty");if(!e.every((e=>e[he])))throw new Error("The selected contract has an undefined base price Uom for commodity, please ensure that the 'Base Price Uom' field for all commodites in the contract is not empty")}(ea.data.data),console.log(`\tcommodityInContractResponse: ${JSON.stringify(ea.data.data)}`);const ta=[],aa=[];let oa="";for(const{id:a,commodity:r,primary_commodity:i,price_method:s,quotational_periods:d,price_per_uom:h,penalty_per_uom:A,treatment_charge_per_uom:F}of ea.data.data){const R=await l.get(`/items/navarch_commodity/${r}`,{params:{fields:[$e,Ee]}});if(vt(R.data.data,r),!Qt[R.data.data.code]){console.log(`[generateInvoice] no analytical assay for commodity ${R.data.data.code} found, skipping...`);continue}if(i&&(oa=R.data.data[$e]),null!==d){const r=d;console.log(`\tquotationalPeriods: ${JSON.stringify(r)}`);const i=Array.isArray(r)?r.find((e=>e.default)):null;if(!i)throw new Error(`No default quotational period found for commodity ${R.data.data.code}`);const N=r.filter((e=>!e.default)).map((e=>`${e.qp_period} ${e.qp_code}`)),A=[`${i.qp_period} ${i.qp_code}`,...N].join(", ");console.log(`[generateInvoice] evaluate payable assay for ${R.data.data.code} with an analytical assay=${null==(e=Qt[R.data.data.code])?void 0:e.analytical_assay}`);const j=await l.get(`/items/navarch_payable_assay_bracket?filter[${pe}]=${a}`,{params:{fields:["bracket_type",_e,ye,ve,we,ge,"rate_type","initial_adjustment","initial_adjustment_uom","minimum_deduction","minimum_deduction_uom","maximum_cap","maximum_cap_uom"]}}),{payableAssay:V,expression:x}=await $(null==(t=Qt[R.data.data.code])?void 0:t.analytical_assay,null==(o=Qt[R.data.data.code])?void 0:o.assay_uom,j.data.data);let J,B,K="";if("Final"!==Tt){const e={invoice_type:Tt,days:Ft[ce],day_type:Ft[ue],ref_day:Ft[fe]};if(!e)throw new Error(`[generateInvoice] No provisional pricing found for invoice type ${Tt}`);let t;switch(e.ref_day){case"Arrival Date":t=G,K="Actual Arrival Date";break;case"B/L Date":t=W,K="B/L Date";break;case"Invoice Date":t=q,K="Invoice Date";break;case"Actual Shipment Date":t=H,K="Actual Shipment Date";break;case"Estimated Shipment Date":t=L,K="Estimated Shipment Date";break;default:throw new Error(`Invalid reference day for invoice pricing: ${e.ref_day}; please contact Navarch for support`)}if(null==St.data.data[t]||null==St.data.data[t])throw new Error(`Reference day for invoice pricing ${K} is empty`);B=new Date(St.data.data[t]);const a=parseInt(e.days),o=e.day_type;switch(o){case"Business Day(s)":J=O(B,a,!0);break;case"Calendar Day(s)":J=new Date(B.valueOf()),J.setDate(J.getDate()-a);break;default:throw new Error(`[generateInvoice] Invalid day_type ${o}`)}}else{let e;switch(i.qp_code){case"MAMA":e=G,K="Actual Arrival Date";break;case"MOSS":e=L,K="Estimated Shipment Date";break;case"MOS":case"MOAS":e=H,K="Actual Shipment Date";break;default:throw new Error(`[generateInvoice] Unsupported QP code ${i.qp_code}, currently only supports MAMA, MOS, MOSS, and MOAS`)}const t=new Date(St.data.data[e]);if(null==t)throw new Error(`[generateInvoice] Invalid reference day for ${K} from ${i.qp_code}`);if(J=T(t,i.qp_period),J.valueOf()>Date.now())throw new Error(`[generateInvoice] Start date for provisional pricing ${J} (${K}) based on default QP has not occurred yet`);if(B=S(t,i.qp_period),B.valueOf()>Date.now())throw new Error(`[generateInvoice] End date for provisional pricing ${B} (${K}) based on default QP has not occurred yet`)}console.log(`[generateInvoice] provisional pricing date range: ${J.toString()} - ${B.toString()}`);const Y=await yt(R.data.data.code,s,J,B);let Q;const X=await l.get(`/items/navarch_treatment_charge_bracket?filter[${pe}]=${a}`,{params:{fields:[_e,ye,ve,we,"base_treatment_charge","use_btc","for_every_unit",ge]}});void 0!==X.data.data&&null!==X.data.data&&X.data.data.length>0&&(Q=await C(Y,null==(n=Qt[R.data.data.code])||n.assay_uom,X.data.data));const z=await l.get(`/items/${Ce}/${h}`,{params:{fields:[Ne]}});wt(z.data.data,R.data.data[$e]);const Z=z.data.data[Ne];let ee;if(Q){if(!F)throw new Error(`Treatment Charge Rate UOM is not defined for commodity ${R.data.data[$e]}`);const e=await l.get(`/items/${Ce}/${F}`,{params:{fields:[Ne]}});gt(e.data.data,R.data.data[$e]),ee=e.data.data[Ne]}const te=await U(Z,xt.dry_weight_uom,null==(c=Qt[R.data.data.code])?void 0:c.assay_uom);console.log(`[generateInvoice] payableMetalConversion for commodity ${R.data.data.name}: ${JSON.stringify(te)}`),te.initialConversion=1===(null==(u=te.initialConversion)?void 0:u.conversionFactor)?void 0:te.initialConversion,te.finalConversion=1===(null==(f=te.finalConversion)?void 0:f.conversionFactor)?void 0:te.finalConversion,ta.push({commodity:R.data.data.name,analytical_assay:m(null==(p=Qt[R.data.data.code])?void 0:p.analytical_assay,4),deduction_expression:x,payable_assay:m(V,4),assay_uom:null==(_=Qt[R.data.data.code])?void 0:_.assay_uom,payable_metal:m(xt.dry_weight*(null!=(v=null==(y=te.initialConversion)?void 0:y.conversionFactor)?v:1)*(null!=V?V:1)*(null!=(g=null==(w=te.finalConversion)?void 0:w.conversionFactor)?g:1)*("%"!==(null==(E=Qt[R.data.data.code])?void 0:E.assay_uom)?1:.01),4),payable_metal_expression:`${m(xt.dry_weight,4)}${xt.dry_weight_uom}${te.initialConversion?` * ${m(te.initialConversion.conversionFactor,4)}${te.initialConversion.conversionUom}`:""} * ${m(null!=V?V:1,4)}${"%"!==(null==(b=Qt[R.data.data.code])?void 0:b.assay_uom)?`${null==(I=Qt[R.data.data.code])?void 0:I.assay_uom}`:" / 100"}${te.finalConversion?` * ${m(te.finalConversion.conversionFactor,4)}${te.finalConversion.conversionUom}`:""}`,payable_metal_uom:Z,qp:A,qp_date_range:`${D(J)} - ${D(B)}`,price_method:s,price_rate:m(Y,4),price_per_uom:Z,price:m(xt.dry_weight*(null!=(M=null==(k=te.initialConversion)?void 0:k.conversionFactor)?M:1)*(null!=V?V:1)*(null!=(Oe=null==(P=te.finalConversion)?void 0:P.conversionFactor)?Oe:1)*("%"!==(null==(Te=Qt[R.data.data.code])?void 0:Te.assay_uom)?1:.01)*Y),treatment_charge:Q?{rate:m(Q.baseTreatmentCharge,4),discount:m((null!=(Se=Q.baseTreatmentCharge)?Se:0)-(null!=(ke=Q.finalValue)?ke:0),4),final_rate:m(Q.finalValue,4),per_uom:ee,final_amount:m(xt.dry_weight*(null!=(Me=Q.finalValue)?Me:1))}:void 0,final_total:m(xt.dry_weight*(null!=(st=null==(lt=te.initialConversion)?void 0:lt.conversionFactor)?st:1)*(null!=V?V:1)*(null!=(Et=null==(dt=te.finalConversion)?void 0:dt.conversionFactor)?Et:1)*("%"!==(null==(bt=Qt[R.data.data.code])?void 0:bt.assay_uom)?1:.01)*Y-(Q?1:0)*(xt.dry_weight*(null!=(Ct=null==Q?void 0:Q.finalValue)?Ct:1)))})}const j=await l.get(`/items/navarch_penalty_bracket?filter[${pe}]=${a}`,{params:{fields:[_e,ye,ve,we,"no_penalty","for_every_unit",ge]}});if(j.data.data.length>0){if(null===A)throw new Error(`[generateInvoice] penalty_per_uom is null for ${R.data.data.code}`);const e=await l.get(`/items/${Ce}/${A}`,{params:{fields:[Ne]}});$t(e.data.data,R.data.data[$e]);const t=e.data.data[Ne],{penalty:a,expression:o,bracket:n}=await N(null==(Nt=Qt[R.data.data.code])?void 0:Nt.analytical_assay,j.data.data,Zt,t);console.log(`[generateInvoice] evaluate penalty for ${R.data.data.code} with an analytical assay=${null==(At=Qt[R.data.data.code])?void 0:At.analytical_assay}, penaltyRate=${null==n?void 0:n.rate}, finalPenaltyRate=${a}, expression='${o}'`),aa.push({commodity:R.data.data.name,analytical_assay:m(null==(Dt=Qt[R.data.data.code])?void 0:Dt.analytical_assay,4),deduction_expression:o,assay_uom:null==(It=Qt[R.data.data.code])?void 0:It.assay_uom,penalty_rate:m(null==n?void 0:n.rate,4),penalty_per_uom:t,final_penalty_rate:m(a,4),final_penalty:m((null!=a?a:1)*xt.dry_weight)})}}console.log(`[generateInvoice] COMMODITIES: ${JSON.stringify(ta)}`),console.log(`[generateInvoice] PENALTIES: ${JSON.stringify(aa)}`);const na=ta.reduce(((e,t)=>e+h(t.price)),0),ra=ta.reduce(((e,t)=>{var a;return e+h(null==(a=t.treatment_charge)?void 0:a.final_amount)}),0),ia=aa.reduce(((e,t)=>e+h(t.final_penalty)),0);console.log(`[generateInvoice] TOTAL_REVENUE=${na}, TOTAL_TREATMENT_CHARGE=${ra}, TOTAL_PENALTIES=${ia}`);let la,sa=0;const da=!!St.data.data[z];da&&(sa=St.data.data[z].reduce(((e,t)=>e+t.amount),0),la={adjustments:St.data.data[z].map((e=>({description:e.description,amount:m(e.amount)}))),total_adjustments:m(sa)});const ca=Ft[re],ua=na-ra-ia+sa,fa=null!=ca?ua*ca/100:void 0,ma=await l.get(`/items/navarch_counterparty/${St.data.data[x]}`,{params:{fields:[Pe]}});!function(e){if(console.log("[validateCounterparty]"),!e)throw new Error("Counterparty for parcel not found");if(!e[Pe])throw new Error("No name defined for counterparty of the selected parcel")}(ma.data.data);const ha=await l.get(`/items/navarch_counterparty_navarch_address?filter[navarch_counterparty_id]=${St.data.data[x]}`,{params:{fields:[Ue]}});!function(e){if(console.log("[validateCounterpartyAddress]"),!e||0===e.length)throw new Error("Counterparty address for parcel not found");if(!e[0][Ue])throw new Error("No address defined for counterparty of the selected parcel")}(ha.data.data);const pa=St.data.data[K];let _a;pa&&(_a=await l.get(`/items/navarch_vessel/${pa}`,{params:{fields:[ot]}}),function(e){if(console.log("[validateVessel]"),!e)throw new Error("Vessel for parcel not found");if(!e[ot])throw new Error("No name defined for vessel of the selected parcel")}(_a.data.data));const ya=(await l.get("/items/navarch_company",{params:{fields:[Fe,Re,je,Ve,xe,Be,Je,Ge,We,qe,Le,He]}})).data.data;!function(e){if(console.log("[validateCompanyData]"),!e)throw new Error("Company data not found");if(!e[Fe])throw new Error("Please set company name in Directories > Company");if(!e[Ge])throw new Error("Please set company phone code in Directories > Company");if(!e[Re])throw new Error("Please set company address line 1 in Directories > Company");if(!e[Je])throw new Error("Please set the country the company is based in Directories > Company");if(!e[We])throw new Error("Please set the company phone number in Directories > Company");if(!e[qe])throw new Error("Please set the company signatory name in Directories > Company");if(!e[Le])throw new Error("Please set the company signatory title in Directories > Company");if(!e[He])throw new Error("Please set the company remittance details in Directories > Company")}(ya);const va=ya[Fe],wa=await l.get(`/items/${Ke}/${ya[Ge]}`,{params:{fields:[Qe]}});!function(e){if(!e)throw new Error("Company phone code not found, please ensure phone code selected for Directories > Company is valid");if(!e[Qe])throw new Error("Company country phone code not found, please contact Navarch support for assistance")}(wa.data.data);const ga=wa.data.data[Qe],$a=ya[We],Ea=ya[Re],ba=ya[je]?`,\n${ya[je]}`:"",Ca=ya[Ve]?`,\n${ya[Ve]}`:"",Na=ya[xe]?`,\n${ya[xe]}`:"",Aa=await l.get(`/items/${Ke}/${ya[Je]}`,{params:{fields:[Ye]}});!function(e){if(!e)throw new Error("Country not found, please ensure country selected for Directories > Company is valid");if(!e[Ye])throw new Error("Country name not found, please contact Navarch support for assistance")}(Aa.data.data);const Da=Aa.data.data[Ye]?`, ${Aa.data.data[Ye]}`:"",Ia=`${Ea}${ba}${Ca}${ya[Be]?` ${ya[Be]}`:""}${Na}${Da}`,Oa=ha.data.data[0][Ue],Ta=await l.get(`/items/navarch_address/${Oa}`,{params:{fields:[Xe,ze,Ze,et,tt,at]}});!function(e){if(!e)throw new Error("Buyer address for parcel not found");if(!e[Xe])throw new Error("No address line 1 defined for buyer address of the selected parcel");if(!e[tt])throw new Error("No country defined for buyer address of the selected parcel")}(Ta.data.data);const Sa=Ta.data.data[Xe],ka=Ta.data.data[ze]?`,\n${Ta.data.data[ze]}`:"",Ma=Ta.data.data[Ze]?`,\n${Ta.data.data[Ze]}`:"",Pa=Ta.data.data[et]?`,\n${Ta.data.data[et]}`:"",Ua=await l.get(`/items/${Ke}/${Ta.data.data[tt]}`,{params:{fields:[Ye]}});!function(e){if(!e)throw new Error("Something went wrong when getting the buyer's based country")}(Ua.data.data);const Fa=Ua.data.data[Ye]?`, ${Ua.data.data[Ye]}`:"",Ra=`${Sa}${ka}${Ma}${Ta.data.data[at]?` ${Ta.data.data[at]}`:""}${Pa}${Fa}`,ja=await l.get(`/items/${nt}/${St.data.data[Y]}`,{params:{fields:[rt,it]}});!function(e){if(!e)throw new Error("Origin port for parcel not found");if(!e[rt])throw new Error("No name defined for origin port of the selected parcel");if(!e[it])throw new Error("No country defined for origin port of the selected parcel")}(ja.data.data);const Va=await l.get(`/items/${nt}/${St.data.data[Q]}`,{params:{fields:[rt,it]}});!function(e){if(!e)throw new Error("Destination port for parcel not found");if(!e[rt])throw new Error("No name defined for destination port of the selected parcel");if(!e[it])throw new Error("No country defined for destination port of the selected parcel")}(Va.data.data);let xa=(await l.get(`/items/${ct}?filter[${ut}]=${Ot}`,{params:{fields:["id",ft]}})).data.data.reduce(((e,t)=>e+(t[ft]?1:0)),0)+1,Ja=Ot;const Ba=xa.toString().padStart(2,"0"),Ga=`${St.data.data[X]} (#${Ba})`,Wa=Ja.toString().padStart(2,"0"),qa={invoice_type:Tt,days:Ft[ie],day_type:Ft[le],ref_day:"Final"===Tt?Ft[de]:Ft[se]};if(!qa)throw new Error(`Contract does not have a payment advice for invoice type ${Tt}`);let La,Ha="";switch(qa.ref_day){case"Arrival Date":La=G,Ha="Actual Arrival Date";break;case"B/L Date":La=W,Ha="B/L Date";break;case"Invoice Date":La=q,Ha="Invoice Date";break;case"Actual Shipment Date":La=H,Ha="Actual Shipment Date";break;case"Estimated Shipment Date":La=L,Ha="Estimated Shipment Date";break;case"Parcel Finalisation":if(void 0===St.data.data[Z]||null===St.data.data[Z])throw new Error("[generateInvoice] Parcel has not been finalised, please fill in the the parcel finalisation date in the parcel form.");La=Z,Ha="Parcel Finalisation Date";break;default:throw new Error(`Invalid reference day for payment advice: ${qa.ref_day}; please contact Navarch for support`)}if(void 0===St.data.data[La]||null===St.data.data[La])throw new Error(`Reference day for payment advice ${Ha} is empty in parcel`);const Ka=new Date,Ya=parseInt(qa.days),Qa=qa.day_type;let Xa;switch(Qa){case"Business Day(s)":Xa=function(e,t,a=!1){const o=new Date(e.valueOf());let n=t-(a?1:0);for(;n>0;)o.setDate(o.getDate()+1),0!==o.getDay()&&6!==o.getDay()&&(n-=1);return o}(Ka,Ya,!0);break;case"Calendar Day(s)":Xa=new Date(Ka.valueOf()),Xa.setDate(Xa.getDate()+Ya);break;default:throw new Error(`[generateInvoice] Invalid day_type for payment advice ${Qa}`)}console.log(`[generateInvoice] payment advice due date: ${Xa.toString()}`);const za=D(Xa);let Za,eo,to,ao;if(s.value[ht]){const e=await l.get(`/items/${ct}/${s.value[ht]}`,{params:{fields:[ut,ft,pt,mt]}});if(console.log(`[generateInvoice] revisionParcelResponse: ${JSON.stringify(e.data)}`),200!==e.status||!e.data.data)throw new Error(`[generateInvoice] Failed to get invoice ${s.value[ht]}`);if(e.data.data[ut]!==Ot)throw new Error(`[generateInvoice] Parcel ID mismatch between this invoice with parcel ${Ot}, and the revision invoice ${s.value[ht]} with parcel id ${e.data.data[ut]}`);if(!e.data.data[ft])throw new Error(`[generateInvoice] No invoice pdf has been generated yet for invoice ${s.value[ht]}`);if(!e.data.data[pt])throw new Error(`[generateInvoice] No invoice type found for the revision invoice ${s.value[ht]}`);to=e.data.data[pt],ao=e.data.data[mt];const t=e.data.data[ft];if(function(e){if(!e)throw new Error("Revision invoice data not found");if(!e.invoice_number)throw new Error("Revision invoice data does not have an invoice number in generated document");if(!e.balance_in_sellers_favor)throw new Error("Revision invoice data does not have a valid 'Balance in Sellers Favor' in generated document")}(t),console.log(`[generateInvoice] revisionInvoiceData: ${JSON.stringify(t)}`),Za=t.invoice_number,!Za||""===Za)throw new Error(`[generateInvoice] Could not find invoice number in revision invoice ${s.value[ht]}`);const a=t.balance_in_sellers_favor.replace(/,/g,"");if(eo=parseFloat(a),!eo||isNaN(eo))throw new Error(`[generateInvoice] Total payment=${t.balance_in_sellers_favor} found is not convertible to monetary amount for revision invoice ${s.value[ht]}`)}const oo=null!=fa?fa-(null!=eo?eo:0):void 0,no={seller:va,seller_address:Ia,seller_phone_number:`+${ga} ${$a}`,signatory:{signatoryName:ya[qe],signatoryTitle:ya[Le],company:va},remittance:ya[He],buyer:ma.data.data[Pe],buyer_address:Ra,shipment_code:St.data.data[X],vessel:_a?_a.data.data[ot]:"N/A",bl_date:St.data.data[W]?D(new Date(St.data.data[W])):"N/A",invoice_type:Tt,invoice_date:St.data.data[q]?D(new Date(St.data.data[q])):"N/A",revision:Za&&eo?ao:void 0,invoice_number:Ga,parcel:`${St.data.data[X]} (#${Wa})`,port_of_loading:`${ja.data.data[rt]}, ${ja.data.data[it]}`,port_of_discharge:`${Va.data.data[rt]}, ${Va.data.data[it]}`,primary_commodity:`${oa} Concentrates`,due_date:za,wet_weight:m(xt.wet_weight,4),wet_weight_uom:xt.wet_weight_uom,wet_weight_uom_name:A(Lt),moisture:m(xt.moisture,4),moisture_uom:"%",dry_weight:m(xt.dry_weight,4),dry_weight_uom:xt.dry_weight_uom,dry_weight_uom_name:A(Wt),total_revenue:m(na),total_deductions:m(ia+ra),currency:Zt,commodities:ta,penalties:{penalties:aa,total_penalties:m(ia)},adjustments:da?la:void 0,invoice_value:m(ua),payable_percentage:m(ca),payable_amount:m(fa),payment_received_source:Za&&eo&&ao?`${to}.${ao}.${Za}`:void 0,payment_received:Za&&eo?m(eo):void 0,balance_in_sellers_favor:m(oo)};console.log(`[generateInvoice] invoice request body: ${JSON.stringify(no)}`);const ro=await l.post("/generate/invoice",no);if(200!==ro.status)return console.log(`[generateInvoice] invoice response status: ${ro.status}`),r.value=ro.data,void(i.value=!1);const io={...no,doc_name:ro.data};a("input",io),console.log(`[generateInvoice] invoice response: ${JSON.stringify(s.value)}`),i.value=!1,_t(ro.data)}catch(e){return i.value=!1,console.log(`generating invoice went wrong due to: ${e}`),void(r.value=e)}},viewInvoice:_t,failureReason:r};function _t(e){const a=null!=e?e:t.value.doc_name;console.log(`[viewInvoice] doc name: ${a}`);const o=`/display-doc?filepath=${encodeURIComponent(`/data/uploads/${a}.pdf`)}`;window.open(o)}async function yt(e,t,a,o,n=1){if(f(e))throw new Error("Commodity is not defined for price calcualtion");if(f(t))throw new Error(`Price method for commodity ${e} is not defined for price calcualtion`);if(f(a))throw new Error(`Start date is not defined for price calcualtion with ${t} has not been properly defined, please ensure that contract QP is properly defined`);if(f(o))throw new Error(`End date is not defined for price calcualtion with ${t} has not been properly defined, please ensure that contract QP is properly defined`);const r=await l.get(`/items/navarch_commodity_price?filter[_and][0][price_method][_eq]=${t}&filter[_and][0][currency][_eq]=${n}&filter[_and][1][date][_between][0]=${I(a)}&filter[_and][1][date][_between][1]=${I(o)}`,{params:{fields:[lt,st,dt,"price_method"]}});if(!r||!r.data||!r.data.data)throw new Error(`[getCommodityAvgPrice] Failed to get commodity prices for commodity ${e} between ${I(a)} and ${I(o)}`);if(0===r.data.data.length)throw new Error(`No commodity prices found for commodity ${e} between ${I(a)} and ${I(o)}`);return r.data.data.reduce(((e,a)=>{if(!a[st]&&!a[lt])throw new Error(`Commodity for ${t} on the date of ${a[dt]} does not have a price, please contact Navarch for assistance`);let o=Number(a[st]);if(isNaN(o)&&(o=Number(a[lt])),isNaN(o))throw new Error(`The commodity price for Price Method #${t} for the date of ${a[dt]} is not a valid number, please contact Navarch for assistance`);return e+o}),0)/r.data.data.length}function vt(e,t){var a,o;if(console.log("[validateCommodityData]"),!e)throw new Error("commodity data response is null");if(!e[$e])throw new Error(`Commodity name for commodity ${null!=(a=e[Ee])?a:t} is undefined, please contact Navarch for assistance`);if(!e[Ee])throw new Error(`Commodity code for commodity ${null!=(o=e[$e])?o:t} is not defined, please contact Navarch for assistance`)}function wt(e,t){if(!e)throw new Error(`Price per UOM for commodity ${t} is not a valid`);if(!e[Ne])throw new Error(`Price per UOM for commodity ${t} does not have a valid unit symbol, please contact Navarch for assistance`)}function gt(e,t){if(!e)throw new Error(`Treatment charge per UOM for commodity ${t} is not a valid`);if(!e[Ne])throw new Error(`Treatment charge per UOM for commodity ${t} does not have a valid unit symbol, please contact Navarch for assistance`)}function $t(e,t){if(!e)throw new Error(`Penalty per UOM for commodity ${t} is not a valid`);if(!e[Ne])throw new Error(`Penalty per UOM for commodity ${t} does not have a valid unit symbol, please contact Navarch for assistance`)}}});const g={key:0},$={key:1};w.render=function(e,t,a,o,n,p){const _=r("v-button"),y=r("v-notice");return i(),l(s,null,[d(' <input :value="value" @input="handleChange($event.target.value)" /> '),d(" create a button only interface for Directus"),e.value?(i(),l("div",$,[c(_,{class:"margin-top-16px",onClick:t[1]||(t[1]=()=>e.viewInvoice())},{default:u((()=>[f("View Invoice ")])),_:1})])):(i(),l("div",g,[c(_,{class:"margin-top-16px",onClick:t[0]||(t[0]=()=>e.generateInvoice()),loading:e.isGeneraingDoc},{default:u((()=>[f("Generate Invoice")])),_:1},8,["loading"]),e.failureReason?(i(),m(y,{key:0},{default:u((()=>[f(h(e.failureReason),1)])),_:1})):d("v-if",!0)]))],2112)},w.__file="src/interface.vue";var E=t({id:"invoice_generator_button",name:"Generate Invoice Button",icon:"receipt_long",description:"This is a custom interface for Navarch's Invoice Generator Button.",component:w,options:null,types:["json"],group:"standard"});export{E as default};
